# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module SDL
  extend FFI::Library
  # Define/Macro


  # Enum


  # Typedef

  typedef :int, :SDL_SpinLock

  # Struct

  class AtomicInt < FFI::Struct
    layout(
      :value, :int,
    )
  end

  class AtomicU32 < FFI::Struct
    layout(
      :value, :uint,
    )
  end


  # Function

  def self.setup_atomic_symbols(output_error = false)
    symbols = [
      :SDL_TryLockSpinlock,
      :SDL_LockSpinlock,
      :SDL_UnlockSpinlock,
      :SDL_MemoryBarrierReleaseFunction,
      :SDL_MemoryBarrierAcquireFunction,
      :SDL_CompareAndSwapAtomicInt,
      :SDL_SetAtomicInt,
      :SDL_GetAtomicInt,
      :SDL_AddAtomicInt,
      :SDL_CompareAndSwapAtomicU32,
      :SDL_SetAtomicU32,
      :SDL_GetAtomicU32,
      :SDL_CompareAndSwapAtomicPointer,
      :SDL_SetAtomicPointer,
      :SDL_GetAtomicPointer,
    ]
    apis = {
      :SDL_TryLockSpinlock => :TryLockSpinlock,
      :SDL_LockSpinlock => :LockSpinlock,
      :SDL_UnlockSpinlock => :UnlockSpinlock,
      :SDL_MemoryBarrierReleaseFunction => :MemoryBarrierReleaseFunction,
      :SDL_MemoryBarrierAcquireFunction => :MemoryBarrierAcquireFunction,
      :SDL_CompareAndSwapAtomicInt => :CompareAndSwapAtomicInt,
      :SDL_SetAtomicInt => :SetAtomicInt,
      :SDL_GetAtomicInt => :GetAtomicInt,
      :SDL_AddAtomicInt => :AddAtomicInt,
      :SDL_CompareAndSwapAtomicU32 => :CompareAndSwapAtomicU32,
      :SDL_SetAtomicU32 => :SetAtomicU32,
      :SDL_GetAtomicU32 => :GetAtomicU32,
      :SDL_CompareAndSwapAtomicPointer => :CompareAndSwapAtomicPointer,
      :SDL_SetAtomicPointer => :SetAtomicPointer,
      :SDL_GetAtomicPointer => :GetAtomicPointer,
    }
    args = {
      :SDL_TryLockSpinlock => [:pointer],
      :SDL_LockSpinlock => [:pointer],
      :SDL_UnlockSpinlock => [:pointer],
      :SDL_MemoryBarrierReleaseFunction => [],
      :SDL_MemoryBarrierAcquireFunction => [],
      :SDL_CompareAndSwapAtomicInt => [:pointer, :int, :int],
      :SDL_SetAtomicInt => [:pointer, :int],
      :SDL_GetAtomicInt => [:pointer],
      :SDL_AddAtomicInt => [:pointer, :int],
      :SDL_CompareAndSwapAtomicU32 => [:pointer, :uint, :uint],
      :SDL_SetAtomicU32 => [:pointer, :uint],
      :SDL_GetAtomicU32 => [:pointer],
      :SDL_CompareAndSwapAtomicPointer => [:pointer, :pointer, :pointer],
      :SDL_SetAtomicPointer => [:pointer, :pointer],
      :SDL_GetAtomicPointer => [:pointer],
    }
    retvals = {
      :SDL_TryLockSpinlock => :bool,
      :SDL_LockSpinlock => :void,
      :SDL_UnlockSpinlock => :void,
      :SDL_MemoryBarrierReleaseFunction => :void,
      :SDL_MemoryBarrierAcquireFunction => :void,
      :SDL_CompareAndSwapAtomicInt => :bool,
      :SDL_SetAtomicInt => :int,
      :SDL_GetAtomicInt => :int,
      :SDL_AddAtomicInt => :int,
      :SDL_CompareAndSwapAtomicU32 => :bool,
      :SDL_SetAtomicU32 => :uint,
      :SDL_GetAtomicU32 => :uint,
      :SDL_CompareAndSwapAtomicPointer => :bool,
      :SDL_SetAtomicPointer => :pointer,
      :SDL_GetAtomicPointer => :pointer,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

