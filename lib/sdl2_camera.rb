# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module SDL
  extend FFI::Library
  # Define/Macro


  # Enum

  CAMERA_POSITION_UNKNOWN = 0
  CAMERA_POSITION_FRONT_FACING = 1
  CAMERA_POSITION_BACK_FACING = 2

  # Typedef

  typedef :uint, :SDL_CameraID
  typedef :int, :SDL_CameraPosition

  # Struct

  class CameraSpec < FFI::Struct
    layout(
      :format, :int,
      :colorspace, :int,
      :width, :int,
      :height, :int,
      :framerate_numerator, :int,
      :framerate_denominator, :int,
    )
  end


  # Function

  def self.setup_camera_symbols(output_error = false)
    symbols = [
      :SDL_GetNumCameraDrivers,
      :SDL_GetCameraDriver,
      :SDL_GetCurrentCameraDriver,
      :SDL_GetCameras,
      :SDL_GetCameraSupportedFormats,
      :SDL_GetCameraName,
      :SDL_GetCameraPosition,
      :SDL_OpenCamera,
      :SDL_GetCameraPermissionState,
      :SDL_GetCameraID,
      :SDL_GetCameraProperties,
      :SDL_GetCameraFormat,
      :SDL_AcquireCameraFrame,
      :SDL_ReleaseCameraFrame,
      :SDL_CloseCamera,
    ]
    apis = {
      :SDL_GetNumCameraDrivers => :GetNumCameraDrivers,
      :SDL_GetCameraDriver => :GetCameraDriver,
      :SDL_GetCurrentCameraDriver => :GetCurrentCameraDriver,
      :SDL_GetCameras => :GetCameras,
      :SDL_GetCameraSupportedFormats => :GetCameraSupportedFormats,
      :SDL_GetCameraName => :GetCameraName,
      :SDL_GetCameraPosition => :GetCameraPosition,
      :SDL_OpenCamera => :OpenCamera,
      :SDL_GetCameraPermissionState => :GetCameraPermissionState,
      :SDL_GetCameraID => :GetCameraID,
      :SDL_GetCameraProperties => :GetCameraProperties,
      :SDL_GetCameraFormat => :GetCameraFormat,
      :SDL_AcquireCameraFrame => :AcquireCameraFrame,
      :SDL_ReleaseCameraFrame => :ReleaseCameraFrame,
      :SDL_CloseCamera => :CloseCamera,
    }
    args = {
      :SDL_GetNumCameraDrivers => [],
      :SDL_GetCameraDriver => [:int],
      :SDL_GetCurrentCameraDriver => [],
      :SDL_GetCameras => [:pointer],
      :SDL_GetCameraSupportedFormats => [:uint, :pointer],
      :SDL_GetCameraName => [:uint],
      :SDL_GetCameraPosition => [:uint],
      :SDL_OpenCamera => [:uint, :pointer],
      :SDL_GetCameraPermissionState => [:pointer],
      :SDL_GetCameraID => [:pointer],
      :SDL_GetCameraProperties => [:pointer],
      :SDL_GetCameraFormat => [:pointer, :pointer],
      :SDL_AcquireCameraFrame => [:pointer, :pointer],
      :SDL_ReleaseCameraFrame => [:pointer, :pointer],
      :SDL_CloseCamera => [:pointer],
    }
    retvals = {
      :SDL_GetNumCameraDrivers => :int,
      :SDL_GetCameraDriver => :pointer,
      :SDL_GetCurrentCameraDriver => :pointer,
      :SDL_GetCameras => :pointer,
      :SDL_GetCameraSupportedFormats => :pointer,
      :SDL_GetCameraName => :pointer,
      :SDL_GetCameraPosition => :int,
      :SDL_OpenCamera => :pointer,
      :SDL_GetCameraPermissionState => :int,
      :SDL_GetCameraID => :uint,
      :SDL_GetCameraProperties => :uint,
      :SDL_GetCameraFormat => :bool,
      :SDL_AcquireCameraFrame => :pointer,
      :SDL_ReleaseCameraFrame => :void,
      :SDL_CloseCamera => :void,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

