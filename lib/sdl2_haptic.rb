# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module SDL
  extend FFI::Library
  # Define/Macro

  HAPTIC_CONSTANT = 1 << 0
  HAPTIC_SINE = 1 << 1
  HAPTIC_SQUARE = 1 << 2
  HAPTIC_TRIANGLE = 1 << 3
  HAPTIC_SAWTOOTHUP = 1 << 4
  HAPTIC_SAWTOOTHDOWN = 1 << 5
  HAPTIC_RAMP = 1 << 6
  HAPTIC_SPRING = 1 << 7
  HAPTIC_DAMPER = 1 << 8
  HAPTIC_INERTIA = 1 << 9
  HAPTIC_FRICTION = 1 << 10
  HAPTIC_LEFTRIGHT = 1 << 11
  HAPTIC_RESERVED1 = 1 << 12
  HAPTIC_RESERVED2 = 1 << 13
  HAPTIC_RESERVED3 = 1 << 14
  HAPTIC_CUSTOM = 1 << 15
  HAPTIC_GAIN = 1 << 16
  HAPTIC_AUTOCENTER = 1 << 17
  HAPTIC_STATUS = 1 << 18
  HAPTIC_PAUSE = 1 << 19
  HAPTIC_POLAR = 0
  HAPTIC_CARTESIAN = 1
  HAPTIC_SPHERICAL = 2
  HAPTIC_STEERING_AXIS = 3
  HAPTIC_INFINITY = 4294967295

  # Enum


  # Typedef

  typedef :uint, :SDL_HapticID

  # Struct

  class HapticDirection < FFI::Struct
    layout(
      :type, :uchar,
      :dir, [:int, 3],
    )
  end

  class HapticConstant < FFI::Struct
    layout(
      :type, :ushort,
      :direction, HapticDirection,
      :length, :uint,
      :delay, :ushort,
      :button, :ushort,
      :interval, :ushort,
      :level, :short,
      :attack_length, :ushort,
      :attack_level, :ushort,
      :fade_length, :ushort,
      :fade_level, :ushort,
    )
  end

  class HapticPeriodic < FFI::Struct
    layout(
      :type, :ushort,
      :direction, HapticDirection,
      :length, :uint,
      :delay, :ushort,
      :button, :ushort,
      :interval, :ushort,
      :period, :ushort,
      :magnitude, :short,
      :offset, :short,
      :phase, :ushort,
      :attack_length, :ushort,
      :attack_level, :ushort,
      :fade_length, :ushort,
      :fade_level, :ushort,
    )
  end

  class HapticCondition < FFI::Struct
    layout(
      :type, :ushort,
      :direction, HapticDirection,
      :length, :uint,
      :delay, :ushort,
      :button, :ushort,
      :interval, :ushort,
      :right_sat, [:ushort, 3],
      :left_sat, [:ushort, 3],
      :right_coeff, [:short, 3],
      :left_coeff, [:short, 3],
      :deadband, [:ushort, 3],
      :center, [:short, 3],
    )
  end

  class HapticRamp < FFI::Struct
    layout(
      :type, :ushort,
      :direction, HapticDirection,
      :length, :uint,
      :delay, :ushort,
      :button, :ushort,
      :interval, :ushort,
      :start, :short,
      :end, :short,
      :attack_length, :ushort,
      :attack_level, :ushort,
      :fade_length, :ushort,
      :fade_level, :ushort,
    )
  end

  class HapticLeftRight < FFI::Struct
    layout(
      :type, :ushort,
      :length, :uint,
      :large_magnitude, :ushort,
      :small_magnitude, :ushort,
    )
  end

  class HapticCustom < FFI::Struct
    layout(
      :type, :ushort,
      :direction, HapticDirection,
      :length, :uint,
      :delay, :ushort,
      :button, :ushort,
      :interval, :ushort,
      :channels, :uchar,
      :period, :ushort,
      :samples, :ushort,
      :data, :pointer,
      :attack_length, :ushort,
      :attack_level, :ushort,
      :fade_length, :ushort,
      :fade_level, :ushort,
    )
  end

  class HapticEffect < FFI::Union
    layout(
      :type, :ushort,
      :constant, HapticConstant,
      :periodic, HapticPeriodic,
      :condition, HapticCondition,
      :ramp, HapticRamp,
      :leftright, HapticLeftRight,
      :custom, HapticCustom,
    )
  end


  # Function

  def self.setup_haptic_symbols(output_error = false)
    symbols = [
      :SDL_GetHaptics,
      :SDL_GetHapticNameForID,
      :SDL_OpenHaptic,
      :SDL_GetHapticFromID,
      :SDL_GetHapticID,
      :SDL_GetHapticName,
      :SDL_IsMouseHaptic,
      :SDL_OpenHapticFromMouse,
      :SDL_IsJoystickHaptic,
      :SDL_OpenHapticFromJoystick,
      :SDL_CloseHaptic,
      :SDL_GetMaxHapticEffects,
      :SDL_GetMaxHapticEffectsPlaying,
      :SDL_GetHapticFeatures,
      :SDL_GetNumHapticAxes,
      :SDL_HapticEffectSupported,
      :SDL_CreateHapticEffect,
      :SDL_UpdateHapticEffect,
      :SDL_RunHapticEffect,
      :SDL_StopHapticEffect,
      :SDL_DestroyHapticEffect,
      :SDL_GetHapticEffectStatus,
      :SDL_SetHapticGain,
      :SDL_SetHapticAutocenter,
      :SDL_PauseHaptic,
      :SDL_ResumeHaptic,
      :SDL_StopHapticEffects,
      :SDL_HapticRumbleSupported,
      :SDL_InitHapticRumble,
      :SDL_PlayHapticRumble,
      :SDL_StopHapticRumble,
    ]
    apis = {
      :SDL_GetHaptics => :GetHaptics,
      :SDL_GetHapticNameForID => :GetHapticNameForID,
      :SDL_OpenHaptic => :OpenHaptic,
      :SDL_GetHapticFromID => :GetHapticFromID,
      :SDL_GetHapticID => :GetHapticID,
      :SDL_GetHapticName => :GetHapticName,
      :SDL_IsMouseHaptic => :IsMouseHaptic,
      :SDL_OpenHapticFromMouse => :OpenHapticFromMouse,
      :SDL_IsJoystickHaptic => :IsJoystickHaptic,
      :SDL_OpenHapticFromJoystick => :OpenHapticFromJoystick,
      :SDL_CloseHaptic => :CloseHaptic,
      :SDL_GetMaxHapticEffects => :GetMaxHapticEffects,
      :SDL_GetMaxHapticEffectsPlaying => :GetMaxHapticEffectsPlaying,
      :SDL_GetHapticFeatures => :GetHapticFeatures,
      :SDL_GetNumHapticAxes => :GetNumHapticAxes,
      :SDL_HapticEffectSupported => :HapticEffectSupported,
      :SDL_CreateHapticEffect => :CreateHapticEffect,
      :SDL_UpdateHapticEffect => :UpdateHapticEffect,
      :SDL_RunHapticEffect => :RunHapticEffect,
      :SDL_StopHapticEffect => :StopHapticEffect,
      :SDL_DestroyHapticEffect => :DestroyHapticEffect,
      :SDL_GetHapticEffectStatus => :GetHapticEffectStatus,
      :SDL_SetHapticGain => :SetHapticGain,
      :SDL_SetHapticAutocenter => :SetHapticAutocenter,
      :SDL_PauseHaptic => :PauseHaptic,
      :SDL_ResumeHaptic => :ResumeHaptic,
      :SDL_StopHapticEffects => :StopHapticEffects,
      :SDL_HapticRumbleSupported => :HapticRumbleSupported,
      :SDL_InitHapticRumble => :InitHapticRumble,
      :SDL_PlayHapticRumble => :PlayHapticRumble,
      :SDL_StopHapticRumble => :StopHapticRumble,
    }
    args = {
      :SDL_GetHaptics => [:pointer],
      :SDL_GetHapticNameForID => [:uint],
      :SDL_OpenHaptic => [:uint],
      :SDL_GetHapticFromID => [:uint],
      :SDL_GetHapticID => [:pointer],
      :SDL_GetHapticName => [:pointer],
      :SDL_IsMouseHaptic => [],
      :SDL_OpenHapticFromMouse => [],
      :SDL_IsJoystickHaptic => [:pointer],
      :SDL_OpenHapticFromJoystick => [:pointer],
      :SDL_CloseHaptic => [:pointer],
      :SDL_GetMaxHapticEffects => [:pointer],
      :SDL_GetMaxHapticEffectsPlaying => [:pointer],
      :SDL_GetHapticFeatures => [:pointer],
      :SDL_GetNumHapticAxes => [:pointer],
      :SDL_HapticEffectSupported => [:pointer, :pointer],
      :SDL_CreateHapticEffect => [:pointer, :pointer],
      :SDL_UpdateHapticEffect => [:pointer, :int, :pointer],
      :SDL_RunHapticEffect => [:pointer, :int, :uint],
      :SDL_StopHapticEffect => [:pointer, :int],
      :SDL_DestroyHapticEffect => [:pointer, :int],
      :SDL_GetHapticEffectStatus => [:pointer, :int],
      :SDL_SetHapticGain => [:pointer, :int],
      :SDL_SetHapticAutocenter => [:pointer, :int],
      :SDL_PauseHaptic => [:pointer],
      :SDL_ResumeHaptic => [:pointer],
      :SDL_StopHapticEffects => [:pointer],
      :SDL_HapticRumbleSupported => [:pointer],
      :SDL_InitHapticRumble => [:pointer],
      :SDL_PlayHapticRumble => [:pointer, :float, :uint],
      :SDL_StopHapticRumble => [:pointer],
    }
    retvals = {
      :SDL_GetHaptics => :pointer,
      :SDL_GetHapticNameForID => :pointer,
      :SDL_OpenHaptic => :pointer,
      :SDL_GetHapticFromID => :pointer,
      :SDL_GetHapticID => :uint,
      :SDL_GetHapticName => :pointer,
      :SDL_IsMouseHaptic => :bool,
      :SDL_OpenHapticFromMouse => :pointer,
      :SDL_IsJoystickHaptic => :bool,
      :SDL_OpenHapticFromJoystick => :pointer,
      :SDL_CloseHaptic => :void,
      :SDL_GetMaxHapticEffects => :int,
      :SDL_GetMaxHapticEffectsPlaying => :int,
      :SDL_GetHapticFeatures => :uint,
      :SDL_GetNumHapticAxes => :int,
      :SDL_HapticEffectSupported => :bool,
      :SDL_CreateHapticEffect => :int,
      :SDL_UpdateHapticEffect => :bool,
      :SDL_RunHapticEffect => :bool,
      :SDL_StopHapticEffect => :bool,
      :SDL_DestroyHapticEffect => :void,
      :SDL_GetHapticEffectStatus => :bool,
      :SDL_SetHapticGain => :bool,
      :SDL_SetHapticAutocenter => :bool,
      :SDL_PauseHaptic => :bool,
      :SDL_ResumeHaptic => :bool,
      :SDL_StopHapticEffects => :bool,
      :SDL_HapticRumbleSupported => :bool,
      :SDL_InitHapticRumble => :bool,
      :SDL_PlayHapticRumble => :bool,
      :SDL_StopHapticRumble => :bool,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

