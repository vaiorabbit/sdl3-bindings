# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module SDL
  extend FFI::Library
  # Define/Macro

  PROP_PROCESS_CREATE_ARGS_POINTER = "SDL.process.create.args"
  PROP_PROCESS_CREATE_ENVIRONMENT_POINTER = "SDL.process.create.environment"
  PROP_PROCESS_CREATE_STDIN_NUMBER = "SDL.process.create.stdin_option"
  PROP_PROCESS_CREATE_STDIN_POINTER = "SDL.process.create.stdin_source"
  PROP_PROCESS_CREATE_STDOUT_NUMBER = "SDL.process.create.stdout_option"
  PROP_PROCESS_CREATE_STDOUT_POINTER = "SDL.process.create.stdout_source"
  PROP_PROCESS_CREATE_STDERR_NUMBER = "SDL.process.create.stderr_option"
  PROP_PROCESS_CREATE_STDERR_POINTER = "SDL.process.create.stderr_source"
  PROP_PROCESS_CREATE_STDERR_TO_STDOUT_BOOLEAN = "SDL.process.create.stderr_to_stdout"
  PROP_PROCESS_CREATE_BACKGROUND_BOOLEAN = "SDL.process.create.background"
  PROP_PROCESS_PID_NUMBER = "SDL.process.pid"
  PROP_PROCESS_STDIN_POINTER = "SDL.process.stdin"
  PROP_PROCESS_STDOUT_POINTER = "SDL.process.stdout"
  PROP_PROCESS_STDERR_POINTER = "SDL.process.stderr"
  PROP_PROCESS_BACKGROUND_BOOLEAN = "SDL.process.background"

  # Enum

  PROCESS_STDIO_INHERITED = 0
  PROCESS_STDIO_NULL = 1
  PROCESS_STDIO_APP = 2
  PROCESS_STDIO_REDIRECT = 3

  # Typedef

  typedef :int, :SDL_ProcessIO

  # Struct


  # Function

  def self.setup_process_symbols(output_error = false)
    symbols = [
      :SDL_CreateProcess,
      :SDL_CreateProcessWithProperties,
      :SDL_GetProcessProperties,
      :SDL_ReadProcess,
      :SDL_GetProcessInput,
      :SDL_GetProcessOutput,
      :SDL_KillProcess,
      :SDL_WaitProcess,
      :SDL_DestroyProcess,
    ]
    apis = {
      :SDL_CreateProcess => :CreateProcess,
      :SDL_CreateProcessWithProperties => :CreateProcessWithProperties,
      :SDL_GetProcessProperties => :GetProcessProperties,
      :SDL_ReadProcess => :ReadProcess,
      :SDL_GetProcessInput => :GetProcessInput,
      :SDL_GetProcessOutput => :GetProcessOutput,
      :SDL_KillProcess => :KillProcess,
      :SDL_WaitProcess => :WaitProcess,
      :SDL_DestroyProcess => :DestroyProcess,
    }
    args = {
      :SDL_CreateProcess => [:pointer, :bool],
      :SDL_CreateProcessWithProperties => [:uint],
      :SDL_GetProcessProperties => [:pointer],
      :SDL_ReadProcess => [:pointer, :pointer, :pointer],
      :SDL_GetProcessInput => [:pointer],
      :SDL_GetProcessOutput => [:pointer],
      :SDL_KillProcess => [:pointer, :bool],
      :SDL_WaitProcess => [:pointer, :bool, :pointer],
      :SDL_DestroyProcess => [:pointer],
    }
    retvals = {
      :SDL_CreateProcess => :pointer,
      :SDL_CreateProcessWithProperties => :pointer,
      :SDL_GetProcessProperties => :uint,
      :SDL_ReadProcess => :pointer,
      :SDL_GetProcessInput => :pointer,
      :SDL_GetProcessOutput => :pointer,
      :SDL_KillProcess => :bool,
      :SDL_WaitProcess => :bool,
      :SDL_DestroyProcess => :void,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

