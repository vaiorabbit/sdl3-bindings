# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'sdl3_rect'

module SDL
  extend FFI::Library
  # Define/Macro

  SURFACE_PREALLOCATED = 0x00000001
  SURFACE_LOCK_NEEDED = 0x00000002
  SURFACE_LOCKED = 0x00000004
  SURFACE_SIMD_ALIGNED = 0x00000008
  PROP_SURFACE_SDR_WHITE_POINT_FLOAT = "SDL.surface.SDR_white_point"
  PROP_SURFACE_HDR_HEADROOM_FLOAT = "SDL.surface.HDR_headroom"
  PROP_SURFACE_TONEMAP_OPERATOR_STRING = "SDL.surface.tonemap"

  # Enum

  SCALEMODE_NEAREST = 0
  SCALEMODE_LINEAR = 1
  FLIP_NONE = 0
  FLIP_HORIZONTAL = 1
  FLIP_VERTICAL = 2

  # Typedef

  typedef :uint, :SDL_SurfaceFlags
  typedef :int, :SDL_ScaleMode
  typedef :int, :SDL_FlipMode

  # Struct

  class Surface < FFI::Struct
    layout(
      :flags, :uint,
      :format, :int,
      :w, :int,
      :h, :int,
      :pitch, :int,
      :pixels, :pointer,
      :refcount, :int,
      :reserved, :pointer,
    )
  end


  # Function

  def self.setup_surface_symbols(output_error = false)
    symbols = [
      :SDL_CreateSurface,
      :SDL_CreateSurfaceFrom,
      :SDL_DestroySurface,
      :SDL_GetSurfaceProperties,
      :SDL_SetSurfaceColorspace,
      :SDL_GetSurfaceColorspace,
      :SDL_CreateSurfacePalette,
      :SDL_SetSurfacePalette,
      :SDL_GetSurfacePalette,
      :SDL_AddSurfaceAlternateImage,
      :SDL_SurfaceHasAlternateImages,
      :SDL_GetSurfaceImages,
      :SDL_RemoveSurfaceAlternateImages,
      :SDL_LockSurface,
      :SDL_UnlockSurface,
      :SDL_LoadBMP_IO,
      :SDL_LoadBMP,
      :SDL_SaveBMP_IO,
      :SDL_SaveBMP,
      :SDL_SetSurfaceRLE,
      :SDL_SurfaceHasRLE,
      :SDL_SetSurfaceColorKey,
      :SDL_SurfaceHasColorKey,
      :SDL_GetSurfaceColorKey,
      :SDL_SetSurfaceColorMod,
      :SDL_GetSurfaceColorMod,
      :SDL_SetSurfaceAlphaMod,
      :SDL_GetSurfaceAlphaMod,
      :SDL_SetSurfaceBlendMode,
      :SDL_GetSurfaceBlendMode,
      :SDL_SetSurfaceClipRect,
      :SDL_GetSurfaceClipRect,
      :SDL_FlipSurface,
      :SDL_DuplicateSurface,
      :SDL_ScaleSurface,
      :SDL_ConvertSurface,
      :SDL_ConvertSurfaceAndColorspace,
      :SDL_ConvertPixels,
      :SDL_ConvertPixelsAndColorspace,
      :SDL_PremultiplyAlpha,
      :SDL_PremultiplySurfaceAlpha,
      :SDL_ClearSurface,
      :SDL_FillSurfaceRect,
      :SDL_FillSurfaceRects,
      :SDL_BlitSurface,
      :SDL_BlitSurfaceUnchecked,
      :SDL_BlitSurfaceScaled,
      :SDL_BlitSurfaceUncheckedScaled,
      :SDL_BlitSurfaceTiled,
      :SDL_BlitSurfaceTiledWithScale,
      :SDL_BlitSurface9Grid,
      :SDL_MapSurfaceRGB,
      :SDL_MapSurfaceRGBA,
      :SDL_ReadSurfacePixel,
      :SDL_ReadSurfacePixelFloat,
      :SDL_WriteSurfacePixel,
      :SDL_WriteSurfacePixelFloat,
    ]
    apis = {
      :SDL_CreateSurface => :CreateSurface,
      :SDL_CreateSurfaceFrom => :CreateSurfaceFrom,
      :SDL_DestroySurface => :DestroySurface,
      :SDL_GetSurfaceProperties => :GetSurfaceProperties,
      :SDL_SetSurfaceColorspace => :SetSurfaceColorspace,
      :SDL_GetSurfaceColorspace => :GetSurfaceColorspace,
      :SDL_CreateSurfacePalette => :CreateSurfacePalette,
      :SDL_SetSurfacePalette => :SetSurfacePalette,
      :SDL_GetSurfacePalette => :GetSurfacePalette,
      :SDL_AddSurfaceAlternateImage => :AddSurfaceAlternateImage,
      :SDL_SurfaceHasAlternateImages => :SurfaceHasAlternateImages,
      :SDL_GetSurfaceImages => :GetSurfaceImages,
      :SDL_RemoveSurfaceAlternateImages => :RemoveSurfaceAlternateImages,
      :SDL_LockSurface => :LockSurface,
      :SDL_UnlockSurface => :UnlockSurface,
      :SDL_LoadBMP_IO => :LoadBMP_IO,
      :SDL_LoadBMP => :LoadBMP,
      :SDL_SaveBMP_IO => :SaveBMP_IO,
      :SDL_SaveBMP => :SaveBMP,
      :SDL_SetSurfaceRLE => :SetSurfaceRLE,
      :SDL_SurfaceHasRLE => :SurfaceHasRLE,
      :SDL_SetSurfaceColorKey => :SetSurfaceColorKey,
      :SDL_SurfaceHasColorKey => :SurfaceHasColorKey,
      :SDL_GetSurfaceColorKey => :GetSurfaceColorKey,
      :SDL_SetSurfaceColorMod => :SetSurfaceColorMod,
      :SDL_GetSurfaceColorMod => :GetSurfaceColorMod,
      :SDL_SetSurfaceAlphaMod => :SetSurfaceAlphaMod,
      :SDL_GetSurfaceAlphaMod => :GetSurfaceAlphaMod,
      :SDL_SetSurfaceBlendMode => :SetSurfaceBlendMode,
      :SDL_GetSurfaceBlendMode => :GetSurfaceBlendMode,
      :SDL_SetSurfaceClipRect => :SetSurfaceClipRect,
      :SDL_GetSurfaceClipRect => :GetSurfaceClipRect,
      :SDL_FlipSurface => :FlipSurface,
      :SDL_DuplicateSurface => :DuplicateSurface,
      :SDL_ScaleSurface => :ScaleSurface,
      :SDL_ConvertSurface => :ConvertSurface,
      :SDL_ConvertSurfaceAndColorspace => :ConvertSurfaceAndColorspace,
      :SDL_ConvertPixels => :ConvertPixels,
      :SDL_ConvertPixelsAndColorspace => :ConvertPixelsAndColorspace,
      :SDL_PremultiplyAlpha => :PremultiplyAlpha,
      :SDL_PremultiplySurfaceAlpha => :PremultiplySurfaceAlpha,
      :SDL_ClearSurface => :ClearSurface,
      :SDL_FillSurfaceRect => :FillSurfaceRect,
      :SDL_FillSurfaceRects => :FillSurfaceRects,
      :SDL_BlitSurface => :BlitSurface,
      :SDL_BlitSurfaceUnchecked => :BlitSurfaceUnchecked,
      :SDL_BlitSurfaceScaled => :BlitSurfaceScaled,
      :SDL_BlitSurfaceUncheckedScaled => :BlitSurfaceUncheckedScaled,
      :SDL_BlitSurfaceTiled => :BlitSurfaceTiled,
      :SDL_BlitSurfaceTiledWithScale => :BlitSurfaceTiledWithScale,
      :SDL_BlitSurface9Grid => :BlitSurface9Grid,
      :SDL_MapSurfaceRGB => :MapSurfaceRGB,
      :SDL_MapSurfaceRGBA => :MapSurfaceRGBA,
      :SDL_ReadSurfacePixel => :ReadSurfacePixel,
      :SDL_ReadSurfacePixelFloat => :ReadSurfacePixelFloat,
      :SDL_WriteSurfacePixel => :WriteSurfacePixel,
      :SDL_WriteSurfacePixelFloat => :WriteSurfacePixelFloat,
    }
    args = {
      :SDL_CreateSurface => [:int, :int, :int],
      :SDL_CreateSurfaceFrom => [:int, :int, :int, :pointer, :int],
      :SDL_DestroySurface => [:pointer],
      :SDL_GetSurfaceProperties => [:pointer],
      :SDL_SetSurfaceColorspace => [:pointer, :int],
      :SDL_GetSurfaceColorspace => [:pointer],
      :SDL_CreateSurfacePalette => [:pointer],
      :SDL_SetSurfacePalette => [:pointer, :pointer],
      :SDL_GetSurfacePalette => [:pointer],
      :SDL_AddSurfaceAlternateImage => [:pointer, :pointer],
      :SDL_SurfaceHasAlternateImages => [:pointer],
      :SDL_GetSurfaceImages => [:pointer, :pointer],
      :SDL_RemoveSurfaceAlternateImages => [:pointer],
      :SDL_LockSurface => [:pointer],
      :SDL_UnlockSurface => [:pointer],
      :SDL_LoadBMP_IO => [:pointer, :bool],
      :SDL_LoadBMP => [:pointer],
      :SDL_SaveBMP_IO => [:pointer, :pointer, :bool],
      :SDL_SaveBMP => [:pointer, :pointer],
      :SDL_SetSurfaceRLE => [:pointer, :bool],
      :SDL_SurfaceHasRLE => [:pointer],
      :SDL_SetSurfaceColorKey => [:pointer, :bool, :uint],
      :SDL_SurfaceHasColorKey => [:pointer],
      :SDL_GetSurfaceColorKey => [:pointer, :pointer],
      :SDL_SetSurfaceColorMod => [:pointer, :uchar, :uchar, :uchar],
      :SDL_GetSurfaceColorMod => [:pointer, :pointer, :pointer, :pointer],
      :SDL_SetSurfaceAlphaMod => [:pointer, :uchar],
      :SDL_GetSurfaceAlphaMod => [:pointer, :pointer],
      :SDL_SetSurfaceBlendMode => [:pointer, :uint],
      :SDL_GetSurfaceBlendMode => [:pointer, :pointer],
      :SDL_SetSurfaceClipRect => [:pointer, :pointer],
      :SDL_GetSurfaceClipRect => [:pointer, :pointer],
      :SDL_FlipSurface => [:pointer, :int],
      :SDL_DuplicateSurface => [:pointer],
      :SDL_ScaleSurface => [:pointer, :int, :int, :int],
      :SDL_ConvertSurface => [:pointer, :int],
      :SDL_ConvertSurfaceAndColorspace => [:pointer, :int, :pointer, :int, :uint],
      :SDL_ConvertPixels => [:int, :int, :int, :pointer, :int, :int, :pointer, :int],
      :SDL_ConvertPixelsAndColorspace => [:int, :int, :int, :int, :uint, :pointer, :int, :int, :int, :uint, :pointer, :int],
      :SDL_PremultiplyAlpha => [:int, :int, :int, :pointer, :int, :int, :pointer, :int, :bool],
      :SDL_PremultiplySurfaceAlpha => [:pointer, :bool],
      :SDL_ClearSurface => [:pointer, :float, :float, :float, :float],
      :SDL_FillSurfaceRect => [:pointer, :pointer, :uint],
      :SDL_FillSurfaceRects => [:pointer, :pointer, :int, :uint],
      :SDL_BlitSurface => [:pointer, :pointer, :pointer, :pointer],
      :SDL_BlitSurfaceUnchecked => [:pointer, :pointer, :pointer, :pointer],
      :SDL_BlitSurfaceScaled => [:pointer, :pointer, :pointer, :pointer, :int],
      :SDL_BlitSurfaceUncheckedScaled => [:pointer, :pointer, :pointer, :pointer, :int],
      :SDL_BlitSurfaceTiled => [:pointer, :pointer, :pointer, :pointer],
      :SDL_BlitSurfaceTiledWithScale => [:pointer, :pointer, :float, :int, :pointer, :pointer],
      :SDL_BlitSurface9Grid => [:pointer, :pointer, :int, :int, :int, :int, :float, :int, :pointer, :pointer],
      :SDL_MapSurfaceRGB => [:pointer, :uchar, :uchar, :uchar],
      :SDL_MapSurfaceRGBA => [:pointer, :uchar, :uchar, :uchar, :uchar],
      :SDL_ReadSurfacePixel => [:pointer, :int, :int, :pointer, :pointer, :pointer, :pointer],
      :SDL_ReadSurfacePixelFloat => [:pointer, :int, :int, :pointer, :pointer, :pointer, :pointer],
      :SDL_WriteSurfacePixel => [:pointer, :int, :int, :uchar, :uchar, :uchar, :uchar],
      :SDL_WriteSurfacePixelFloat => [:pointer, :int, :int, :float, :float, :float, :float],
    }
    retvals = {
      :SDL_CreateSurface => :pointer,
      :SDL_CreateSurfaceFrom => :pointer,
      :SDL_DestroySurface => :void,
      :SDL_GetSurfaceProperties => :uint,
      :SDL_SetSurfaceColorspace => :bool,
      :SDL_GetSurfaceColorspace => :int,
      :SDL_CreateSurfacePalette => :pointer,
      :SDL_SetSurfacePalette => :bool,
      :SDL_GetSurfacePalette => :pointer,
      :SDL_AddSurfaceAlternateImage => :bool,
      :SDL_SurfaceHasAlternateImages => :bool,
      :SDL_GetSurfaceImages => :pointer,
      :SDL_RemoveSurfaceAlternateImages => :void,
      :SDL_LockSurface => :bool,
      :SDL_UnlockSurface => :void,
      :SDL_LoadBMP_IO => :pointer,
      :SDL_LoadBMP => :pointer,
      :SDL_SaveBMP_IO => :bool,
      :SDL_SaveBMP => :bool,
      :SDL_SetSurfaceRLE => :bool,
      :SDL_SurfaceHasRLE => :bool,
      :SDL_SetSurfaceColorKey => :bool,
      :SDL_SurfaceHasColorKey => :bool,
      :SDL_GetSurfaceColorKey => :bool,
      :SDL_SetSurfaceColorMod => :bool,
      :SDL_GetSurfaceColorMod => :bool,
      :SDL_SetSurfaceAlphaMod => :bool,
      :SDL_GetSurfaceAlphaMod => :bool,
      :SDL_SetSurfaceBlendMode => :bool,
      :SDL_GetSurfaceBlendMode => :bool,
      :SDL_SetSurfaceClipRect => :bool,
      :SDL_GetSurfaceClipRect => :bool,
      :SDL_FlipSurface => :bool,
      :SDL_DuplicateSurface => :pointer,
      :SDL_ScaleSurface => :pointer,
      :SDL_ConvertSurface => :pointer,
      :SDL_ConvertSurfaceAndColorspace => :pointer,
      :SDL_ConvertPixels => :bool,
      :SDL_ConvertPixelsAndColorspace => :bool,
      :SDL_PremultiplyAlpha => :bool,
      :SDL_PremultiplySurfaceAlpha => :bool,
      :SDL_ClearSurface => :bool,
      :SDL_FillSurfaceRect => :bool,
      :SDL_FillSurfaceRects => :bool,
      :SDL_BlitSurface => :bool,
      :SDL_BlitSurfaceUnchecked => :bool,
      :SDL_BlitSurfaceScaled => :bool,
      :SDL_BlitSurfaceUncheckedScaled => :bool,
      :SDL_BlitSurfaceTiled => :bool,
      :SDL_BlitSurfaceTiledWithScale => :bool,
      :SDL_BlitSurface9Grid => :bool,
      :SDL_MapSurfaceRGB => :uint,
      :SDL_MapSurfaceRGBA => :uint,
      :SDL_ReadSurfacePixel => :bool,
      :SDL_ReadSurfacePixelFloat => :bool,
      :SDL_WriteSurfacePixel => :bool,
      :SDL_WriteSurfacePixelFloat => :bool,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

