# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module SDL
  extend FFI::Library
  # Define/Macro

  PROP_THREAD_CREATE_ENTRY_FUNCTION_POINTER = "SDL.thread.create.entry_function"
  PROP_THREAD_CREATE_NAME_STRING = "SDL.thread.create.name"
  PROP_THREAD_CREATE_USERDATA_POINTER = "SDL.thread.create.userdata"
  PROP_THREAD_CREATE_STACKSIZE_NUMBER = "SDL.thread.create.stacksize"

  # Enum

  THREAD_PRIORITY_LOW = 0
  THREAD_PRIORITY_NORMAL = 1
  THREAD_PRIORITY_HIGH = 2
  THREAD_PRIORITY_TIME_CRITICAL = 3
  THREAD_UNKNOWN = 0
  THREAD_ALIVE = 1
  THREAD_DETACHED = 2
  THREAD_COMPLETE = 3

  # Typedef

  typedef :ulong_long, :SDL_ThreadID
  typedef :int, :SDL_ThreadPriority
  typedef :int, :SDL_ThreadState
  callback :SDL_ThreadFunction, [:pointer], :int
  callback :SDL_TLSDestructorCallback, [:pointer], :void

  # Struct


  # Function

  def self.setup_thread_symbols(output_error = false)
    symbols = [
      :SDL_CreateThreadRuntime,
      :SDL_CreateThreadWithPropertiesRuntime,
      :SDL_GetThreadName,
      :SDL_GetCurrentThreadID,
      :SDL_GetThreadID,
      :SDL_SetCurrentThreadPriority,
      :SDL_WaitThread,
      :SDL_GetThreadState,
      :SDL_DetachThread,
      :SDL_GetTLS,
      :SDL_SetTLS,
      :SDL_CleanupTLS,
    ]
    apis = {
      :SDL_CreateThreadRuntime => :CreateThreadRuntime,
      :SDL_CreateThreadWithPropertiesRuntime => :CreateThreadWithPropertiesRuntime,
      :SDL_GetThreadName => :GetThreadName,
      :SDL_GetCurrentThreadID => :GetCurrentThreadID,
      :SDL_GetThreadID => :GetThreadID,
      :SDL_SetCurrentThreadPriority => :SetCurrentThreadPriority,
      :SDL_WaitThread => :WaitThread,
      :SDL_GetThreadState => :GetThreadState,
      :SDL_DetachThread => :DetachThread,
      :SDL_GetTLS => :GetTLS,
      :SDL_SetTLS => :SetTLS,
      :SDL_CleanupTLS => :CleanupTLS,
    }
    args = {
      :SDL_CreateThreadRuntime => [:SDL_ThreadFunction, :pointer, :pointer, :SDL_FunctionPointer, :SDL_FunctionPointer],
      :SDL_CreateThreadWithPropertiesRuntime => [:uint, :SDL_FunctionPointer, :SDL_FunctionPointer],
      :SDL_GetThreadName => [:pointer],
      :SDL_GetCurrentThreadID => [],
      :SDL_GetThreadID => [:pointer],
      :SDL_SetCurrentThreadPriority => [:int],
      :SDL_WaitThread => [:pointer, :pointer],
      :SDL_GetThreadState => [:pointer],
      :SDL_DetachThread => [:pointer],
      :SDL_GetTLS => [:pointer],
      :SDL_SetTLS => [:pointer, :pointer, :SDL_TLSDestructorCallback],
      :SDL_CleanupTLS => [],
    }
    retvals = {
      :SDL_CreateThreadRuntime => :pointer,
      :SDL_CreateThreadWithPropertiesRuntime => :pointer,
      :SDL_GetThreadName => :pointer,
      :SDL_GetCurrentThreadID => :ulong_long,
      :SDL_GetThreadID => :ulong_long,
      :SDL_SetCurrentThreadPriority => :bool,
      :SDL_WaitThread => :void,
      :SDL_GetThreadState => :int,
      :SDL_DetachThread => :void,
      :SDL_GetTLS => :pointer,
      :SDL_SetTLS => :bool,
      :SDL_CleanupTLS => :void,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

