# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module SDL
  extend FFI::Library
  # Define/Macro


  # Enum

  ASYNCIO_TASK_READ = 0
  ASYNCIO_TASK_WRITE = 1
  ASYNCIO_TASK_CLOSE = 2
  ASYNCIO_COMPLETE = 0
  ASYNCIO_FAILURE = 1
  ASYNCIO_CANCELED = 2

  # Typedef

  typedef :int, :SDL_AsyncIOTaskType
  typedef :int, :SDL_AsyncIOResult

  # Struct

  class AsyncIOOutcome < FFI::Struct
    layout(
      :asyncio, :pointer,
      :type, :int,
      :result, :int,
      :buffer, :pointer,
      :offset, :ulong_long,
      :bytes_requested, :ulong_long,
      :bytes_transferred, :ulong_long,
      :userdata, :pointer,
    )
  end


  # Function

  def self.setup_asyncio_symbols(output_error = false)
    entries = [
      [:AsyncIOFromFile, :SDL_AsyncIOFromFile, [:pointer, :pointer], :pointer],
      [:GetAsyncIOSize, :SDL_GetAsyncIOSize, [:pointer], :long_long],
      [:ReadAsyncIO, :SDL_ReadAsyncIO, [:pointer, :pointer, :ulong_long, :ulong_long, :pointer, :pointer], :bool],
      [:WriteAsyncIO, :SDL_WriteAsyncIO, [:pointer, :pointer, :ulong_long, :ulong_long, :pointer, :pointer], :bool],
      [:CloseAsyncIO, :SDL_CloseAsyncIO, [:pointer, :bool, :pointer, :pointer], :bool],
      [:CreateAsyncIOQueue, :SDL_CreateAsyncIOQueue, [], :pointer],
      [:DestroyAsyncIOQueue, :SDL_DestroyAsyncIOQueue, [:pointer], :void],
      [:GetAsyncIOResult, :SDL_GetAsyncIOResult, [:pointer, :pointer], :bool],
      [:WaitAsyncIOResult, :SDL_WaitAsyncIOResult, [:pointer, :pointer, :int], :bool],
      [:SignalAsyncIOQueue, :SDL_SignalAsyncIOQueue, [:pointer], :void],
      [:LoadFileAsync, :SDL_LoadFileAsync, [:pointer, :pointer, :pointer], :bool],
    ]
    entries.each do |entry|
      attach_function entry[0], entry[1], entry[2], entry[3]
    rescue FFI::NotFoundError => e
      warn "[Warning] Failed to import #{entry[0]} (#{e})." if output_error
    end
  end

end

