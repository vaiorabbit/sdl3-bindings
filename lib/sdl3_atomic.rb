# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module SDL
  extend FFI::Library
  # Define/Macro


  # Enum


  # Typedef

  typedef :int, :SDL_SpinLock

  # Struct

  class AtomicInt < FFI::Struct
    layout(
      :value, :int,
    )
  end

  class AtomicU32 < FFI::Struct
    layout(
      :value, :uint,
    )
  end


  # Function

  def self.setup_atomic_symbols(output_error = false)
    entries = [
      [:TryLockSpinlock, :SDL_TryLockSpinlock, [:pointer], :bool],
      [:LockSpinlock, :SDL_LockSpinlock, [:pointer], :void],
      [:UnlockSpinlock, :SDL_UnlockSpinlock, [:pointer], :void],
      [:MemoryBarrierReleaseFunction, :SDL_MemoryBarrierReleaseFunction, [], :void],
      [:MemoryBarrierAcquireFunction, :SDL_MemoryBarrierAcquireFunction, [], :void],
      [:CompareAndSwapAtomicInt, :SDL_CompareAndSwapAtomicInt, [:pointer, :int, :int], :bool],
      [:SetAtomicInt, :SDL_SetAtomicInt, [:pointer, :int], :int],
      [:GetAtomicInt, :SDL_GetAtomicInt, [:pointer], :int],
      [:AddAtomicInt, :SDL_AddAtomicInt, [:pointer, :int], :int],
      [:CompareAndSwapAtomicU32, :SDL_CompareAndSwapAtomicU32, [:pointer, :uint, :uint], :bool],
      [:SetAtomicU32, :SDL_SetAtomicU32, [:pointer, :uint], :uint],
      [:GetAtomicU32, :SDL_GetAtomicU32, [:pointer], :uint],
      [:CompareAndSwapAtomicPointer, :SDL_CompareAndSwapAtomicPointer, [:pointer, :pointer, :pointer], :bool],
      [:SetAtomicPointer, :SDL_SetAtomicPointer, [:pointer, :pointer], :pointer],
      [:GetAtomicPointer, :SDL_GetAtomicPointer, [:pointer], :pointer],
    ]
    entries.each do |entry|
      attach_function entry[0], entry[1], entry[2], entry[3]
    rescue FFI::NotFoundError => e
      warn "[Warning] Failed to import #{entry[0]} (#{e})." if output_error
    end
  end

end

