# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module SDL
  extend FFI::Library
  # Define/Macro

  GLOB_CASEINSENSITIVE = 1 << 0

  # Enum

  FOLDER_HOME = 0
  FOLDER_DESKTOP = 1
  FOLDER_DOCUMENTS = 2
  FOLDER_DOWNLOADS = 3
  FOLDER_MUSIC = 4
  FOLDER_PICTURES = 5
  FOLDER_PUBLICSHARE = 6
  FOLDER_SAVEDGAMES = 7
  FOLDER_SCREENSHOTS = 8
  FOLDER_TEMPLATES = 9
  FOLDER_VIDEOS = 10
  FOLDER_COUNT = 11
  PATHTYPE_NONE = 0
  PATHTYPE_FILE = 1
  PATHTYPE_DIRECTORY = 2
  PATHTYPE_OTHER = 3
  ENUM_CONTINUE = 0
  ENUM_SUCCESS = 1
  ENUM_FAILURE = 2

  # Typedef

  typedef :int, :SDL_Folder
  typedef :int, :SDL_PathType
  typedef :uint, :SDL_GlobFlags
  typedef :int, :SDL_EnumerationResult
  callback :SDL_EnumerateDirectoryCallback, [:pointer, :pointer, :pointer], :int

  # Struct

  class PathInfo < FFI::Struct
    layout(
      :type, :int,
      :size, :ulong_long,
      :create_time, :long_long,
      :modify_time, :long_long,
      :access_time, :long_long,
    )
  end


  # Function

  def self.setup_filesystem_symbols(output_error = false)
    entries = [
      [:GetBasePath, :SDL_GetBasePath, [], :pointer],
      [:GetPrefPath, :SDL_GetPrefPath, [:pointer, :pointer], :pointer],
      [:GetUserFolder, :SDL_GetUserFolder, [:int], :pointer],
      [:CreateDirectory, :SDL_CreateDirectory, [:pointer], :bool],
      [:EnumerateDirectory, :SDL_EnumerateDirectory, [:pointer, :SDL_EnumerateDirectoryCallback, :pointer], :bool],
      [:RemovePath, :SDL_RemovePath, [:pointer], :bool],
      [:RenamePath, :SDL_RenamePath, [:pointer, :pointer], :bool],
      [:CopyFile, :SDL_CopyFile, [:pointer, :pointer], :bool],
      [:GetPathInfo, :SDL_GetPathInfo, [:pointer, :pointer], :bool],
      [:GlobDirectory, :SDL_GlobDirectory, [:pointer, :pointer, :uint, :pointer], :pointer],
      [:GetCurrentDirectory, :SDL_GetCurrentDirectory, [], :pointer],
    ]
    entries.each do |entry|
      attach_function entry[0], entry[1], entry[2], entry[3]
    rescue FFI::NotFoundError => e
      warn "[Warning] Failed to import #{entry[0]} (#{e})." if output_error
    end
  end

end

