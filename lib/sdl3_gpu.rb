# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'sdl3_pixels'

module SDL
  extend FFI::Library
  # Define/Macro

  GPU_TEXTUREUSAGE_SAMPLER = 1 << 0
  GPU_TEXTUREUSAGE_COLOR_TARGET = 1 << 1
  GPU_TEXTUREUSAGE_DEPTH_STENCIL_TARGET = 1 << 2
  GPU_TEXTUREUSAGE_GRAPHICS_STORAGE_READ = 1 << 3
  GPU_TEXTUREUSAGE_COMPUTE_STORAGE_READ = 1 << 4
  GPU_TEXTUREUSAGE_COMPUTE_STORAGE_WRITE = 1 << 5
  GPU_TEXTUREUSAGE_COMPUTE_STORAGE_SIMULTANEOUS_READ_WRITE = 1 << 6
  GPU_BUFFERUSAGE_VERTEX = 1 << 0
  GPU_BUFFERUSAGE_INDEX = 1 << 1
  GPU_BUFFERUSAGE_INDIRECT = 1 << 2
  GPU_BUFFERUSAGE_GRAPHICS_STORAGE_READ = 1 << 3
  GPU_BUFFERUSAGE_COMPUTE_STORAGE_READ = 1 << 4
  GPU_BUFFERUSAGE_COMPUTE_STORAGE_WRITE = 1 << 5
  GPU_SHADERFORMAT_INVALID = 0
  GPU_SHADERFORMAT_PRIVATE = 1 << 0
  GPU_SHADERFORMAT_SPIRV = 1 << 1
  GPU_SHADERFORMAT_DXBC = 1 << 2
  GPU_SHADERFORMAT_DXIL = 1 << 3
  GPU_SHADERFORMAT_MSL = 1 << 4
  GPU_SHADERFORMAT_METALLIB = 1 << 5
  GPU_COLORCOMPONENT_R = 1 << 0
  GPU_COLORCOMPONENT_G = 1 << 1
  GPU_COLORCOMPONENT_B = 1 << 2
  GPU_COLORCOMPONENT_A = 1 << 3
  PROP_GPU_DEVICE_CREATE_DEBUGMODE_BOOLEAN = "SDL.gpu.device.create.debugmode"
  PROP_GPU_DEVICE_CREATE_PREFERLOWPOWER_BOOLEAN = "SDL.gpu.device.create.preferlowpower"
  PROP_GPU_DEVICE_CREATE_NAME_STRING = "SDL.gpu.device.create.name"
  PROP_GPU_DEVICE_CREATE_SHADERS_PRIVATE_BOOLEAN = "SDL.gpu.device.create.shaders.private"
  PROP_GPU_DEVICE_CREATE_SHADERS_SPIRV_BOOLEAN = "SDL.gpu.device.create.shaders.spirv"
  PROP_GPU_DEVICE_CREATE_SHADERS_DXBC_BOOLEAN = "SDL.gpu.device.create.shaders.dxbc"
  PROP_GPU_DEVICE_CREATE_SHADERS_DXIL_BOOLEAN = "SDL.gpu.device.create.shaders.dxil"
  PROP_GPU_DEVICE_CREATE_SHADERS_MSL_BOOLEAN = "SDL.gpu.device.create.shaders.msl"
  PROP_GPU_DEVICE_CREATE_SHADERS_METALLIB_BOOLEAN = "SDL.gpu.device.create.shaders.metallib"
  PROP_GPU_DEVICE_CREATE_D3D12_SEMANTIC_NAME_STRING = "SDL.gpu.device.create.d3d12.semantic"
  PROP_GPU_COMPUTEPIPELINE_CREATE_NAME_STRING = "SDL.gpu.computepipeline.create.name"
  PROP_GPU_GRAPHICSPIPELINE_CREATE_NAME_STRING = "SDL.gpu.graphicspipeline.create.name"
  PROP_GPU_SAMPLER_CREATE_NAME_STRING = "SDL.gpu.sampler.create.name"
  PROP_GPU_SHADER_CREATE_NAME_STRING = "SDL.gpu.shader.create.name"
  PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_R_FLOAT = "SDL.gpu.texture.create.d3d12.clear.r"
  PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_G_FLOAT = "SDL.gpu.texture.create.d3d12.clear.g"
  PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_B_FLOAT = "SDL.gpu.texture.create.d3d12.clear.b"
  PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_A_FLOAT = "SDL.gpu.texture.create.d3d12.clear.a"
  PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_DEPTH_FLOAT = "SDL.gpu.texture.create.d3d12.clear.depth"
  PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_STENCIL_UINT8 = "SDL.gpu.texture.create.d3d12.clear.stencil"
  PROP_GPU_TEXTURE_CREATE_NAME_STRING = "SDL.gpu.texture.create.name"
  PROP_GPU_BUFFER_CREATE_NAME_STRING = "SDL.gpu.buffer.create.name"
  PROP_GPU_TRANSFERBUFFER_CREATE_NAME_STRING = "SDL.gpu.transferbuffer.create.name"

  # Enum

  GPU_PRIMITIVETYPE_TRIANGLELIST = 0
  GPU_PRIMITIVETYPE_TRIANGLESTRIP = 1
  GPU_PRIMITIVETYPE_LINELIST = 2
  GPU_PRIMITIVETYPE_LINESTRIP = 3
  GPU_PRIMITIVETYPE_POINTLIST = 4
  GPU_LOADOP_LOAD = 0
  GPU_LOADOP_CLEAR = 1
  GPU_LOADOP_DONT_CARE = 2
  GPU_STOREOP_STORE = 0
  GPU_STOREOP_DONT_CARE = 1
  GPU_STOREOP_RESOLVE = 2
  GPU_STOREOP_RESOLVE_AND_STORE = 3
  GPU_INDEXELEMENTSIZE_16BIT = 0
  GPU_INDEXELEMENTSIZE_32BIT = 1
  GPU_TEXTUREFORMAT_INVALID = 0
  GPU_TEXTUREFORMAT_A8_UNORM = 1
  GPU_TEXTUREFORMAT_R8_UNORM = 2
  GPU_TEXTUREFORMAT_R8G8_UNORM = 3
  GPU_TEXTUREFORMAT_R8G8B8A8_UNORM = 4
  GPU_TEXTUREFORMAT_R16_UNORM = 5
  GPU_TEXTUREFORMAT_R16G16_UNORM = 6
  GPU_TEXTUREFORMAT_R16G16B16A16_UNORM = 7
  GPU_TEXTUREFORMAT_R10G10B10A2_UNORM = 8
  GPU_TEXTUREFORMAT_B5G6R5_UNORM = 9
  GPU_TEXTUREFORMAT_B5G5R5A1_UNORM = 10
  GPU_TEXTUREFORMAT_B4G4R4A4_UNORM = 11
  GPU_TEXTUREFORMAT_B8G8R8A8_UNORM = 12
  GPU_TEXTUREFORMAT_BC1_RGBA_UNORM = 13
  GPU_TEXTUREFORMAT_BC2_RGBA_UNORM = 14
  GPU_TEXTUREFORMAT_BC3_RGBA_UNORM = 15
  GPU_TEXTUREFORMAT_BC4_R_UNORM = 16
  GPU_TEXTUREFORMAT_BC5_RG_UNORM = 17
  GPU_TEXTUREFORMAT_BC7_RGBA_UNORM = 18
  GPU_TEXTUREFORMAT_BC6H_RGB_FLOAT = 19
  GPU_TEXTUREFORMAT_BC6H_RGB_UFLOAT = 20
  GPU_TEXTUREFORMAT_R8_SNORM = 21
  GPU_TEXTUREFORMAT_R8G8_SNORM = 22
  GPU_TEXTUREFORMAT_R8G8B8A8_SNORM = 23
  GPU_TEXTUREFORMAT_R16_SNORM = 24
  GPU_TEXTUREFORMAT_R16G16_SNORM = 25
  GPU_TEXTUREFORMAT_R16G16B16A16_SNORM = 26
  GPU_TEXTUREFORMAT_R16_FLOAT = 27
  GPU_TEXTUREFORMAT_R16G16_FLOAT = 28
  GPU_TEXTUREFORMAT_R16G16B16A16_FLOAT = 29
  GPU_TEXTUREFORMAT_R32_FLOAT = 30
  GPU_TEXTUREFORMAT_R32G32_FLOAT = 31
  GPU_TEXTUREFORMAT_R32G32B32A32_FLOAT = 32
  GPU_TEXTUREFORMAT_R11G11B10_UFLOAT = 33
  GPU_TEXTUREFORMAT_R8_UINT = 34
  GPU_TEXTUREFORMAT_R8G8_UINT = 35
  GPU_TEXTUREFORMAT_R8G8B8A8_UINT = 36
  GPU_TEXTUREFORMAT_R16_UINT = 37
  GPU_TEXTUREFORMAT_R16G16_UINT = 38
  GPU_TEXTUREFORMAT_R16G16B16A16_UINT = 39
  GPU_TEXTUREFORMAT_R32_UINT = 40
  GPU_TEXTUREFORMAT_R32G32_UINT = 41
  GPU_TEXTUREFORMAT_R32G32B32A32_UINT = 42
  GPU_TEXTUREFORMAT_R8_INT = 43
  GPU_TEXTUREFORMAT_R8G8_INT = 44
  GPU_TEXTUREFORMAT_R8G8B8A8_INT = 45
  GPU_TEXTUREFORMAT_R16_INT = 46
  GPU_TEXTUREFORMAT_R16G16_INT = 47
  GPU_TEXTUREFORMAT_R16G16B16A16_INT = 48
  GPU_TEXTUREFORMAT_R32_INT = 49
  GPU_TEXTUREFORMAT_R32G32_INT = 50
  GPU_TEXTUREFORMAT_R32G32B32A32_INT = 51
  GPU_TEXTUREFORMAT_R8G8B8A8_UNORM_SRGB = 52
  GPU_TEXTUREFORMAT_B8G8R8A8_UNORM_SRGB = 53
  GPU_TEXTUREFORMAT_BC1_RGBA_UNORM_SRGB = 54
  GPU_TEXTUREFORMAT_BC2_RGBA_UNORM_SRGB = 55
  GPU_TEXTUREFORMAT_BC3_RGBA_UNORM_SRGB = 56
  GPU_TEXTUREFORMAT_BC7_RGBA_UNORM_SRGB = 57
  GPU_TEXTUREFORMAT_D16_UNORM = 58
  GPU_TEXTUREFORMAT_D24_UNORM = 59
  GPU_TEXTUREFORMAT_D32_FLOAT = 60
  GPU_TEXTUREFORMAT_D24_UNORM_S8_UINT = 61
  GPU_TEXTUREFORMAT_D32_FLOAT_S8_UINT = 62
  GPU_TEXTUREFORMAT_ASTC_4x4_UNORM = 63
  GPU_TEXTUREFORMAT_ASTC_5x4_UNORM = 64
  GPU_TEXTUREFORMAT_ASTC_5x5_UNORM = 65
  GPU_TEXTUREFORMAT_ASTC_6x5_UNORM = 66
  GPU_TEXTUREFORMAT_ASTC_6x6_UNORM = 67
  GPU_TEXTUREFORMAT_ASTC_8x5_UNORM = 68
  GPU_TEXTUREFORMAT_ASTC_8x6_UNORM = 69
  GPU_TEXTUREFORMAT_ASTC_8x8_UNORM = 70
  GPU_TEXTUREFORMAT_ASTC_10x5_UNORM = 71
  GPU_TEXTUREFORMAT_ASTC_10x6_UNORM = 72
  GPU_TEXTUREFORMAT_ASTC_10x8_UNORM = 73
  GPU_TEXTUREFORMAT_ASTC_10x10_UNORM = 74
  GPU_TEXTUREFORMAT_ASTC_12x10_UNORM = 75
  GPU_TEXTUREFORMAT_ASTC_12x12_UNORM = 76
  GPU_TEXTUREFORMAT_ASTC_4x4_UNORM_SRGB = 77
  GPU_TEXTUREFORMAT_ASTC_5x4_UNORM_SRGB = 78
  GPU_TEXTUREFORMAT_ASTC_5x5_UNORM_SRGB = 79
  GPU_TEXTUREFORMAT_ASTC_6x5_UNORM_SRGB = 80
  GPU_TEXTUREFORMAT_ASTC_6x6_UNORM_SRGB = 81
  GPU_TEXTUREFORMAT_ASTC_8x5_UNORM_SRGB = 82
  GPU_TEXTUREFORMAT_ASTC_8x6_UNORM_SRGB = 83
  GPU_TEXTUREFORMAT_ASTC_8x8_UNORM_SRGB = 84
  GPU_TEXTUREFORMAT_ASTC_10x5_UNORM_SRGB = 85
  GPU_TEXTUREFORMAT_ASTC_10x6_UNORM_SRGB = 86
  GPU_TEXTUREFORMAT_ASTC_10x8_UNORM_SRGB = 87
  GPU_TEXTUREFORMAT_ASTC_10x10_UNORM_SRGB = 88
  GPU_TEXTUREFORMAT_ASTC_12x10_UNORM_SRGB = 89
  GPU_TEXTUREFORMAT_ASTC_12x12_UNORM_SRGB = 90
  GPU_TEXTUREFORMAT_ASTC_4x4_FLOAT = 91
  GPU_TEXTUREFORMAT_ASTC_5x4_FLOAT = 92
  GPU_TEXTUREFORMAT_ASTC_5x5_FLOAT = 93
  GPU_TEXTUREFORMAT_ASTC_6x5_FLOAT = 94
  GPU_TEXTUREFORMAT_ASTC_6x6_FLOAT = 95
  GPU_TEXTUREFORMAT_ASTC_8x5_FLOAT = 96
  GPU_TEXTUREFORMAT_ASTC_8x6_FLOAT = 97
  GPU_TEXTUREFORMAT_ASTC_8x8_FLOAT = 98
  GPU_TEXTUREFORMAT_ASTC_10x5_FLOAT = 99
  GPU_TEXTUREFORMAT_ASTC_10x6_FLOAT = 100
  GPU_TEXTUREFORMAT_ASTC_10x8_FLOAT = 101
  GPU_TEXTUREFORMAT_ASTC_10x10_FLOAT = 102
  GPU_TEXTUREFORMAT_ASTC_12x10_FLOAT = 103
  GPU_TEXTUREFORMAT_ASTC_12x12_FLOAT = 104
  GPU_TEXTURETYPE_2D = 0
  GPU_TEXTURETYPE_2D_ARRAY = 1
  GPU_TEXTURETYPE_3D = 2
  GPU_TEXTURETYPE_CUBE = 3
  GPU_TEXTURETYPE_CUBE_ARRAY = 4
  GPU_SAMPLECOUNT_1 = 0
  GPU_SAMPLECOUNT_2 = 1
  GPU_SAMPLECOUNT_4 = 2
  GPU_SAMPLECOUNT_8 = 3
  GPU_CUBEMAPFACE_POSITIVEX = 0
  GPU_CUBEMAPFACE_NEGATIVEX = 1
  GPU_CUBEMAPFACE_POSITIVEY = 2
  GPU_CUBEMAPFACE_NEGATIVEY = 3
  GPU_CUBEMAPFACE_POSITIVEZ = 4
  GPU_CUBEMAPFACE_NEGATIVEZ = 5
  GPU_TRANSFERBUFFERUSAGE_UPLOAD = 0
  GPU_TRANSFERBUFFERUSAGE_DOWNLOAD = 1
  GPU_SHADERSTAGE_VERTEX = 0
  GPU_SHADERSTAGE_FRAGMENT = 1
  GPU_VERTEXELEMENTFORMAT_INVALID = 0
  GPU_VERTEXELEMENTFORMAT_INT = 1
  GPU_VERTEXELEMENTFORMAT_INT2 = 2
  GPU_VERTEXELEMENTFORMAT_INT3 = 3
  GPU_VERTEXELEMENTFORMAT_INT4 = 4
  GPU_VERTEXELEMENTFORMAT_UINT = 5
  GPU_VERTEXELEMENTFORMAT_UINT2 = 6
  GPU_VERTEXELEMENTFORMAT_UINT3 = 7
  GPU_VERTEXELEMENTFORMAT_UINT4 = 8
  GPU_VERTEXELEMENTFORMAT_FLOAT = 9
  GPU_VERTEXELEMENTFORMAT_FLOAT2 = 10
  GPU_VERTEXELEMENTFORMAT_FLOAT3 = 11
  GPU_VERTEXELEMENTFORMAT_FLOAT4 = 12
  GPU_VERTEXELEMENTFORMAT_BYTE2 = 13
  GPU_VERTEXELEMENTFORMAT_BYTE4 = 14
  GPU_VERTEXELEMENTFORMAT_UBYTE2 = 15
  GPU_VERTEXELEMENTFORMAT_UBYTE4 = 16
  GPU_VERTEXELEMENTFORMAT_BYTE2_NORM = 17
  GPU_VERTEXELEMENTFORMAT_BYTE4_NORM = 18
  GPU_VERTEXELEMENTFORMAT_UBYTE2_NORM = 19
  GPU_VERTEXELEMENTFORMAT_UBYTE4_NORM = 20
  GPU_VERTEXELEMENTFORMAT_SHORT2 = 21
  GPU_VERTEXELEMENTFORMAT_SHORT4 = 22
  GPU_VERTEXELEMENTFORMAT_USHORT2 = 23
  GPU_VERTEXELEMENTFORMAT_USHORT4 = 24
  GPU_VERTEXELEMENTFORMAT_SHORT2_NORM = 25
  GPU_VERTEXELEMENTFORMAT_SHORT4_NORM = 26
  GPU_VERTEXELEMENTFORMAT_USHORT2_NORM = 27
  GPU_VERTEXELEMENTFORMAT_USHORT4_NORM = 28
  GPU_VERTEXELEMENTFORMAT_HALF2 = 29
  GPU_VERTEXELEMENTFORMAT_HALF4 = 30
  GPU_VERTEXINPUTRATE_VERTEX = 0
  GPU_VERTEXINPUTRATE_INSTANCE = 1
  GPU_FILLMODE_FILL = 0
  GPU_FILLMODE_LINE = 1
  GPU_CULLMODE_NONE = 0
  GPU_CULLMODE_FRONT = 1
  GPU_CULLMODE_BACK = 2
  GPU_FRONTFACE_COUNTER_CLOCKWISE = 0
  GPU_FRONTFACE_CLOCKWISE = 1
  GPU_COMPAREOP_INVALID = 0
  GPU_COMPAREOP_NEVER = 1
  GPU_COMPAREOP_LESS = 2
  GPU_COMPAREOP_EQUAL = 3
  GPU_COMPAREOP_LESS_OR_EQUAL = 4
  GPU_COMPAREOP_GREATER = 5
  GPU_COMPAREOP_NOT_EQUAL = 6
  GPU_COMPAREOP_GREATER_OR_EQUAL = 7
  GPU_COMPAREOP_ALWAYS = 8
  GPU_STENCILOP_INVALID = 0
  GPU_STENCILOP_KEEP = 1
  GPU_STENCILOP_ZERO = 2
  GPU_STENCILOP_REPLACE = 3
  GPU_STENCILOP_INCREMENT_AND_CLAMP = 4
  GPU_STENCILOP_DECREMENT_AND_CLAMP = 5
  GPU_STENCILOP_INVERT = 6
  GPU_STENCILOP_INCREMENT_AND_WRAP = 7
  GPU_STENCILOP_DECREMENT_AND_WRAP = 8
  GPU_BLENDOP_INVALID = 0
  GPU_BLENDOP_ADD = 1
  GPU_BLENDOP_SUBTRACT = 2
  GPU_BLENDOP_REVERSE_SUBTRACT = 3
  GPU_BLENDOP_MIN = 4
  GPU_BLENDOP_MAX = 5
  GPU_BLENDFACTOR_INVALID = 0
  GPU_BLENDFACTOR_ZERO = 1
  GPU_BLENDFACTOR_ONE = 2
  GPU_BLENDFACTOR_SRC_COLOR = 3
  GPU_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4
  GPU_BLENDFACTOR_DST_COLOR = 5
  GPU_BLENDFACTOR_ONE_MINUS_DST_COLOR = 6
  GPU_BLENDFACTOR_SRC_ALPHA = 7
  GPU_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 8
  GPU_BLENDFACTOR_DST_ALPHA = 9
  GPU_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10
  GPU_BLENDFACTOR_CONSTANT_COLOR = 11
  GPU_BLENDFACTOR_ONE_MINUS_CONSTANT_COLOR = 12
  GPU_BLENDFACTOR_SRC_ALPHA_SATURATE = 13
  GPU_FILTER_NEAREST = 0
  GPU_FILTER_LINEAR = 1
  GPU_SAMPLERMIPMAPMODE_NEAREST = 0
  GPU_SAMPLERMIPMAPMODE_LINEAR = 1
  GPU_SAMPLERADDRESSMODE_REPEAT = 0
  GPU_SAMPLERADDRESSMODE_MIRRORED_REPEAT = 1
  GPU_SAMPLERADDRESSMODE_CLAMP_TO_EDGE = 2
  GPU_PRESENTMODE_VSYNC = 0
  GPU_PRESENTMODE_IMMEDIATE = 1
  GPU_PRESENTMODE_MAILBOX = 2
  GPU_SWAPCHAINCOMPOSITION_SDR = 0
  GPU_SWAPCHAINCOMPOSITION_SDR_LINEAR = 1
  GPU_SWAPCHAINCOMPOSITION_HDR_EXTENDED_LINEAR = 2
  GPU_SWAPCHAINCOMPOSITION_HDR10_ST2084 = 3

  # Typedef

  typedef :int, :SDL_GPUPrimitiveType
  typedef :int, :SDL_GPULoadOp
  typedef :int, :SDL_GPUStoreOp
  typedef :int, :SDL_GPUIndexElementSize
  typedef :int, :SDL_GPUTextureFormat
  typedef :uint, :SDL_GPUTextureUsageFlags
  typedef :int, :SDL_GPUTextureType
  typedef :int, :SDL_GPUSampleCount
  typedef :int, :SDL_GPUCubeMapFace
  typedef :uint, :SDL_GPUBufferUsageFlags
  typedef :int, :SDL_GPUTransferBufferUsage
  typedef :int, :SDL_GPUShaderStage
  typedef :uint, :SDL_GPUShaderFormat
  typedef :int, :SDL_GPUVertexElementFormat
  typedef :int, :SDL_GPUVertexInputRate
  typedef :int, :SDL_GPUFillMode
  typedef :int, :SDL_GPUCullMode
  typedef :int, :SDL_GPUFrontFace
  typedef :int, :SDL_GPUCompareOp
  typedef :int, :SDL_GPUStencilOp
  typedef :int, :SDL_GPUBlendOp
  typedef :int, :SDL_GPUBlendFactor
  typedef :uchar, :SDL_GPUColorComponentFlags
  typedef :int, :SDL_GPUFilter
  typedef :int, :SDL_GPUSamplerMipmapMode
  typedef :int, :SDL_GPUSamplerAddressMode
  typedef :int, :SDL_GPUPresentMode
  typedef :int, :SDL_GPUSwapchainComposition

  # Struct

  class GPUViewport < FFI::Struct
    layout(
      :x, :float,
      :y, :float,
      :w, :float,
      :h, :float,
      :min_depth, :float,
      :max_depth, :float,
    )
  end

  class GPUTextureTransferInfo < FFI::Struct
    layout(
      :transfer_buffer, :pointer,
      :offset, :uint,
      :pixels_per_row, :uint,
      :rows_per_layer, :uint,
    )
  end

  class GPUTransferBufferLocation < FFI::Struct
    layout(
      :transfer_buffer, :pointer,
      :offset, :uint,
    )
  end

  class GPUTextureLocation < FFI::Struct
    layout(
      :texture, :pointer,
      :mip_level, :uint,
      :layer, :uint,
      :x, :uint,
      :y, :uint,
      :z, :uint,
    )
  end

  class GPUTextureRegion < FFI::Struct
    layout(
      :texture, :pointer,
      :mip_level, :uint,
      :layer, :uint,
      :x, :uint,
      :y, :uint,
      :z, :uint,
      :w, :uint,
      :h, :uint,
      :d, :uint,
    )
  end

  class GPUBlitRegion < FFI::Struct
    layout(
      :texture, :pointer,
      :mip_level, :uint,
      :layer_or_depth_plane, :uint,
      :x, :uint,
      :y, :uint,
      :w, :uint,
      :h, :uint,
    )
  end

  class GPUBufferLocation < FFI::Struct
    layout(
      :buffer, :pointer,
      :offset, :uint,
    )
  end

  class GPUBufferRegion < FFI::Struct
    layout(
      :buffer, :pointer,
      :offset, :uint,
      :size, :uint,
    )
  end

  class GPUIndirectDrawCommand < FFI::Struct
    layout(
      :num_vertices, :uint,
      :num_instances, :uint,
      :first_vertex, :uint,
      :first_instance, :uint,
    )
  end

  class GPUIndexedIndirectDrawCommand < FFI::Struct
    layout(
      :num_indices, :uint,
      :num_instances, :uint,
      :first_index, :uint,
      :vertex_offset, :int,
      :first_instance, :uint,
    )
  end

  class GPUIndirectDispatchCommand < FFI::Struct
    layout(
      :groupcount_x, :uint,
      :groupcount_y, :uint,
      :groupcount_z, :uint,
    )
  end

  class GPUSamplerCreateInfo < FFI::Struct
    layout(
      :min_filter, :int,
      :mag_filter, :int,
      :mipmap_mode, :int,
      :address_mode_u, :int,
      :address_mode_v, :int,
      :address_mode_w, :int,
      :mip_lod_bias, :float,
      :max_anisotropy, :float,
      :compare_op, :int,
      :min_lod, :float,
      :max_lod, :float,
      :enable_anisotropy, :bool,
      :enable_compare, :bool,
      :padding1, :uchar,
      :padding2, :uchar,
      :props, :uint,
    )
  end

  class GPUVertexBufferDescription < FFI::Struct
    layout(
      :slot, :uint,
      :pitch, :uint,
      :input_rate, :int,
      :instance_step_rate, :uint,
    )
  end

  class GPUVertexAttribute < FFI::Struct
    layout(
      :location, :uint,
      :buffer_slot, :uint,
      :format, :int,
      :offset, :uint,
    )
  end

  class GPUVertexInputState < FFI::Struct
    layout(
      :vertex_buffer_descriptions, :pointer,
      :num_vertex_buffers, :uint,
      :vertex_attributes, :pointer,
      :num_vertex_attributes, :uint,
    )
  end

  class GPUStencilOpState < FFI::Struct
    layout(
      :fail_op, :int,
      :pass_op, :int,
      :depth_fail_op, :int,
      :compare_op, :int,
    )
  end

  class GPUColorTargetBlendState < FFI::Struct
    layout(
      :src_color_blendfactor, :int,
      :dst_color_blendfactor, :int,
      :color_blend_op, :int,
      :src_alpha_blendfactor, :int,
      :dst_alpha_blendfactor, :int,
      :alpha_blend_op, :int,
      :color_write_mask, :uchar,
      :enable_blend, :bool,
      :enable_color_write_mask, :bool,
      :padding1, :uchar,
      :padding2, :uchar,
    )
  end

  class GPUShaderCreateInfo < FFI::Struct
    layout(
      :code_size, :ulong_long,
      :code, :pointer,
      :entrypoint, :pointer,
      :format, :uint,
      :stage, :int,
      :num_samplers, :uint,
      :num_storage_textures, :uint,
      :num_storage_buffers, :uint,
      :num_uniform_buffers, :uint,
      :props, :uint,
    )
  end

  class GPUTextureCreateInfo < FFI::Struct
    layout(
      :type, :int,
      :format, :int,
      :usage, :uint,
      :width, :uint,
      :height, :uint,
      :layer_count_or_depth, :uint,
      :num_levels, :uint,
      :sample_count, :int,
      :props, :uint,
    )
  end

  class GPUBufferCreateInfo < FFI::Struct
    layout(
      :usage, :uint,
      :size, :uint,
      :props, :uint,
    )
  end

  class GPUTransferBufferCreateInfo < FFI::Struct
    layout(
      :usage, :int,
      :size, :uint,
      :props, :uint,
    )
  end

  class GPURasterizerState < FFI::Struct
    layout(
      :fill_mode, :int,
      :cull_mode, :int,
      :front_face, :int,
      :depth_bias_constant_factor, :float,
      :depth_bias_clamp, :float,
      :depth_bias_slope_factor, :float,
      :enable_depth_bias, :bool,
      :enable_depth_clip, :bool,
      :padding1, :uchar,
      :padding2, :uchar,
    )
  end

  class GPUMultisampleState < FFI::Struct
    layout(
      :sample_count, :int,
      :sample_mask, :uint,
      :enable_mask, :bool,
      :padding1, :uchar,
      :padding2, :uchar,
      :padding3, :uchar,
    )
  end

  class GPUDepthStencilState < FFI::Struct
    layout(
      :compare_op, :int,
      :back_stencil_state, GPUStencilOpState,
      :front_stencil_state, GPUStencilOpState,
      :compare_mask, :uchar,
      :write_mask, :uchar,
      :enable_depth_test, :bool,
      :enable_depth_write, :bool,
      :enable_stencil_test, :bool,
      :padding1, :uchar,
      :padding2, :uchar,
      :padding3, :uchar,
    )
  end

  class GPUColorTargetDescription < FFI::Struct
    layout(
      :format, :int,
      :blend_state, GPUColorTargetBlendState,
    )
  end

  class GPUGraphicsPipelineTargetInfo < FFI::Struct
    layout(
      :color_target_descriptions, :pointer,
      :num_color_targets, :uint,
      :depth_stencil_format, :int,
      :has_depth_stencil_target, :bool,
      :padding1, :uchar,
      :padding2, :uchar,
      :padding3, :uchar,
    )
  end

  class GPUGraphicsPipelineCreateInfo < FFI::Struct
    layout(
      :vertex_shader, :pointer,
      :fragment_shader, :pointer,
      :vertex_input_state, GPUVertexInputState,
      :primitive_type, :int,
      :rasterizer_state, GPURasterizerState,
      :multisample_state, GPUMultisampleState,
      :depth_stencil_state, GPUDepthStencilState,
      :target_info, GPUGraphicsPipelineTargetInfo,
      :props, :uint,
    )
  end

  class GPUComputePipelineCreateInfo < FFI::Struct
    layout(
      :code_size, :ulong_long,
      :code, :pointer,
      :entrypoint, :pointer,
      :format, :uint,
      :num_samplers, :uint,
      :num_readonly_storage_textures, :uint,
      :num_readonly_storage_buffers, :uint,
      :num_readwrite_storage_textures, :uint,
      :num_readwrite_storage_buffers, :uint,
      :num_uniform_buffers, :uint,
      :threadcount_x, :uint,
      :threadcount_y, :uint,
      :threadcount_z, :uint,
      :props, :uint,
    )
  end

  class GPUColorTargetInfo < FFI::Struct
    layout(
      :texture, :pointer,
      :mip_level, :uint,
      :layer_or_depth_plane, :uint,
      :clear_color, FColor,
      :load_op, :int,
      :store_op, :int,
      :resolve_texture, :pointer,
      :resolve_mip_level, :uint,
      :resolve_layer, :uint,
      :cycle, :bool,
      :cycle_resolve_texture, :bool,
      :padding1, :uchar,
      :padding2, :uchar,
    )
  end

  class GPUDepthStencilTargetInfo < FFI::Struct
    layout(
      :texture, :pointer,
      :clear_depth, :float,
      :load_op, :int,
      :store_op, :int,
      :stencil_load_op, :int,
      :stencil_store_op, :int,
      :cycle, :bool,
      :clear_stencil, :uchar,
      :padding1, :uchar,
      :padding2, :uchar,
    )
  end

  class GPUBlitInfo < FFI::Struct
    layout(
      :source, GPUBlitRegion,
      :destination, GPUBlitRegion,
      :load_op, :int,
      :clear_color, FColor,
      :flip_mode, :int,
      :filter, :int,
      :cycle, :bool,
      :padding1, :uchar,
      :padding2, :uchar,
      :padding3, :uchar,
    )
  end

  class GPUBufferBinding < FFI::Struct
    layout(
      :buffer, :pointer,
      :offset, :uint,
    )
  end

  class GPUTextureSamplerBinding < FFI::Struct
    layout(
      :texture, :pointer,
      :sampler, :pointer,
    )
  end

  class GPUStorageBufferReadWriteBinding < FFI::Struct
    layout(
      :buffer, :pointer,
      :cycle, :bool,
      :padding1, :uchar,
      :padding2, :uchar,
      :padding3, :uchar,
    )
  end

  class GPUStorageTextureReadWriteBinding < FFI::Struct
    layout(
      :texture, :pointer,
      :mip_level, :uint,
      :layer, :uint,
      :cycle, :bool,
      :padding1, :uchar,
      :padding2, :uchar,
      :padding3, :uchar,
    )
  end


  # Function

  def self.setup_gpu_symbols(output_error = false)
    symbols = [
      :SDL_GPUSupportsShaderFormats,
      :SDL_GPUSupportsProperties,
      :SDL_CreateGPUDevice,
      :SDL_CreateGPUDeviceWithProperties,
      :SDL_DestroyGPUDevice,
      :SDL_GetNumGPUDrivers,
      :SDL_GetGPUDriver,
      :SDL_GetGPUDeviceDriver,
      :SDL_GetGPUShaderFormats,
      :SDL_CreateGPUComputePipeline,
      :SDL_CreateGPUGraphicsPipeline,
      :SDL_CreateGPUSampler,
      :SDL_CreateGPUShader,
      :SDL_CreateGPUTexture,
      :SDL_CreateGPUBuffer,
      :SDL_CreateGPUTransferBuffer,
      :SDL_SetGPUBufferName,
      :SDL_SetGPUTextureName,
      :SDL_InsertGPUDebugLabel,
      :SDL_PushGPUDebugGroup,
      :SDL_PopGPUDebugGroup,
      :SDL_ReleaseGPUTexture,
      :SDL_ReleaseGPUSampler,
      :SDL_ReleaseGPUBuffer,
      :SDL_ReleaseGPUTransferBuffer,
      :SDL_ReleaseGPUComputePipeline,
      :SDL_ReleaseGPUShader,
      :SDL_ReleaseGPUGraphicsPipeline,
      :SDL_AcquireGPUCommandBuffer,
      :SDL_PushGPUVertexUniformData,
      :SDL_PushGPUFragmentUniformData,
      :SDL_PushGPUComputeUniformData,
      :SDL_BeginGPURenderPass,
      :SDL_BindGPUGraphicsPipeline,
      :SDL_SetGPUViewport,
      :SDL_SetGPUScissor,
      :SDL_SetGPUBlendConstants,
      :SDL_SetGPUStencilReference,
      :SDL_BindGPUVertexBuffers,
      :SDL_BindGPUIndexBuffer,
      :SDL_BindGPUVertexSamplers,
      :SDL_BindGPUVertexStorageTextures,
      :SDL_BindGPUVertexStorageBuffers,
      :SDL_BindGPUFragmentSamplers,
      :SDL_BindGPUFragmentStorageTextures,
      :SDL_BindGPUFragmentStorageBuffers,
      :SDL_DrawGPUIndexedPrimitives,
      :SDL_DrawGPUPrimitives,
      :SDL_DrawGPUPrimitivesIndirect,
      :SDL_DrawGPUIndexedPrimitivesIndirect,
      :SDL_EndGPURenderPass,
      :SDL_BeginGPUComputePass,
      :SDL_BindGPUComputePipeline,
      :SDL_BindGPUComputeSamplers,
      :SDL_BindGPUComputeStorageTextures,
      :SDL_BindGPUComputeStorageBuffers,
      :SDL_DispatchGPUCompute,
      :SDL_DispatchGPUComputeIndirect,
      :SDL_EndGPUComputePass,
      :SDL_MapGPUTransferBuffer,
      :SDL_UnmapGPUTransferBuffer,
      :SDL_BeginGPUCopyPass,
      :SDL_UploadToGPUTexture,
      :SDL_UploadToGPUBuffer,
      :SDL_CopyGPUTextureToTexture,
      :SDL_CopyGPUBufferToBuffer,
      :SDL_DownloadFromGPUTexture,
      :SDL_DownloadFromGPUBuffer,
      :SDL_EndGPUCopyPass,
      :SDL_GenerateMipmapsForGPUTexture,
      :SDL_BlitGPUTexture,
      :SDL_WindowSupportsGPUSwapchainComposition,
      :SDL_WindowSupportsGPUPresentMode,
      :SDL_ClaimWindowForGPUDevice,
      :SDL_ReleaseWindowFromGPUDevice,
      :SDL_SetGPUSwapchainParameters,
      :SDL_SetGPUAllowedFramesInFlight,
      :SDL_GetGPUSwapchainTextureFormat,
      :SDL_AcquireGPUSwapchainTexture,
      :SDL_WaitForGPUSwapchain,
      :SDL_WaitAndAcquireGPUSwapchainTexture,
      :SDL_SubmitGPUCommandBuffer,
      :SDL_SubmitGPUCommandBufferAndAcquireFence,
      :SDL_CancelGPUCommandBuffer,
      :SDL_WaitForGPUIdle,
      :SDL_WaitForGPUFences,
      :SDL_QueryGPUFence,
      :SDL_ReleaseGPUFence,
      :SDL_GPUTextureFormatTexelBlockSize,
      :SDL_GPUTextureSupportsFormat,
      :SDL_GPUTextureSupportsSampleCount,
      :SDL_CalculateGPUTextureFormatSize,
    ]
    apis = {
      :SDL_GPUSupportsShaderFormats => :GPUSupportsShaderFormats,
      :SDL_GPUSupportsProperties => :GPUSupportsProperties,
      :SDL_CreateGPUDevice => :CreateGPUDevice,
      :SDL_CreateGPUDeviceWithProperties => :CreateGPUDeviceWithProperties,
      :SDL_DestroyGPUDevice => :DestroyGPUDevice,
      :SDL_GetNumGPUDrivers => :GetNumGPUDrivers,
      :SDL_GetGPUDriver => :GetGPUDriver,
      :SDL_GetGPUDeviceDriver => :GetGPUDeviceDriver,
      :SDL_GetGPUShaderFormats => :GetGPUShaderFormats,
      :SDL_CreateGPUComputePipeline => :CreateGPUComputePipeline,
      :SDL_CreateGPUGraphicsPipeline => :CreateGPUGraphicsPipeline,
      :SDL_CreateGPUSampler => :CreateGPUSampler,
      :SDL_CreateGPUShader => :CreateGPUShader,
      :SDL_CreateGPUTexture => :CreateGPUTexture,
      :SDL_CreateGPUBuffer => :CreateGPUBuffer,
      :SDL_CreateGPUTransferBuffer => :CreateGPUTransferBuffer,
      :SDL_SetGPUBufferName => :SetGPUBufferName,
      :SDL_SetGPUTextureName => :SetGPUTextureName,
      :SDL_InsertGPUDebugLabel => :InsertGPUDebugLabel,
      :SDL_PushGPUDebugGroup => :PushGPUDebugGroup,
      :SDL_PopGPUDebugGroup => :PopGPUDebugGroup,
      :SDL_ReleaseGPUTexture => :ReleaseGPUTexture,
      :SDL_ReleaseGPUSampler => :ReleaseGPUSampler,
      :SDL_ReleaseGPUBuffer => :ReleaseGPUBuffer,
      :SDL_ReleaseGPUTransferBuffer => :ReleaseGPUTransferBuffer,
      :SDL_ReleaseGPUComputePipeline => :ReleaseGPUComputePipeline,
      :SDL_ReleaseGPUShader => :ReleaseGPUShader,
      :SDL_ReleaseGPUGraphicsPipeline => :ReleaseGPUGraphicsPipeline,
      :SDL_AcquireGPUCommandBuffer => :AcquireGPUCommandBuffer,
      :SDL_PushGPUVertexUniformData => :PushGPUVertexUniformData,
      :SDL_PushGPUFragmentUniformData => :PushGPUFragmentUniformData,
      :SDL_PushGPUComputeUniformData => :PushGPUComputeUniformData,
      :SDL_BeginGPURenderPass => :BeginGPURenderPass,
      :SDL_BindGPUGraphicsPipeline => :BindGPUGraphicsPipeline,
      :SDL_SetGPUViewport => :SetGPUViewport,
      :SDL_SetGPUScissor => :SetGPUScissor,
      :SDL_SetGPUBlendConstants => :SetGPUBlendConstants,
      :SDL_SetGPUStencilReference => :SetGPUStencilReference,
      :SDL_BindGPUVertexBuffers => :BindGPUVertexBuffers,
      :SDL_BindGPUIndexBuffer => :BindGPUIndexBuffer,
      :SDL_BindGPUVertexSamplers => :BindGPUVertexSamplers,
      :SDL_BindGPUVertexStorageTextures => :BindGPUVertexStorageTextures,
      :SDL_BindGPUVertexStorageBuffers => :BindGPUVertexStorageBuffers,
      :SDL_BindGPUFragmentSamplers => :BindGPUFragmentSamplers,
      :SDL_BindGPUFragmentStorageTextures => :BindGPUFragmentStorageTextures,
      :SDL_BindGPUFragmentStorageBuffers => :BindGPUFragmentStorageBuffers,
      :SDL_DrawGPUIndexedPrimitives => :DrawGPUIndexedPrimitives,
      :SDL_DrawGPUPrimitives => :DrawGPUPrimitives,
      :SDL_DrawGPUPrimitivesIndirect => :DrawGPUPrimitivesIndirect,
      :SDL_DrawGPUIndexedPrimitivesIndirect => :DrawGPUIndexedPrimitivesIndirect,
      :SDL_EndGPURenderPass => :EndGPURenderPass,
      :SDL_BeginGPUComputePass => :BeginGPUComputePass,
      :SDL_BindGPUComputePipeline => :BindGPUComputePipeline,
      :SDL_BindGPUComputeSamplers => :BindGPUComputeSamplers,
      :SDL_BindGPUComputeStorageTextures => :BindGPUComputeStorageTextures,
      :SDL_BindGPUComputeStorageBuffers => :BindGPUComputeStorageBuffers,
      :SDL_DispatchGPUCompute => :DispatchGPUCompute,
      :SDL_DispatchGPUComputeIndirect => :DispatchGPUComputeIndirect,
      :SDL_EndGPUComputePass => :EndGPUComputePass,
      :SDL_MapGPUTransferBuffer => :MapGPUTransferBuffer,
      :SDL_UnmapGPUTransferBuffer => :UnmapGPUTransferBuffer,
      :SDL_BeginGPUCopyPass => :BeginGPUCopyPass,
      :SDL_UploadToGPUTexture => :UploadToGPUTexture,
      :SDL_UploadToGPUBuffer => :UploadToGPUBuffer,
      :SDL_CopyGPUTextureToTexture => :CopyGPUTextureToTexture,
      :SDL_CopyGPUBufferToBuffer => :CopyGPUBufferToBuffer,
      :SDL_DownloadFromGPUTexture => :DownloadFromGPUTexture,
      :SDL_DownloadFromGPUBuffer => :DownloadFromGPUBuffer,
      :SDL_EndGPUCopyPass => :EndGPUCopyPass,
      :SDL_GenerateMipmapsForGPUTexture => :GenerateMipmapsForGPUTexture,
      :SDL_BlitGPUTexture => :BlitGPUTexture,
      :SDL_WindowSupportsGPUSwapchainComposition => :WindowSupportsGPUSwapchainComposition,
      :SDL_WindowSupportsGPUPresentMode => :WindowSupportsGPUPresentMode,
      :SDL_ClaimWindowForGPUDevice => :ClaimWindowForGPUDevice,
      :SDL_ReleaseWindowFromGPUDevice => :ReleaseWindowFromGPUDevice,
      :SDL_SetGPUSwapchainParameters => :SetGPUSwapchainParameters,
      :SDL_SetGPUAllowedFramesInFlight => :SetGPUAllowedFramesInFlight,
      :SDL_GetGPUSwapchainTextureFormat => :GetGPUSwapchainTextureFormat,
      :SDL_AcquireGPUSwapchainTexture => :AcquireGPUSwapchainTexture,
      :SDL_WaitForGPUSwapchain => :WaitForGPUSwapchain,
      :SDL_WaitAndAcquireGPUSwapchainTexture => :WaitAndAcquireGPUSwapchainTexture,
      :SDL_SubmitGPUCommandBuffer => :SubmitGPUCommandBuffer,
      :SDL_SubmitGPUCommandBufferAndAcquireFence => :SubmitGPUCommandBufferAndAcquireFence,
      :SDL_CancelGPUCommandBuffer => :CancelGPUCommandBuffer,
      :SDL_WaitForGPUIdle => :WaitForGPUIdle,
      :SDL_WaitForGPUFences => :WaitForGPUFences,
      :SDL_QueryGPUFence => :QueryGPUFence,
      :SDL_ReleaseGPUFence => :ReleaseGPUFence,
      :SDL_GPUTextureFormatTexelBlockSize => :GPUTextureFormatTexelBlockSize,
      :SDL_GPUTextureSupportsFormat => :GPUTextureSupportsFormat,
      :SDL_GPUTextureSupportsSampleCount => :GPUTextureSupportsSampleCount,
      :SDL_CalculateGPUTextureFormatSize => :CalculateGPUTextureFormatSize,
    }
    args = {
      :SDL_GPUSupportsShaderFormats => [:uint, :pointer],
      :SDL_GPUSupportsProperties => [:uint],
      :SDL_CreateGPUDevice => [:uint, :bool, :pointer],
      :SDL_CreateGPUDeviceWithProperties => [:uint],
      :SDL_DestroyGPUDevice => [:pointer],
      :SDL_GetNumGPUDrivers => [],
      :SDL_GetGPUDriver => [:int],
      :SDL_GetGPUDeviceDriver => [:pointer],
      :SDL_GetGPUShaderFormats => [:pointer],
      :SDL_CreateGPUComputePipeline => [:pointer, :pointer],
      :SDL_CreateGPUGraphicsPipeline => [:pointer, :pointer],
      :SDL_CreateGPUSampler => [:pointer, :pointer],
      :SDL_CreateGPUShader => [:pointer, :pointer],
      :SDL_CreateGPUTexture => [:pointer, :pointer],
      :SDL_CreateGPUBuffer => [:pointer, :pointer],
      :SDL_CreateGPUTransferBuffer => [:pointer, :pointer],
      :SDL_SetGPUBufferName => [:pointer, :pointer, :pointer],
      :SDL_SetGPUTextureName => [:pointer, :pointer, :pointer],
      :SDL_InsertGPUDebugLabel => [:pointer, :pointer],
      :SDL_PushGPUDebugGroup => [:pointer, :pointer],
      :SDL_PopGPUDebugGroup => [:pointer],
      :SDL_ReleaseGPUTexture => [:pointer, :pointer],
      :SDL_ReleaseGPUSampler => [:pointer, :pointer],
      :SDL_ReleaseGPUBuffer => [:pointer, :pointer],
      :SDL_ReleaseGPUTransferBuffer => [:pointer, :pointer],
      :SDL_ReleaseGPUComputePipeline => [:pointer, :pointer],
      :SDL_ReleaseGPUShader => [:pointer, :pointer],
      :SDL_ReleaseGPUGraphicsPipeline => [:pointer, :pointer],
      :SDL_AcquireGPUCommandBuffer => [:pointer],
      :SDL_PushGPUVertexUniformData => [:pointer, :uint, :pointer, :uint],
      :SDL_PushGPUFragmentUniformData => [:pointer, :uint, :pointer, :uint],
      :SDL_PushGPUComputeUniformData => [:pointer, :uint, :pointer, :uint],
      :SDL_BeginGPURenderPass => [:pointer, :pointer, :uint, :pointer],
      :SDL_BindGPUGraphicsPipeline => [:pointer, :pointer],
      :SDL_SetGPUViewport => [:pointer, :pointer],
      :SDL_SetGPUScissor => [:pointer, :pointer],
      :SDL_SetGPUBlendConstants => [:pointer, FColor.by_value],
      :SDL_SetGPUStencilReference => [:pointer, :uchar],
      :SDL_BindGPUVertexBuffers => [:pointer, :uint, :pointer, :uint],
      :SDL_BindGPUIndexBuffer => [:pointer, :pointer, :int],
      :SDL_BindGPUVertexSamplers => [:pointer, :uint, :pointer, :uint],
      :SDL_BindGPUVertexStorageTextures => [:pointer, :uint, :pointer, :uint],
      :SDL_BindGPUVertexStorageBuffers => [:pointer, :uint, :pointer, :uint],
      :SDL_BindGPUFragmentSamplers => [:pointer, :uint, :pointer, :uint],
      :SDL_BindGPUFragmentStorageTextures => [:pointer, :uint, :pointer, :uint],
      :SDL_BindGPUFragmentStorageBuffers => [:pointer, :uint, :pointer, :uint],
      :SDL_DrawGPUIndexedPrimitives => [:pointer, :uint, :uint, :uint, :int, :uint],
      :SDL_DrawGPUPrimitives => [:pointer, :uint, :uint, :uint, :uint],
      :SDL_DrawGPUPrimitivesIndirect => [:pointer, :pointer, :uint, :uint],
      :SDL_DrawGPUIndexedPrimitivesIndirect => [:pointer, :pointer, :uint, :uint],
      :SDL_EndGPURenderPass => [:pointer],
      :SDL_BeginGPUComputePass => [:pointer, :pointer, :uint, :pointer, :uint],
      :SDL_BindGPUComputePipeline => [:pointer, :pointer],
      :SDL_BindGPUComputeSamplers => [:pointer, :uint, :pointer, :uint],
      :SDL_BindGPUComputeStorageTextures => [:pointer, :uint, :pointer, :uint],
      :SDL_BindGPUComputeStorageBuffers => [:pointer, :uint, :pointer, :uint],
      :SDL_DispatchGPUCompute => [:pointer, :uint, :uint, :uint],
      :SDL_DispatchGPUComputeIndirect => [:pointer, :pointer, :uint],
      :SDL_EndGPUComputePass => [:pointer],
      :SDL_MapGPUTransferBuffer => [:pointer, :pointer, :bool],
      :SDL_UnmapGPUTransferBuffer => [:pointer, :pointer],
      :SDL_BeginGPUCopyPass => [:pointer],
      :SDL_UploadToGPUTexture => [:pointer, :pointer, :pointer, :bool],
      :SDL_UploadToGPUBuffer => [:pointer, :pointer, :pointer, :bool],
      :SDL_CopyGPUTextureToTexture => [:pointer, :pointer, :pointer, :uint, :uint, :uint, :bool],
      :SDL_CopyGPUBufferToBuffer => [:pointer, :pointer, :pointer, :uint, :bool],
      :SDL_DownloadFromGPUTexture => [:pointer, :pointer, :pointer],
      :SDL_DownloadFromGPUBuffer => [:pointer, :pointer, :pointer],
      :SDL_EndGPUCopyPass => [:pointer],
      :SDL_GenerateMipmapsForGPUTexture => [:pointer, :pointer],
      :SDL_BlitGPUTexture => [:pointer, :pointer],
      :SDL_WindowSupportsGPUSwapchainComposition => [:pointer, :pointer, :int],
      :SDL_WindowSupportsGPUPresentMode => [:pointer, :pointer, :int],
      :SDL_ClaimWindowForGPUDevice => [:pointer, :pointer],
      :SDL_ReleaseWindowFromGPUDevice => [:pointer, :pointer],
      :SDL_SetGPUSwapchainParameters => [:pointer, :pointer, :int, :int],
      :SDL_SetGPUAllowedFramesInFlight => [:pointer, :uint],
      :SDL_GetGPUSwapchainTextureFormat => [:pointer, :pointer],
      :SDL_AcquireGPUSwapchainTexture => [:pointer, :pointer, :pointer, :pointer, :pointer],
      :SDL_WaitForGPUSwapchain => [:pointer, :pointer],
      :SDL_WaitAndAcquireGPUSwapchainTexture => [:pointer, :pointer, :pointer, :pointer, :pointer],
      :SDL_SubmitGPUCommandBuffer => [:pointer],
      :SDL_SubmitGPUCommandBufferAndAcquireFence => [:pointer],
      :SDL_CancelGPUCommandBuffer => [:pointer],
      :SDL_WaitForGPUIdle => [:pointer],
      :SDL_WaitForGPUFences => [:pointer, :bool, :pointer, :uint],
      :SDL_QueryGPUFence => [:pointer, :pointer],
      :SDL_ReleaseGPUFence => [:pointer, :pointer],
      :SDL_GPUTextureFormatTexelBlockSize => [:int],
      :SDL_GPUTextureSupportsFormat => [:pointer, :int, :int, :uint],
      :SDL_GPUTextureSupportsSampleCount => [:pointer, :int, :int],
      :SDL_CalculateGPUTextureFormatSize => [:int, :uint, :uint, :uint],
    }
    retvals = {
      :SDL_GPUSupportsShaderFormats => :bool,
      :SDL_GPUSupportsProperties => :bool,
      :SDL_CreateGPUDevice => :pointer,
      :SDL_CreateGPUDeviceWithProperties => :pointer,
      :SDL_DestroyGPUDevice => :void,
      :SDL_GetNumGPUDrivers => :int,
      :SDL_GetGPUDriver => :pointer,
      :SDL_GetGPUDeviceDriver => :pointer,
      :SDL_GetGPUShaderFormats => :uint,
      :SDL_CreateGPUComputePipeline => :pointer,
      :SDL_CreateGPUGraphicsPipeline => :pointer,
      :SDL_CreateGPUSampler => :pointer,
      :SDL_CreateGPUShader => :pointer,
      :SDL_CreateGPUTexture => :pointer,
      :SDL_CreateGPUBuffer => :pointer,
      :SDL_CreateGPUTransferBuffer => :pointer,
      :SDL_SetGPUBufferName => :void,
      :SDL_SetGPUTextureName => :void,
      :SDL_InsertGPUDebugLabel => :void,
      :SDL_PushGPUDebugGroup => :void,
      :SDL_PopGPUDebugGroup => :void,
      :SDL_ReleaseGPUTexture => :void,
      :SDL_ReleaseGPUSampler => :void,
      :SDL_ReleaseGPUBuffer => :void,
      :SDL_ReleaseGPUTransferBuffer => :void,
      :SDL_ReleaseGPUComputePipeline => :void,
      :SDL_ReleaseGPUShader => :void,
      :SDL_ReleaseGPUGraphicsPipeline => :void,
      :SDL_AcquireGPUCommandBuffer => :pointer,
      :SDL_PushGPUVertexUniformData => :void,
      :SDL_PushGPUFragmentUniformData => :void,
      :SDL_PushGPUComputeUniformData => :void,
      :SDL_BeginGPURenderPass => :pointer,
      :SDL_BindGPUGraphicsPipeline => :void,
      :SDL_SetGPUViewport => :void,
      :SDL_SetGPUScissor => :void,
      :SDL_SetGPUBlendConstants => :void,
      :SDL_SetGPUStencilReference => :void,
      :SDL_BindGPUVertexBuffers => :void,
      :SDL_BindGPUIndexBuffer => :void,
      :SDL_BindGPUVertexSamplers => :void,
      :SDL_BindGPUVertexStorageTextures => :void,
      :SDL_BindGPUVertexStorageBuffers => :void,
      :SDL_BindGPUFragmentSamplers => :void,
      :SDL_BindGPUFragmentStorageTextures => :void,
      :SDL_BindGPUFragmentStorageBuffers => :void,
      :SDL_DrawGPUIndexedPrimitives => :void,
      :SDL_DrawGPUPrimitives => :void,
      :SDL_DrawGPUPrimitivesIndirect => :void,
      :SDL_DrawGPUIndexedPrimitivesIndirect => :void,
      :SDL_EndGPURenderPass => :void,
      :SDL_BeginGPUComputePass => :pointer,
      :SDL_BindGPUComputePipeline => :void,
      :SDL_BindGPUComputeSamplers => :void,
      :SDL_BindGPUComputeStorageTextures => :void,
      :SDL_BindGPUComputeStorageBuffers => :void,
      :SDL_DispatchGPUCompute => :void,
      :SDL_DispatchGPUComputeIndirect => :void,
      :SDL_EndGPUComputePass => :void,
      :SDL_MapGPUTransferBuffer => :pointer,
      :SDL_UnmapGPUTransferBuffer => :void,
      :SDL_BeginGPUCopyPass => :pointer,
      :SDL_UploadToGPUTexture => :void,
      :SDL_UploadToGPUBuffer => :void,
      :SDL_CopyGPUTextureToTexture => :void,
      :SDL_CopyGPUBufferToBuffer => :void,
      :SDL_DownloadFromGPUTexture => :void,
      :SDL_DownloadFromGPUBuffer => :void,
      :SDL_EndGPUCopyPass => :void,
      :SDL_GenerateMipmapsForGPUTexture => :void,
      :SDL_BlitGPUTexture => :void,
      :SDL_WindowSupportsGPUSwapchainComposition => :bool,
      :SDL_WindowSupportsGPUPresentMode => :bool,
      :SDL_ClaimWindowForGPUDevice => :bool,
      :SDL_ReleaseWindowFromGPUDevice => :void,
      :SDL_SetGPUSwapchainParameters => :bool,
      :SDL_SetGPUAllowedFramesInFlight => :bool,
      :SDL_GetGPUSwapchainTextureFormat => :int,
      :SDL_AcquireGPUSwapchainTexture => :bool,
      :SDL_WaitForGPUSwapchain => :bool,
      :SDL_WaitAndAcquireGPUSwapchainTexture => :bool,
      :SDL_SubmitGPUCommandBuffer => :bool,
      :SDL_SubmitGPUCommandBufferAndAcquireFence => :pointer,
      :SDL_CancelGPUCommandBuffer => :bool,
      :SDL_WaitForGPUIdle => :bool,
      :SDL_WaitForGPUFences => :bool,
      :SDL_QueryGPUFence => :bool,
      :SDL_ReleaseGPUFence => :void,
      :SDL_GPUTextureFormatTexelBlockSize => :uint,
      :SDL_GPUTextureSupportsFormat => :bool,
      :SDL_GPUTextureSupportsSampleCount => :bool,
      :SDL_CalculateGPUTextureFormatSize => :uint,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

