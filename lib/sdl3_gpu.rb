# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'sdl3_pixels'

module SDL
  extend FFI::Library
  # Define/Macro

  GPU_TEXTUREUSAGE_SAMPLER = 1 << 0
  GPU_TEXTUREUSAGE_COLOR_TARGET = 1 << 1
  GPU_TEXTUREUSAGE_DEPTH_STENCIL_TARGET = 1 << 2
  GPU_TEXTUREUSAGE_GRAPHICS_STORAGE_READ = 1 << 3
  GPU_TEXTUREUSAGE_COMPUTE_STORAGE_READ = 1 << 4
  GPU_TEXTUREUSAGE_COMPUTE_STORAGE_WRITE = 1 << 5
  GPU_TEXTUREUSAGE_COMPUTE_STORAGE_SIMULTANEOUS_READ_WRITE = 1 << 6
  GPU_BUFFERUSAGE_VERTEX = 1 << 0
  GPU_BUFFERUSAGE_INDEX = 1 << 1
  GPU_BUFFERUSAGE_INDIRECT = 1 << 2
  GPU_BUFFERUSAGE_GRAPHICS_STORAGE_READ = 1 << 3
  GPU_BUFFERUSAGE_COMPUTE_STORAGE_READ = 1 << 4
  GPU_BUFFERUSAGE_COMPUTE_STORAGE_WRITE = 1 << 5
  GPU_SHADERFORMAT_INVALID = 0
  GPU_SHADERFORMAT_PRIVATE = 1 << 0
  GPU_SHADERFORMAT_SPIRV = 1 << 1
  GPU_SHADERFORMAT_DXBC = 1 << 2
  GPU_SHADERFORMAT_DXIL = 1 << 3
  GPU_SHADERFORMAT_MSL = 1 << 4
  GPU_SHADERFORMAT_METALLIB = 1 << 5
  GPU_COLORCOMPONENT_R = 1 << 0
  GPU_COLORCOMPONENT_G = 1 << 1
  GPU_COLORCOMPONENT_B = 1 << 2
  GPU_COLORCOMPONENT_A = 1 << 3
  PROP_GPU_DEVICE_CREATE_DEBUGMODE_BOOLEAN = "SDL.gpu.device.create.debugmode"
  PROP_GPU_DEVICE_CREATE_PREFERLOWPOWER_BOOLEAN = "SDL.gpu.device.create.preferlowpower"
  PROP_GPU_DEVICE_CREATE_NAME_STRING = "SDL.gpu.device.create.name"
  PROP_GPU_DEVICE_CREATE_SHADERS_PRIVATE_BOOLEAN = "SDL.gpu.device.create.shaders.private"
  PROP_GPU_DEVICE_CREATE_SHADERS_SPIRV_BOOLEAN = "SDL.gpu.device.create.shaders.spirv"
  PROP_GPU_DEVICE_CREATE_SHADERS_DXBC_BOOLEAN = "SDL.gpu.device.create.shaders.dxbc"
  PROP_GPU_DEVICE_CREATE_SHADERS_DXIL_BOOLEAN = "SDL.gpu.device.create.shaders.dxil"
  PROP_GPU_DEVICE_CREATE_SHADERS_MSL_BOOLEAN = "SDL.gpu.device.create.shaders.msl"
  PROP_GPU_DEVICE_CREATE_SHADERS_METALLIB_BOOLEAN = "SDL.gpu.device.create.shaders.metallib"
  PROP_GPU_DEVICE_CREATE_D3D12_SEMANTIC_NAME_STRING = "SDL.gpu.device.create.d3d12.semantic"
  PROP_GPU_COMPUTEPIPELINE_CREATE_NAME_STRING = "SDL.gpu.computepipeline.create.name"
  PROP_GPU_GRAPHICSPIPELINE_CREATE_NAME_STRING = "SDL.gpu.graphicspipeline.create.name"
  PROP_GPU_SAMPLER_CREATE_NAME_STRING = "SDL.gpu.sampler.create.name"
  PROP_GPU_SHADER_CREATE_NAME_STRING = "SDL.gpu.shader.create.name"
  PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_R_FLOAT = "SDL.gpu.texture.create.d3d12.clear.r"
  PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_G_FLOAT = "SDL.gpu.texture.create.d3d12.clear.g"
  PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_B_FLOAT = "SDL.gpu.texture.create.d3d12.clear.b"
  PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_A_FLOAT = "SDL.gpu.texture.create.d3d12.clear.a"
  PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_DEPTH_FLOAT = "SDL.gpu.texture.create.d3d12.clear.depth"
  PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_STENCIL_NUMBER = "SDL.gpu.texture.create.d3d12.clear.stencil"
  PROP_GPU_TEXTURE_CREATE_NAME_STRING = "SDL.gpu.texture.create.name"
  PROP_GPU_BUFFER_CREATE_NAME_STRING = "SDL.gpu.buffer.create.name"
  PROP_GPU_TRANSFERBUFFER_CREATE_NAME_STRING = "SDL.gpu.transferbuffer.create.name"

  # Enum

  GPU_PRIMITIVETYPE_TRIANGLELIST = 0
  GPU_PRIMITIVETYPE_TRIANGLESTRIP = 1
  GPU_PRIMITIVETYPE_LINELIST = 2
  GPU_PRIMITIVETYPE_LINESTRIP = 3
  GPU_PRIMITIVETYPE_POINTLIST = 4
  GPU_LOADOP_LOAD = 0
  GPU_LOADOP_CLEAR = 1
  GPU_LOADOP_DONT_CARE = 2
  GPU_STOREOP_STORE = 0
  GPU_STOREOP_DONT_CARE = 1
  GPU_STOREOP_RESOLVE = 2
  GPU_STOREOP_RESOLVE_AND_STORE = 3
  GPU_INDEXELEMENTSIZE_16BIT = 0
  GPU_INDEXELEMENTSIZE_32BIT = 1
  GPU_TEXTUREFORMAT_INVALID = 0
  GPU_TEXTUREFORMAT_A8_UNORM = 1
  GPU_TEXTUREFORMAT_R8_UNORM = 2
  GPU_TEXTUREFORMAT_R8G8_UNORM = 3
  GPU_TEXTUREFORMAT_R8G8B8A8_UNORM = 4
  GPU_TEXTUREFORMAT_R16_UNORM = 5
  GPU_TEXTUREFORMAT_R16G16_UNORM = 6
  GPU_TEXTUREFORMAT_R16G16B16A16_UNORM = 7
  GPU_TEXTUREFORMAT_R10G10B10A2_UNORM = 8
  GPU_TEXTUREFORMAT_B5G6R5_UNORM = 9
  GPU_TEXTUREFORMAT_B5G5R5A1_UNORM = 10
  GPU_TEXTUREFORMAT_B4G4R4A4_UNORM = 11
  GPU_TEXTUREFORMAT_B8G8R8A8_UNORM = 12
  GPU_TEXTUREFORMAT_BC1_RGBA_UNORM = 13
  GPU_TEXTUREFORMAT_BC2_RGBA_UNORM = 14
  GPU_TEXTUREFORMAT_BC3_RGBA_UNORM = 15
  GPU_TEXTUREFORMAT_BC4_R_UNORM = 16
  GPU_TEXTUREFORMAT_BC5_RG_UNORM = 17
  GPU_TEXTUREFORMAT_BC7_RGBA_UNORM = 18
  GPU_TEXTUREFORMAT_BC6H_RGB_FLOAT = 19
  GPU_TEXTUREFORMAT_BC6H_RGB_UFLOAT = 20
  GPU_TEXTUREFORMAT_R8_SNORM = 21
  GPU_TEXTUREFORMAT_R8G8_SNORM = 22
  GPU_TEXTUREFORMAT_R8G8B8A8_SNORM = 23
  GPU_TEXTUREFORMAT_R16_SNORM = 24
  GPU_TEXTUREFORMAT_R16G16_SNORM = 25
  GPU_TEXTUREFORMAT_R16G16B16A16_SNORM = 26
  GPU_TEXTUREFORMAT_R16_FLOAT = 27
  GPU_TEXTUREFORMAT_R16G16_FLOAT = 28
  GPU_TEXTUREFORMAT_R16G16B16A16_FLOAT = 29
  GPU_TEXTUREFORMAT_R32_FLOAT = 30
  GPU_TEXTUREFORMAT_R32G32_FLOAT = 31
  GPU_TEXTUREFORMAT_R32G32B32A32_FLOAT = 32
  GPU_TEXTUREFORMAT_R11G11B10_UFLOAT = 33
  GPU_TEXTUREFORMAT_R8_UINT = 34
  GPU_TEXTUREFORMAT_R8G8_UINT = 35
  GPU_TEXTUREFORMAT_R8G8B8A8_UINT = 36
  GPU_TEXTUREFORMAT_R16_UINT = 37
  GPU_TEXTUREFORMAT_R16G16_UINT = 38
  GPU_TEXTUREFORMAT_R16G16B16A16_UINT = 39
  GPU_TEXTUREFORMAT_R32_UINT = 40
  GPU_TEXTUREFORMAT_R32G32_UINT = 41
  GPU_TEXTUREFORMAT_R32G32B32A32_UINT = 42
  GPU_TEXTUREFORMAT_R8_INT = 43
  GPU_TEXTUREFORMAT_R8G8_INT = 44
  GPU_TEXTUREFORMAT_R8G8B8A8_INT = 45
  GPU_TEXTUREFORMAT_R16_INT = 46
  GPU_TEXTUREFORMAT_R16G16_INT = 47
  GPU_TEXTUREFORMAT_R16G16B16A16_INT = 48
  GPU_TEXTUREFORMAT_R32_INT = 49
  GPU_TEXTUREFORMAT_R32G32_INT = 50
  GPU_TEXTUREFORMAT_R32G32B32A32_INT = 51
  GPU_TEXTUREFORMAT_R8G8B8A8_UNORM_SRGB = 52
  GPU_TEXTUREFORMAT_B8G8R8A8_UNORM_SRGB = 53
  GPU_TEXTUREFORMAT_BC1_RGBA_UNORM_SRGB = 54
  GPU_TEXTUREFORMAT_BC2_RGBA_UNORM_SRGB = 55
  GPU_TEXTUREFORMAT_BC3_RGBA_UNORM_SRGB = 56
  GPU_TEXTUREFORMAT_BC7_RGBA_UNORM_SRGB = 57
  GPU_TEXTUREFORMAT_D16_UNORM = 58
  GPU_TEXTUREFORMAT_D24_UNORM = 59
  GPU_TEXTUREFORMAT_D32_FLOAT = 60
  GPU_TEXTUREFORMAT_D24_UNORM_S8_UINT = 61
  GPU_TEXTUREFORMAT_D32_FLOAT_S8_UINT = 62
  GPU_TEXTUREFORMAT_ASTC_4x4_UNORM = 63
  GPU_TEXTUREFORMAT_ASTC_5x4_UNORM = 64
  GPU_TEXTUREFORMAT_ASTC_5x5_UNORM = 65
  GPU_TEXTUREFORMAT_ASTC_6x5_UNORM = 66
  GPU_TEXTUREFORMAT_ASTC_6x6_UNORM = 67
  GPU_TEXTUREFORMAT_ASTC_8x5_UNORM = 68
  GPU_TEXTUREFORMAT_ASTC_8x6_UNORM = 69
  GPU_TEXTUREFORMAT_ASTC_8x8_UNORM = 70
  GPU_TEXTUREFORMAT_ASTC_10x5_UNORM = 71
  GPU_TEXTUREFORMAT_ASTC_10x6_UNORM = 72
  GPU_TEXTUREFORMAT_ASTC_10x8_UNORM = 73
  GPU_TEXTUREFORMAT_ASTC_10x10_UNORM = 74
  GPU_TEXTUREFORMAT_ASTC_12x10_UNORM = 75
  GPU_TEXTUREFORMAT_ASTC_12x12_UNORM = 76
  GPU_TEXTUREFORMAT_ASTC_4x4_UNORM_SRGB = 77
  GPU_TEXTUREFORMAT_ASTC_5x4_UNORM_SRGB = 78
  GPU_TEXTUREFORMAT_ASTC_5x5_UNORM_SRGB = 79
  GPU_TEXTUREFORMAT_ASTC_6x5_UNORM_SRGB = 80
  GPU_TEXTUREFORMAT_ASTC_6x6_UNORM_SRGB = 81
  GPU_TEXTUREFORMAT_ASTC_8x5_UNORM_SRGB = 82
  GPU_TEXTUREFORMAT_ASTC_8x6_UNORM_SRGB = 83
  GPU_TEXTUREFORMAT_ASTC_8x8_UNORM_SRGB = 84
  GPU_TEXTUREFORMAT_ASTC_10x5_UNORM_SRGB = 85
  GPU_TEXTUREFORMAT_ASTC_10x6_UNORM_SRGB = 86
  GPU_TEXTUREFORMAT_ASTC_10x8_UNORM_SRGB = 87
  GPU_TEXTUREFORMAT_ASTC_10x10_UNORM_SRGB = 88
  GPU_TEXTUREFORMAT_ASTC_12x10_UNORM_SRGB = 89
  GPU_TEXTUREFORMAT_ASTC_12x12_UNORM_SRGB = 90
  GPU_TEXTUREFORMAT_ASTC_4x4_FLOAT = 91
  GPU_TEXTUREFORMAT_ASTC_5x4_FLOAT = 92
  GPU_TEXTUREFORMAT_ASTC_5x5_FLOAT = 93
  GPU_TEXTUREFORMAT_ASTC_6x5_FLOAT = 94
  GPU_TEXTUREFORMAT_ASTC_6x6_FLOAT = 95
  GPU_TEXTUREFORMAT_ASTC_8x5_FLOAT = 96
  GPU_TEXTUREFORMAT_ASTC_8x6_FLOAT = 97
  GPU_TEXTUREFORMAT_ASTC_8x8_FLOAT = 98
  GPU_TEXTUREFORMAT_ASTC_10x5_FLOAT = 99
  GPU_TEXTUREFORMAT_ASTC_10x6_FLOAT = 100
  GPU_TEXTUREFORMAT_ASTC_10x8_FLOAT = 101
  GPU_TEXTUREFORMAT_ASTC_10x10_FLOAT = 102
  GPU_TEXTUREFORMAT_ASTC_12x10_FLOAT = 103
  GPU_TEXTUREFORMAT_ASTC_12x12_FLOAT = 104
  GPU_TEXTURETYPE_2D = 0
  GPU_TEXTURETYPE_2D_ARRAY = 1
  GPU_TEXTURETYPE_3D = 2
  GPU_TEXTURETYPE_CUBE = 3
  GPU_TEXTURETYPE_CUBE_ARRAY = 4
  GPU_SAMPLECOUNT_1 = 0
  GPU_SAMPLECOUNT_2 = 1
  GPU_SAMPLECOUNT_4 = 2
  GPU_SAMPLECOUNT_8 = 3
  GPU_CUBEMAPFACE_POSITIVEX = 0
  GPU_CUBEMAPFACE_NEGATIVEX = 1
  GPU_CUBEMAPFACE_POSITIVEY = 2
  GPU_CUBEMAPFACE_NEGATIVEY = 3
  GPU_CUBEMAPFACE_POSITIVEZ = 4
  GPU_CUBEMAPFACE_NEGATIVEZ = 5
  GPU_TRANSFERBUFFERUSAGE_UPLOAD = 0
  GPU_TRANSFERBUFFERUSAGE_DOWNLOAD = 1
  GPU_SHADERSTAGE_VERTEX = 0
  GPU_SHADERSTAGE_FRAGMENT = 1
  GPU_VERTEXELEMENTFORMAT_INVALID = 0
  GPU_VERTEXELEMENTFORMAT_INT = 1
  GPU_VERTEXELEMENTFORMAT_INT2 = 2
  GPU_VERTEXELEMENTFORMAT_INT3 = 3
  GPU_VERTEXELEMENTFORMAT_INT4 = 4
  GPU_VERTEXELEMENTFORMAT_UINT = 5
  GPU_VERTEXELEMENTFORMAT_UINT2 = 6
  GPU_VERTEXELEMENTFORMAT_UINT3 = 7
  GPU_VERTEXELEMENTFORMAT_UINT4 = 8
  GPU_VERTEXELEMENTFORMAT_FLOAT = 9
  GPU_VERTEXELEMENTFORMAT_FLOAT2 = 10
  GPU_VERTEXELEMENTFORMAT_FLOAT3 = 11
  GPU_VERTEXELEMENTFORMAT_FLOAT4 = 12
  GPU_VERTEXELEMENTFORMAT_BYTE2 = 13
  GPU_VERTEXELEMENTFORMAT_BYTE4 = 14
  GPU_VERTEXELEMENTFORMAT_UBYTE2 = 15
  GPU_VERTEXELEMENTFORMAT_UBYTE4 = 16
  GPU_VERTEXELEMENTFORMAT_BYTE2_NORM = 17
  GPU_VERTEXELEMENTFORMAT_BYTE4_NORM = 18
  GPU_VERTEXELEMENTFORMAT_UBYTE2_NORM = 19
  GPU_VERTEXELEMENTFORMAT_UBYTE4_NORM = 20
  GPU_VERTEXELEMENTFORMAT_SHORT2 = 21
  GPU_VERTEXELEMENTFORMAT_SHORT4 = 22
  GPU_VERTEXELEMENTFORMAT_USHORT2 = 23
  GPU_VERTEXELEMENTFORMAT_USHORT4 = 24
  GPU_VERTEXELEMENTFORMAT_SHORT2_NORM = 25
  GPU_VERTEXELEMENTFORMAT_SHORT4_NORM = 26
  GPU_VERTEXELEMENTFORMAT_USHORT2_NORM = 27
  GPU_VERTEXELEMENTFORMAT_USHORT4_NORM = 28
  GPU_VERTEXELEMENTFORMAT_HALF2 = 29
  GPU_VERTEXELEMENTFORMAT_HALF4 = 30
  GPU_VERTEXINPUTRATE_VERTEX = 0
  GPU_VERTEXINPUTRATE_INSTANCE = 1
  GPU_FILLMODE_FILL = 0
  GPU_FILLMODE_LINE = 1
  GPU_CULLMODE_NONE = 0
  GPU_CULLMODE_FRONT = 1
  GPU_CULLMODE_BACK = 2
  GPU_FRONTFACE_COUNTER_CLOCKWISE = 0
  GPU_FRONTFACE_CLOCKWISE = 1
  GPU_COMPAREOP_INVALID = 0
  GPU_COMPAREOP_NEVER = 1
  GPU_COMPAREOP_LESS = 2
  GPU_COMPAREOP_EQUAL = 3
  GPU_COMPAREOP_LESS_OR_EQUAL = 4
  GPU_COMPAREOP_GREATER = 5
  GPU_COMPAREOP_NOT_EQUAL = 6
  GPU_COMPAREOP_GREATER_OR_EQUAL = 7
  GPU_COMPAREOP_ALWAYS = 8
  GPU_STENCILOP_INVALID = 0
  GPU_STENCILOP_KEEP = 1
  GPU_STENCILOP_ZERO = 2
  GPU_STENCILOP_REPLACE = 3
  GPU_STENCILOP_INCREMENT_AND_CLAMP = 4
  GPU_STENCILOP_DECREMENT_AND_CLAMP = 5
  GPU_STENCILOP_INVERT = 6
  GPU_STENCILOP_INCREMENT_AND_WRAP = 7
  GPU_STENCILOP_DECREMENT_AND_WRAP = 8
  GPU_BLENDOP_INVALID = 0
  GPU_BLENDOP_ADD = 1
  GPU_BLENDOP_SUBTRACT = 2
  GPU_BLENDOP_REVERSE_SUBTRACT = 3
  GPU_BLENDOP_MIN = 4
  GPU_BLENDOP_MAX = 5
  GPU_BLENDFACTOR_INVALID = 0
  GPU_BLENDFACTOR_ZERO = 1
  GPU_BLENDFACTOR_ONE = 2
  GPU_BLENDFACTOR_SRC_COLOR = 3
  GPU_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4
  GPU_BLENDFACTOR_DST_COLOR = 5
  GPU_BLENDFACTOR_ONE_MINUS_DST_COLOR = 6
  GPU_BLENDFACTOR_SRC_ALPHA = 7
  GPU_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 8
  GPU_BLENDFACTOR_DST_ALPHA = 9
  GPU_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10
  GPU_BLENDFACTOR_CONSTANT_COLOR = 11
  GPU_BLENDFACTOR_ONE_MINUS_CONSTANT_COLOR = 12
  GPU_BLENDFACTOR_SRC_ALPHA_SATURATE = 13
  GPU_FILTER_NEAREST = 0
  GPU_FILTER_LINEAR = 1
  GPU_SAMPLERMIPMAPMODE_NEAREST = 0
  GPU_SAMPLERMIPMAPMODE_LINEAR = 1
  GPU_SAMPLERADDRESSMODE_REPEAT = 0
  GPU_SAMPLERADDRESSMODE_MIRRORED_REPEAT = 1
  GPU_SAMPLERADDRESSMODE_CLAMP_TO_EDGE = 2
  GPU_PRESENTMODE_VSYNC = 0
  GPU_PRESENTMODE_IMMEDIATE = 1
  GPU_PRESENTMODE_MAILBOX = 2
  GPU_SWAPCHAINCOMPOSITION_SDR = 0
  GPU_SWAPCHAINCOMPOSITION_SDR_LINEAR = 1
  GPU_SWAPCHAINCOMPOSITION_HDR_EXTENDED_LINEAR = 2
  GPU_SWAPCHAINCOMPOSITION_HDR10_ST2084 = 3

  # Typedef

  typedef :int, :SDL_GPUPrimitiveType
  typedef :int, :SDL_GPULoadOp
  typedef :int, :SDL_GPUStoreOp
  typedef :int, :SDL_GPUIndexElementSize
  typedef :int, :SDL_GPUTextureFormat
  typedef :uint, :SDL_GPUTextureUsageFlags
  typedef :int, :SDL_GPUTextureType
  typedef :int, :SDL_GPUSampleCount
  typedef :int, :SDL_GPUCubeMapFace
  typedef :uint, :SDL_GPUBufferUsageFlags
  typedef :int, :SDL_GPUTransferBufferUsage
  typedef :int, :SDL_GPUShaderStage
  typedef :uint, :SDL_GPUShaderFormat
  typedef :int, :SDL_GPUVertexElementFormat
  typedef :int, :SDL_GPUVertexInputRate
  typedef :int, :SDL_GPUFillMode
  typedef :int, :SDL_GPUCullMode
  typedef :int, :SDL_GPUFrontFace
  typedef :int, :SDL_GPUCompareOp
  typedef :int, :SDL_GPUStencilOp
  typedef :int, :SDL_GPUBlendOp
  typedef :int, :SDL_GPUBlendFactor
  typedef :uchar, :SDL_GPUColorComponentFlags
  typedef :int, :SDL_GPUFilter
  typedef :int, :SDL_GPUSamplerMipmapMode
  typedef :int, :SDL_GPUSamplerAddressMode
  typedef :int, :SDL_GPUPresentMode
  typedef :int, :SDL_GPUSwapchainComposition

  # Struct

  class GPUViewport < FFI::Struct
    layout(
      :x, :float,
      :y, :float,
      :w, :float,
      :h, :float,
      :min_depth, :float,
      :max_depth, :float,
    )
  end

  class GPUTextureTransferInfo < FFI::Struct
    layout(
      :transfer_buffer, :pointer,
      :offset, :uint,
      :pixels_per_row, :uint,
      :rows_per_layer, :uint,
    )
  end

  class GPUTransferBufferLocation < FFI::Struct
    layout(
      :transfer_buffer, :pointer,
      :offset, :uint,
    )
  end

  class GPUTextureLocation < FFI::Struct
    layout(
      :texture, :pointer,
      :mip_level, :uint,
      :layer, :uint,
      :x, :uint,
      :y, :uint,
      :z, :uint,
    )
  end

  class GPUTextureRegion < FFI::Struct
    layout(
      :texture, :pointer,
      :mip_level, :uint,
      :layer, :uint,
      :x, :uint,
      :y, :uint,
      :z, :uint,
      :w, :uint,
      :h, :uint,
      :d, :uint,
    )
  end

  class GPUBlitRegion < FFI::Struct
    layout(
      :texture, :pointer,
      :mip_level, :uint,
      :layer_or_depth_plane, :uint,
      :x, :uint,
      :y, :uint,
      :w, :uint,
      :h, :uint,
    )
  end

  class GPUBufferLocation < FFI::Struct
    layout(
      :buffer, :pointer,
      :offset, :uint,
    )
  end

  class GPUBufferRegion < FFI::Struct
    layout(
      :buffer, :pointer,
      :offset, :uint,
      :size, :uint,
    )
  end

  class GPUIndirectDrawCommand < FFI::Struct
    layout(
      :num_vertices, :uint,
      :num_instances, :uint,
      :first_vertex, :uint,
      :first_instance, :uint,
    )
  end

  class GPUIndexedIndirectDrawCommand < FFI::Struct
    layout(
      :num_indices, :uint,
      :num_instances, :uint,
      :first_index, :uint,
      :vertex_offset, :int,
      :first_instance, :uint,
    )
  end

  class GPUIndirectDispatchCommand < FFI::Struct
    layout(
      :groupcount_x, :uint,
      :groupcount_y, :uint,
      :groupcount_z, :uint,
    )
  end

  class GPUSamplerCreateInfo < FFI::Struct
    layout(
      :min_filter, :int,
      :mag_filter, :int,
      :mipmap_mode, :int,
      :address_mode_u, :int,
      :address_mode_v, :int,
      :address_mode_w, :int,
      :mip_lod_bias, :float,
      :max_anisotropy, :float,
      :compare_op, :int,
      :min_lod, :float,
      :max_lod, :float,
      :enable_anisotropy, :bool,
      :enable_compare, :bool,
      :padding1, :uchar,
      :padding2, :uchar,
      :props, :uint,
    )
  end

  class GPUVertexBufferDescription < FFI::Struct
    layout(
      :slot, :uint,
      :pitch, :uint,
      :input_rate, :int,
      :instance_step_rate, :uint,
    )
  end

  class GPUVertexAttribute < FFI::Struct
    layout(
      :location, :uint,
      :buffer_slot, :uint,
      :format, :int,
      :offset, :uint,
    )
  end

  class GPUVertexInputState < FFI::Struct
    layout(
      :vertex_buffer_descriptions, :pointer,
      :num_vertex_buffers, :uint,
      :vertex_attributes, :pointer,
      :num_vertex_attributes, :uint,
    )
  end

  class GPUStencilOpState < FFI::Struct
    layout(
      :fail_op, :int,
      :pass_op, :int,
      :depth_fail_op, :int,
      :compare_op, :int,
    )
  end

  class GPUColorTargetBlendState < FFI::Struct
    layout(
      :src_color_blendfactor, :int,
      :dst_color_blendfactor, :int,
      :color_blend_op, :int,
      :src_alpha_blendfactor, :int,
      :dst_alpha_blendfactor, :int,
      :alpha_blend_op, :int,
      :color_write_mask, :uchar,
      :enable_blend, :bool,
      :enable_color_write_mask, :bool,
      :padding1, :uchar,
      :padding2, :uchar,
    )
  end

  class GPUShaderCreateInfo < FFI::Struct
    layout(
      :code_size, :ulong_long,
      :code, :pointer,
      :entrypoint, :pointer,
      :format, :uint,
      :stage, :int,
      :num_samplers, :uint,
      :num_storage_textures, :uint,
      :num_storage_buffers, :uint,
      :num_uniform_buffers, :uint,
      :props, :uint,
    )
  end

  class GPUTextureCreateInfo < FFI::Struct
    layout(
      :type, :int,
      :format, :int,
      :usage, :uint,
      :width, :uint,
      :height, :uint,
      :layer_count_or_depth, :uint,
      :num_levels, :uint,
      :sample_count, :int,
      :props, :uint,
    )
  end

  class GPUBufferCreateInfo < FFI::Struct
    layout(
      :usage, :uint,
      :size, :uint,
      :props, :uint,
    )
  end

  class GPUTransferBufferCreateInfo < FFI::Struct
    layout(
      :usage, :int,
      :size, :uint,
      :props, :uint,
    )
  end

  class GPURasterizerState < FFI::Struct
    layout(
      :fill_mode, :int,
      :cull_mode, :int,
      :front_face, :int,
      :depth_bias_constant_factor, :float,
      :depth_bias_clamp, :float,
      :depth_bias_slope_factor, :float,
      :enable_depth_bias, :bool,
      :enable_depth_clip, :bool,
      :padding1, :uchar,
      :padding2, :uchar,
    )
  end

  class GPUMultisampleState < FFI::Struct
    layout(
      :sample_count, :int,
      :sample_mask, :uint,
      :enable_mask, :bool,
      :padding1, :uchar,
      :padding2, :uchar,
      :padding3, :uchar,
    )
  end

  class GPUDepthStencilState < FFI::Struct
    layout(
      :compare_op, :int,
      :back_stencil_state, GPUStencilOpState,
      :front_stencil_state, GPUStencilOpState,
      :compare_mask, :uchar,
      :write_mask, :uchar,
      :enable_depth_test, :bool,
      :enable_depth_write, :bool,
      :enable_stencil_test, :bool,
      :padding1, :uchar,
      :padding2, :uchar,
      :padding3, :uchar,
    )
  end

  class GPUColorTargetDescription < FFI::Struct
    layout(
      :format, :int,
      :blend_state, GPUColorTargetBlendState,
    )
  end

  class GPUGraphicsPipelineTargetInfo < FFI::Struct
    layout(
      :color_target_descriptions, :pointer,
      :num_color_targets, :uint,
      :depth_stencil_format, :int,
      :has_depth_stencil_target, :bool,
      :padding1, :uchar,
      :padding2, :uchar,
      :padding3, :uchar,
    )
  end

  class GPUGraphicsPipelineCreateInfo < FFI::Struct
    layout(
      :vertex_shader, :pointer,
      :fragment_shader, :pointer,
      :vertex_input_state, GPUVertexInputState,
      :primitive_type, :int,
      :rasterizer_state, GPURasterizerState,
      :multisample_state, GPUMultisampleState,
      :depth_stencil_state, GPUDepthStencilState,
      :target_info, GPUGraphicsPipelineTargetInfo,
      :props, :uint,
    )
  end

  class GPUComputePipelineCreateInfo < FFI::Struct
    layout(
      :code_size, :ulong_long,
      :code, :pointer,
      :entrypoint, :pointer,
      :format, :uint,
      :num_samplers, :uint,
      :num_readonly_storage_textures, :uint,
      :num_readonly_storage_buffers, :uint,
      :num_readwrite_storage_textures, :uint,
      :num_readwrite_storage_buffers, :uint,
      :num_uniform_buffers, :uint,
      :threadcount_x, :uint,
      :threadcount_y, :uint,
      :threadcount_z, :uint,
      :props, :uint,
    )
  end

  class GPUColorTargetInfo < FFI::Struct
    layout(
      :texture, :pointer,
      :mip_level, :uint,
      :layer_or_depth_plane, :uint,
      :clear_color, FColor,
      :load_op, :int,
      :store_op, :int,
      :resolve_texture, :pointer,
      :resolve_mip_level, :uint,
      :resolve_layer, :uint,
      :cycle, :bool,
      :cycle_resolve_texture, :bool,
      :padding1, :uchar,
      :padding2, :uchar,
    )
  end

  class GPUDepthStencilTargetInfo < FFI::Struct
    layout(
      :texture, :pointer,
      :clear_depth, :float,
      :load_op, :int,
      :store_op, :int,
      :stencil_load_op, :int,
      :stencil_store_op, :int,
      :cycle, :bool,
      :clear_stencil, :uchar,
      :padding1, :uchar,
      :padding2, :uchar,
    )
  end

  class GPUBlitInfo < FFI::Struct
    layout(
      :source, GPUBlitRegion,
      :destination, GPUBlitRegion,
      :load_op, :int,
      :clear_color, FColor,
      :flip_mode, :int,
      :filter, :int,
      :cycle, :bool,
      :padding1, :uchar,
      :padding2, :uchar,
      :padding3, :uchar,
    )
  end

  class GPUBufferBinding < FFI::Struct
    layout(
      :buffer, :pointer,
      :offset, :uint,
    )
  end

  class GPUTextureSamplerBinding < FFI::Struct
    layout(
      :texture, :pointer,
      :sampler, :pointer,
    )
  end

  class GPUStorageBufferReadWriteBinding < FFI::Struct
    layout(
      :buffer, :pointer,
      :cycle, :bool,
      :padding1, :uchar,
      :padding2, :uchar,
      :padding3, :uchar,
    )
  end

  class GPUStorageTextureReadWriteBinding < FFI::Struct
    layout(
      :texture, :pointer,
      :mip_level, :uint,
      :layer, :uint,
      :cycle, :bool,
      :padding1, :uchar,
      :padding2, :uchar,
      :padding3, :uchar,
    )
  end


  # Function

  def self.setup_gpu_symbols(output_error = false)
    entries = [
      [:GPUSupportsShaderFormats, :SDL_GPUSupportsShaderFormats, [:uint, :pointer], :bool],
      [:GPUSupportsProperties, :SDL_GPUSupportsProperties, [:uint], :bool],
      [:CreateGPUDevice, :SDL_CreateGPUDevice, [:uint, :bool, :pointer], :pointer],
      [:CreateGPUDeviceWithProperties, :SDL_CreateGPUDeviceWithProperties, [:uint], :pointer],
      [:DestroyGPUDevice, :SDL_DestroyGPUDevice, [:pointer], :void],
      [:GetNumGPUDrivers, :SDL_GetNumGPUDrivers, [], :int],
      [:GetGPUDriver, :SDL_GetGPUDriver, [:int], :pointer],
      [:GetGPUDeviceDriver, :SDL_GetGPUDeviceDriver, [:pointer], :pointer],
      [:GetGPUShaderFormats, :SDL_GetGPUShaderFormats, [:pointer], :uint],
      [:CreateGPUComputePipeline, :SDL_CreateGPUComputePipeline, [:pointer, :pointer], :pointer],
      [:CreateGPUGraphicsPipeline, :SDL_CreateGPUGraphicsPipeline, [:pointer, :pointer], :pointer],
      [:CreateGPUSampler, :SDL_CreateGPUSampler, [:pointer, :pointer], :pointer],
      [:CreateGPUShader, :SDL_CreateGPUShader, [:pointer, :pointer], :pointer],
      [:CreateGPUTexture, :SDL_CreateGPUTexture, [:pointer, :pointer], :pointer],
      [:CreateGPUBuffer, :SDL_CreateGPUBuffer, [:pointer, :pointer], :pointer],
      [:CreateGPUTransferBuffer, :SDL_CreateGPUTransferBuffer, [:pointer, :pointer], :pointer],
      [:SetGPUBufferName, :SDL_SetGPUBufferName, [:pointer, :pointer, :pointer], :void],
      [:SetGPUTextureName, :SDL_SetGPUTextureName, [:pointer, :pointer, :pointer], :void],
      [:InsertGPUDebugLabel, :SDL_InsertGPUDebugLabel, [:pointer, :pointer], :void],
      [:PushGPUDebugGroup, :SDL_PushGPUDebugGroup, [:pointer, :pointer], :void],
      [:PopGPUDebugGroup, :SDL_PopGPUDebugGroup, [:pointer], :void],
      [:ReleaseGPUTexture, :SDL_ReleaseGPUTexture, [:pointer, :pointer], :void],
      [:ReleaseGPUSampler, :SDL_ReleaseGPUSampler, [:pointer, :pointer], :void],
      [:ReleaseGPUBuffer, :SDL_ReleaseGPUBuffer, [:pointer, :pointer], :void],
      [:ReleaseGPUTransferBuffer, :SDL_ReleaseGPUTransferBuffer, [:pointer, :pointer], :void],
      [:ReleaseGPUComputePipeline, :SDL_ReleaseGPUComputePipeline, [:pointer, :pointer], :void],
      [:ReleaseGPUShader, :SDL_ReleaseGPUShader, [:pointer, :pointer], :void],
      [:ReleaseGPUGraphicsPipeline, :SDL_ReleaseGPUGraphicsPipeline, [:pointer, :pointer], :void],
      [:AcquireGPUCommandBuffer, :SDL_AcquireGPUCommandBuffer, [:pointer], :pointer],
      [:PushGPUVertexUniformData, :SDL_PushGPUVertexUniformData, [:pointer, :uint, :pointer, :uint], :void],
      [:PushGPUFragmentUniformData, :SDL_PushGPUFragmentUniformData, [:pointer, :uint, :pointer, :uint], :void],
      [:PushGPUComputeUniformData, :SDL_PushGPUComputeUniformData, [:pointer, :uint, :pointer, :uint], :void],
      [:BeginGPURenderPass, :SDL_BeginGPURenderPass, [:pointer, :pointer, :uint, :pointer], :pointer],
      [:BindGPUGraphicsPipeline, :SDL_BindGPUGraphicsPipeline, [:pointer, :pointer], :void],
      [:SetGPUViewport, :SDL_SetGPUViewport, [:pointer, :pointer], :void],
      [:SetGPUScissor, :SDL_SetGPUScissor, [:pointer, :pointer], :void],
      [:SetGPUBlendConstants, :SDL_SetGPUBlendConstants, [:pointer, FColor.by_value], :void],
      [:SetGPUStencilReference, :SDL_SetGPUStencilReference, [:pointer, :uchar], :void],
      [:BindGPUVertexBuffers, :SDL_BindGPUVertexBuffers, [:pointer, :uint, :pointer, :uint], :void],
      [:BindGPUIndexBuffer, :SDL_BindGPUIndexBuffer, [:pointer, :pointer, :int], :void],
      [:BindGPUVertexSamplers, :SDL_BindGPUVertexSamplers, [:pointer, :uint, :pointer, :uint], :void],
      [:BindGPUVertexStorageTextures, :SDL_BindGPUVertexStorageTextures, [:pointer, :uint, :pointer, :uint], :void],
      [:BindGPUVertexStorageBuffers, :SDL_BindGPUVertexStorageBuffers, [:pointer, :uint, :pointer, :uint], :void],
      [:BindGPUFragmentSamplers, :SDL_BindGPUFragmentSamplers, [:pointer, :uint, :pointer, :uint], :void],
      [:BindGPUFragmentStorageTextures, :SDL_BindGPUFragmentStorageTextures, [:pointer, :uint, :pointer, :uint], :void],
      [:BindGPUFragmentStorageBuffers, :SDL_BindGPUFragmentStorageBuffers, [:pointer, :uint, :pointer, :uint], :void],
      [:DrawGPUIndexedPrimitives, :SDL_DrawGPUIndexedPrimitives, [:pointer, :uint, :uint, :uint, :int, :uint], :void],
      [:DrawGPUPrimitives, :SDL_DrawGPUPrimitives, [:pointer, :uint, :uint, :uint, :uint], :void],
      [:DrawGPUPrimitivesIndirect, :SDL_DrawGPUPrimitivesIndirect, [:pointer, :pointer, :uint, :uint], :void],
      [:DrawGPUIndexedPrimitivesIndirect, :SDL_DrawGPUIndexedPrimitivesIndirect, [:pointer, :pointer, :uint, :uint], :void],
      [:EndGPURenderPass, :SDL_EndGPURenderPass, [:pointer], :void],
      [:BeginGPUComputePass, :SDL_BeginGPUComputePass, [:pointer, :pointer, :uint, :pointer, :uint], :pointer],
      [:BindGPUComputePipeline, :SDL_BindGPUComputePipeline, [:pointer, :pointer], :void],
      [:BindGPUComputeSamplers, :SDL_BindGPUComputeSamplers, [:pointer, :uint, :pointer, :uint], :void],
      [:BindGPUComputeStorageTextures, :SDL_BindGPUComputeStorageTextures, [:pointer, :uint, :pointer, :uint], :void],
      [:BindGPUComputeStorageBuffers, :SDL_BindGPUComputeStorageBuffers, [:pointer, :uint, :pointer, :uint], :void],
      [:DispatchGPUCompute, :SDL_DispatchGPUCompute, [:pointer, :uint, :uint, :uint], :void],
      [:DispatchGPUComputeIndirect, :SDL_DispatchGPUComputeIndirect, [:pointer, :pointer, :uint], :void],
      [:EndGPUComputePass, :SDL_EndGPUComputePass, [:pointer], :void],
      [:MapGPUTransferBuffer, :SDL_MapGPUTransferBuffer, [:pointer, :pointer, :bool], :pointer],
      [:UnmapGPUTransferBuffer, :SDL_UnmapGPUTransferBuffer, [:pointer, :pointer], :void],
      [:BeginGPUCopyPass, :SDL_BeginGPUCopyPass, [:pointer], :pointer],
      [:UploadToGPUTexture, :SDL_UploadToGPUTexture, [:pointer, :pointer, :pointer, :bool], :void],
      [:UploadToGPUBuffer, :SDL_UploadToGPUBuffer, [:pointer, :pointer, :pointer, :bool], :void],
      [:CopyGPUTextureToTexture, :SDL_CopyGPUTextureToTexture, [:pointer, :pointer, :pointer, :uint, :uint, :uint, :bool], :void],
      [:CopyGPUBufferToBuffer, :SDL_CopyGPUBufferToBuffer, [:pointer, :pointer, :pointer, :uint, :bool], :void],
      [:DownloadFromGPUTexture, :SDL_DownloadFromGPUTexture, [:pointer, :pointer, :pointer], :void],
      [:DownloadFromGPUBuffer, :SDL_DownloadFromGPUBuffer, [:pointer, :pointer, :pointer], :void],
      [:EndGPUCopyPass, :SDL_EndGPUCopyPass, [:pointer], :void],
      [:GenerateMipmapsForGPUTexture, :SDL_GenerateMipmapsForGPUTexture, [:pointer, :pointer], :void],
      [:BlitGPUTexture, :SDL_BlitGPUTexture, [:pointer, :pointer], :void],
      [:WindowSupportsGPUSwapchainComposition, :SDL_WindowSupportsGPUSwapchainComposition, [:pointer, :pointer, :int], :bool],
      [:WindowSupportsGPUPresentMode, :SDL_WindowSupportsGPUPresentMode, [:pointer, :pointer, :int], :bool],
      [:ClaimWindowForGPUDevice, :SDL_ClaimWindowForGPUDevice, [:pointer, :pointer], :bool],
      [:ReleaseWindowFromGPUDevice, :SDL_ReleaseWindowFromGPUDevice, [:pointer, :pointer], :void],
      [:SetGPUSwapchainParameters, :SDL_SetGPUSwapchainParameters, [:pointer, :pointer, :int, :int], :bool],
      [:SetGPUAllowedFramesInFlight, :SDL_SetGPUAllowedFramesInFlight, [:pointer, :uint], :bool],
      [:GetGPUSwapchainTextureFormat, :SDL_GetGPUSwapchainTextureFormat, [:pointer, :pointer], :int],
      [:AcquireGPUSwapchainTexture, :SDL_AcquireGPUSwapchainTexture, [:pointer, :pointer, :pointer, :pointer, :pointer], :bool],
      [:WaitForGPUSwapchain, :SDL_WaitForGPUSwapchain, [:pointer, :pointer], :bool],
      [:WaitAndAcquireGPUSwapchainTexture, :SDL_WaitAndAcquireGPUSwapchainTexture, [:pointer, :pointer, :pointer, :pointer, :pointer], :bool],
      [:SubmitGPUCommandBuffer, :SDL_SubmitGPUCommandBuffer, [:pointer], :bool],
      [:SubmitGPUCommandBufferAndAcquireFence, :SDL_SubmitGPUCommandBufferAndAcquireFence, [:pointer], :pointer],
      [:CancelGPUCommandBuffer, :SDL_CancelGPUCommandBuffer, [:pointer], :bool],
      [:WaitForGPUIdle, :SDL_WaitForGPUIdle, [:pointer], :bool],
      [:WaitForGPUFences, :SDL_WaitForGPUFences, [:pointer, :bool, :pointer, :uint], :bool],
      [:QueryGPUFence, :SDL_QueryGPUFence, [:pointer, :pointer], :bool],
      [:ReleaseGPUFence, :SDL_ReleaseGPUFence, [:pointer, :pointer], :void],
      [:GPUTextureFormatTexelBlockSize, :SDL_GPUTextureFormatTexelBlockSize, [:int], :uint],
      [:GPUTextureSupportsFormat, :SDL_GPUTextureSupportsFormat, [:pointer, :int, :int, :uint], :bool],
      [:GPUTextureSupportsSampleCount, :SDL_GPUTextureSupportsSampleCount, [:pointer, :int, :int], :bool],
      [:CalculateGPUTextureFormatSize, :SDL_CalculateGPUTextureFormatSize, [:int, :uint, :uint, :uint], :uint],
    ]
    entries.each do |entry|
      attach_function entry[0], entry[1], entry[2], entry[3]
    rescue FFI::NotFoundError => e
      warn "[Warning] Failed to import #{entry[0]} (#{e})." if output_error
    end
  end

end

