# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module SDL
  extend FFI::Library
  # Define/Macro


  # Enum

  HID_API_BUS_UNKNOWN = 0
  HID_API_BUS_USB = 1
  HID_API_BUS_BLUETOOTH = 2
  HID_API_BUS_I2C = 3
  HID_API_BUS_SPI = 4

  # Typedef

  typedef :int, :SDL_hid_bus_type

  # Struct

  class Hid_device_info < FFI::Struct
    layout(
      :path, :pointer,
      :vendor_id, :ushort,
      :product_id, :ushort,
      :serial_number, :pointer,
      :release_number, :ushort,
      :manufacturer_string, :pointer,
      :product_string, :pointer,
      :usage_page, :ushort,
      :usage, :ushort,
      :interface_number, :int,
      :interface_class, :int,
      :interface_subclass, :int,
      :interface_protocol, :int,
      :bus_type, :int,
      :next, :pointer,
    )
  end


  # Function

  def self.setup_hidapi_symbols(output_error = false)
    entries = [
      [:hid_init, :SDL_hid_init, [], :int],
      [:hid_exit, :SDL_hid_exit, [], :int],
      [:hid_device_change_count, :SDL_hid_device_change_count, [], :uint],
      [:hid_enumerate, :SDL_hid_enumerate, [:ushort, :ushort], :pointer],
      [:hid_free_enumeration, :SDL_hid_free_enumeration, [:pointer], :void],
      [:hid_open, :SDL_hid_open, [:ushort, :ushort, :pointer], :pointer],
      [:hid_open_path, :SDL_hid_open_path, [:pointer], :pointer],
      [:hid_write, :SDL_hid_write, [:pointer, :pointer, :ulong_long], :int],
      [:hid_read_timeout, :SDL_hid_read_timeout, [:pointer, :pointer, :ulong_long, :int], :int],
      [:hid_read, :SDL_hid_read, [:pointer, :pointer, :ulong_long], :int],
      [:hid_set_nonblocking, :SDL_hid_set_nonblocking, [:pointer, :int], :int],
      [:hid_send_feature_report, :SDL_hid_send_feature_report, [:pointer, :pointer, :ulong_long], :int],
      [:hid_get_feature_report, :SDL_hid_get_feature_report, [:pointer, :pointer, :ulong_long], :int],
      [:hid_get_input_report, :SDL_hid_get_input_report, [:pointer, :pointer, :ulong_long], :int],
      [:hid_close, :SDL_hid_close, [:pointer], :int],
      [:hid_get_manufacturer_string, :SDL_hid_get_manufacturer_string, [:pointer, :pointer, :ulong_long], :int],
      [:hid_get_product_string, :SDL_hid_get_product_string, [:pointer, :pointer, :ulong_long], :int],
      [:hid_get_serial_number_string, :SDL_hid_get_serial_number_string, [:pointer, :pointer, :ulong_long], :int],
      [:hid_get_indexed_string, :SDL_hid_get_indexed_string, [:pointer, :int, :pointer, :ulong_long], :int],
      [:hid_get_device_info, :SDL_hid_get_device_info, [:pointer], :pointer],
      [:hid_get_report_descriptor, :SDL_hid_get_report_descriptor, [:pointer, :pointer, :ulong_long], :int],
      [:hid_ble_scan, :SDL_hid_ble_scan, [:bool], :void],
    ]
    entries.each do |entry|
      attach_function entry[0], entry[1], entry[2], entry[3]
    rescue FFI::NotFoundError => e
      warn "[Warning] Failed to import #{entry[0]} (#{e})." if output_error
    end
  end

end

