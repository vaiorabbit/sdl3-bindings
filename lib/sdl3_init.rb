# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module SDL
  extend FFI::Library
  # Define/Macro

  INIT_AUDIO = 0x00000010
  INIT_VIDEO = 0x00000020
  INIT_JOYSTICK = 0x00000200
  INIT_HAPTIC = 0x00001000
  INIT_GAMEPAD = 0x00002000
  INIT_EVENTS = 0x00004000
  INIT_SENSOR = 0x00008000
  INIT_CAMERA = 0x00010000
  PROP_APP_METADATA_NAME_STRING = "SDL.app.metadata.name"
  PROP_APP_METADATA_VERSION_STRING = "SDL.app.metadata.version"
  PROP_APP_METADATA_IDENTIFIER_STRING = "SDL.app.metadata.identifier"
  PROP_APP_METADATA_CREATOR_STRING = "SDL.app.metadata.creator"
  PROP_APP_METADATA_COPYRIGHT_STRING = "SDL.app.metadata.copyright"
  PROP_APP_METADATA_URL_STRING = "SDL.app.metadata.url"
  PROP_APP_METADATA_TYPE_STRING = "SDL.app.metadata.type"

  # Enum

  APP_CONTINUE = 0
  APP_SUCCESS = 1
  APP_FAILURE = 2

  # Typedef

  typedef :uint, :SDL_InitFlags
  typedef :int, :SDL_AppResult
  callback :SDL_AppInit_func, [:pointer, :int, :pointer], :int
  callback :SDL_AppIterate_func, [:pointer], :int
  callback :SDL_AppEvent_func, [:pointer, :pointer], :int
  callback :SDL_AppQuit_func, [:pointer, :int], :void
  callback :SDL_MainThreadCallback, [:pointer], :void

  # Struct


  # Function

  def self.setup_init_symbols(output_error = false)
    entries = [
      [:Init, :SDL_Init, [:uint], :bool],
      [:InitSubSystem, :SDL_InitSubSystem, [:uint], :bool],
      [:QuitSubSystem, :SDL_QuitSubSystem, [:uint], :void],
      [:WasInit, :SDL_WasInit, [:uint], :uint],
      [:Quit, :SDL_Quit, [], :void],
      [:IsMainThread, :SDL_IsMainThread, [], :bool],
      [:RunOnMainThread, :SDL_RunOnMainThread, [:SDL_MainThreadCallback, :pointer, :bool], :bool],
      [:SetAppMetadata, :SDL_SetAppMetadata, [:pointer, :pointer, :pointer], :bool],
      [:SetAppMetadataProperty, :SDL_SetAppMetadataProperty, [:pointer, :pointer], :bool],
      [:GetAppMetadataProperty, :SDL_GetAppMetadataProperty, [:pointer], :pointer],
    ]
    entries.each do |entry|
      attach_function entry[0], entry[1], entry[2], entry[3]
    rescue FFI::NotFoundError => e
      warn "[Warning] Failed to import #{entry[0]} (#{e})." if output_error
    end
  end

end

