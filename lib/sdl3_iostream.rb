# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module SDL
  extend FFI::Library
  # Define/Macro

  PROP_IOSTREAM_WINDOWS_HANDLE_POINTER = "SDL.iostream.windows.handle"
  PROP_IOSTREAM_STDIO_FILE_POINTER = "SDL.iostream.stdio.file"
  PROP_IOSTREAM_FILE_DESCRIPTOR_NUMBER = "SDL.iostream.file_descriptor"
  PROP_IOSTREAM_ANDROID_AASSET_POINTER = "SDL.iostream.android.aasset"
  PROP_IOSTREAM_MEMORY_POINTER = "SDL.iostream.memory.base"
  PROP_IOSTREAM_MEMORY_SIZE_NUMBER = "SDL.iostream.memory.size"
  PROP_IOSTREAM_DYNAMIC_MEMORY_POINTER = "SDL.iostream.dynamic.memory"
  PROP_IOSTREAM_DYNAMIC_CHUNKSIZE_NUMBER = "SDL.iostream.dynamic.chunksize"

  # Enum

  IO_STATUS_READY = 0
  IO_STATUS_ERROR = 1
  IO_STATUS_EOF = 2
  IO_STATUS_NOT_READY = 3
  IO_STATUS_READONLY = 4
  IO_STATUS_WRITEONLY = 5
  IO_SEEK_SET = 0
  IO_SEEK_CUR = 1
  IO_SEEK_END = 2

  # Typedef

  typedef :int, :SDL_IOStatus
  typedef :int, :SDL_IOWhence

  # Struct

  class IOStreamInterface < FFI::Struct
    layout(
      :version, :uint,
      :size, :pointer,
      :seek, :pointer,
      :read, :pointer,
      :write, :pointer,
      :flush, :pointer,
      :close, :pointer,
    )
  end


  # Function

  def self.setup_iostream_symbols(output_error = false)
    symbols = [
      :SDL_IOFromFile,
      :SDL_IOFromMem,
      :SDL_IOFromConstMem,
      :SDL_IOFromDynamicMem,
      :SDL_OpenIO,
      :SDL_CloseIO,
      :SDL_GetIOProperties,
      :SDL_GetIOStatus,
      :SDL_GetIOSize,
      :SDL_SeekIO,
      :SDL_TellIO,
      :SDL_ReadIO,
      :SDL_WriteIO,
      :SDL_IOprintf,
      :SDL_IOvprintf,
      :SDL_FlushIO,
      :SDL_LoadFile_IO,
      :SDL_LoadFile,
      :SDL_SaveFile_IO,
      :SDL_SaveFile,
      :SDL_ReadU8,
      :SDL_ReadS8,
      :SDL_ReadU16LE,
      :SDL_ReadS16LE,
      :SDL_ReadU16BE,
      :SDL_ReadS16BE,
      :SDL_ReadU32LE,
      :SDL_ReadS32LE,
      :SDL_ReadU32BE,
      :SDL_ReadS32BE,
      :SDL_ReadU64LE,
      :SDL_ReadS64LE,
      :SDL_ReadU64BE,
      :SDL_ReadS64BE,
      :SDL_WriteU8,
      :SDL_WriteS8,
      :SDL_WriteU16LE,
      :SDL_WriteS16LE,
      :SDL_WriteU16BE,
      :SDL_WriteS16BE,
      :SDL_WriteU32LE,
      :SDL_WriteS32LE,
      :SDL_WriteU32BE,
      :SDL_WriteS32BE,
      :SDL_WriteU64LE,
      :SDL_WriteS64LE,
      :SDL_WriteU64BE,
      :SDL_WriteS64BE,
    ]
    apis = {
      :SDL_IOFromFile => :IOFromFile,
      :SDL_IOFromMem => :IOFromMem,
      :SDL_IOFromConstMem => :IOFromConstMem,
      :SDL_IOFromDynamicMem => :IOFromDynamicMem,
      :SDL_OpenIO => :OpenIO,
      :SDL_CloseIO => :CloseIO,
      :SDL_GetIOProperties => :GetIOProperties,
      :SDL_GetIOStatus => :GetIOStatus,
      :SDL_GetIOSize => :GetIOSize,
      :SDL_SeekIO => :SeekIO,
      :SDL_TellIO => :TellIO,
      :SDL_ReadIO => :ReadIO,
      :SDL_WriteIO => :WriteIO,
      :SDL_IOprintf => :IOprintf,
      :SDL_IOvprintf => :IOvprintf,
      :SDL_FlushIO => :FlushIO,
      :SDL_LoadFile_IO => :LoadFile_IO,
      :SDL_LoadFile => :LoadFile,
      :SDL_SaveFile_IO => :SaveFile_IO,
      :SDL_SaveFile => :SaveFile,
      :SDL_ReadU8 => :ReadU8,
      :SDL_ReadS8 => :ReadS8,
      :SDL_ReadU16LE => :ReadU16LE,
      :SDL_ReadS16LE => :ReadS16LE,
      :SDL_ReadU16BE => :ReadU16BE,
      :SDL_ReadS16BE => :ReadS16BE,
      :SDL_ReadU32LE => :ReadU32LE,
      :SDL_ReadS32LE => :ReadS32LE,
      :SDL_ReadU32BE => :ReadU32BE,
      :SDL_ReadS32BE => :ReadS32BE,
      :SDL_ReadU64LE => :ReadU64LE,
      :SDL_ReadS64LE => :ReadS64LE,
      :SDL_ReadU64BE => :ReadU64BE,
      :SDL_ReadS64BE => :ReadS64BE,
      :SDL_WriteU8 => :WriteU8,
      :SDL_WriteS8 => :WriteS8,
      :SDL_WriteU16LE => :WriteU16LE,
      :SDL_WriteS16LE => :WriteS16LE,
      :SDL_WriteU16BE => :WriteU16BE,
      :SDL_WriteS16BE => :WriteS16BE,
      :SDL_WriteU32LE => :WriteU32LE,
      :SDL_WriteS32LE => :WriteS32LE,
      :SDL_WriteU32BE => :WriteU32BE,
      :SDL_WriteS32BE => :WriteS32BE,
      :SDL_WriteU64LE => :WriteU64LE,
      :SDL_WriteS64LE => :WriteS64LE,
      :SDL_WriteU64BE => :WriteU64BE,
      :SDL_WriteS64BE => :WriteS64BE,
    }
    args = {
      :SDL_IOFromFile => [:pointer, :pointer],
      :SDL_IOFromMem => [:pointer, :ulong_long],
      :SDL_IOFromConstMem => [:pointer, :ulong_long],
      :SDL_IOFromDynamicMem => [],
      :SDL_OpenIO => [:pointer, :pointer],
      :SDL_CloseIO => [:pointer],
      :SDL_GetIOProperties => [:pointer],
      :SDL_GetIOStatus => [:pointer],
      :SDL_GetIOSize => [:pointer],
      :SDL_SeekIO => [:pointer, :long_long, :int],
      :SDL_TellIO => [:pointer],
      :SDL_ReadIO => [:pointer, :pointer, :ulong_long],
      :SDL_WriteIO => [:pointer, :pointer, :ulong_long],
      :SDL_IOprintf => [:pointer, :pointer],
      :SDL_IOvprintf => [:pointer, :pointer, :pointer],
      :SDL_FlushIO => [:pointer],
      :SDL_LoadFile_IO => [:pointer, :pointer, :bool],
      :SDL_LoadFile => [:pointer, :pointer],
      :SDL_SaveFile_IO => [:pointer, :pointer, :ulong_long, :bool],
      :SDL_SaveFile => [:pointer, :pointer, :ulong_long],
      :SDL_ReadU8 => [:pointer, :pointer],
      :SDL_ReadS8 => [:pointer, :pointer],
      :SDL_ReadU16LE => [:pointer, :pointer],
      :SDL_ReadS16LE => [:pointer, :pointer],
      :SDL_ReadU16BE => [:pointer, :pointer],
      :SDL_ReadS16BE => [:pointer, :pointer],
      :SDL_ReadU32LE => [:pointer, :pointer],
      :SDL_ReadS32LE => [:pointer, :pointer],
      :SDL_ReadU32BE => [:pointer, :pointer],
      :SDL_ReadS32BE => [:pointer, :pointer],
      :SDL_ReadU64LE => [:pointer, :pointer],
      :SDL_ReadS64LE => [:pointer, :pointer],
      :SDL_ReadU64BE => [:pointer, :pointer],
      :SDL_ReadS64BE => [:pointer, :pointer],
      :SDL_WriteU8 => [:pointer, :uchar],
      :SDL_WriteS8 => [:pointer, :char],
      :SDL_WriteU16LE => [:pointer, :ushort],
      :SDL_WriteS16LE => [:pointer, :short],
      :SDL_WriteU16BE => [:pointer, :ushort],
      :SDL_WriteS16BE => [:pointer, :short],
      :SDL_WriteU32LE => [:pointer, :uint],
      :SDL_WriteS32LE => [:pointer, :int],
      :SDL_WriteU32BE => [:pointer, :uint],
      :SDL_WriteS32BE => [:pointer, :int],
      :SDL_WriteU64LE => [:pointer, :ulong_long],
      :SDL_WriteS64LE => [:pointer, :long_long],
      :SDL_WriteU64BE => [:pointer, :ulong_long],
      :SDL_WriteS64BE => [:pointer, :long_long],
    }
    retvals = {
      :SDL_IOFromFile => :pointer,
      :SDL_IOFromMem => :pointer,
      :SDL_IOFromConstMem => :pointer,
      :SDL_IOFromDynamicMem => :pointer,
      :SDL_OpenIO => :pointer,
      :SDL_CloseIO => :bool,
      :SDL_GetIOProperties => :uint,
      :SDL_GetIOStatus => :int,
      :SDL_GetIOSize => :long_long,
      :SDL_SeekIO => :long_long,
      :SDL_TellIO => :long_long,
      :SDL_ReadIO => :ulong_long,
      :SDL_WriteIO => :ulong_long,
      :SDL_IOprintf => :ulong_long,
      :SDL_IOvprintf => :ulong_long,
      :SDL_FlushIO => :bool,
      :SDL_LoadFile_IO => :pointer,
      :SDL_LoadFile => :pointer,
      :SDL_SaveFile_IO => :bool,
      :SDL_SaveFile => :bool,
      :SDL_ReadU8 => :bool,
      :SDL_ReadS8 => :bool,
      :SDL_ReadU16LE => :bool,
      :SDL_ReadS16LE => :bool,
      :SDL_ReadU16BE => :bool,
      :SDL_ReadS16BE => :bool,
      :SDL_ReadU32LE => :bool,
      :SDL_ReadS32LE => :bool,
      :SDL_ReadU32BE => :bool,
      :SDL_ReadS32BE => :bool,
      :SDL_ReadU64LE => :bool,
      :SDL_ReadS64LE => :bool,
      :SDL_ReadU64BE => :bool,
      :SDL_ReadS64BE => :bool,
      :SDL_WriteU8 => :bool,
      :SDL_WriteS8 => :bool,
      :SDL_WriteU16LE => :bool,
      :SDL_WriteS16LE => :bool,
      :SDL_WriteU16BE => :bool,
      :SDL_WriteS16BE => :bool,
      :SDL_WriteU32LE => :bool,
      :SDL_WriteS32LE => :bool,
      :SDL_WriteU32BE => :bool,
      :SDL_WriteS32BE => :bool,
      :SDL_WriteU64LE => :bool,
      :SDL_WriteS64LE => :bool,
      :SDL_WriteU64BE => :bool,
      :SDL_WriteS64BE => :bool,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

