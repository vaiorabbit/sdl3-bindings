# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module SDL
  extend FFI::Library
  # Define/Macro

  PROP_IOSTREAM_WINDOWS_HANDLE_POINTER = "SDL.iostream.windows.handle"
  PROP_IOSTREAM_STDIO_FILE_POINTER = "SDL.iostream.stdio.file"
  PROP_IOSTREAM_FILE_DESCRIPTOR_NUMBER = "SDL.iostream.file_descriptor"
  PROP_IOSTREAM_ANDROID_AASSET_POINTER = "SDL.iostream.android.aasset"
  PROP_IOSTREAM_MEMORY_POINTER = "SDL.iostream.memory.base"
  PROP_IOSTREAM_MEMORY_SIZE_NUMBER = "SDL.iostream.memory.size"
  PROP_IOSTREAM_DYNAMIC_MEMORY_POINTER = "SDL.iostream.dynamic.memory"
  PROP_IOSTREAM_DYNAMIC_CHUNKSIZE_NUMBER = "SDL.iostream.dynamic.chunksize"

  # Enum

  IO_STATUS_READY = 0
  IO_STATUS_ERROR = 1
  IO_STATUS_EOF = 2
  IO_STATUS_NOT_READY = 3
  IO_STATUS_READONLY = 4
  IO_STATUS_WRITEONLY = 5
  IO_SEEK_SET = 0
  IO_SEEK_CUR = 1
  IO_SEEK_END = 2

  # Typedef

  typedef :int, :SDL_IOStatus
  typedef :int, :SDL_IOWhence

  # Struct

  class IOStreamInterface < FFI::Struct
    layout(
      :version, :uint,
      :size, :pointer,
      :seek, :pointer,
      :read, :pointer,
      :write, :pointer,
      :flush, :pointer,
      :close, :pointer,
    )
  end


  # Function

  def self.setup_iostream_symbols(output_error = false)
    entries = [
      [:IOFromFile, :SDL_IOFromFile, [:pointer, :pointer], :pointer],
      [:IOFromMem, :SDL_IOFromMem, [:pointer, :ulong_long], :pointer],
      [:IOFromConstMem, :SDL_IOFromConstMem, [:pointer, :ulong_long], :pointer],
      [:IOFromDynamicMem, :SDL_IOFromDynamicMem, [], :pointer],
      [:OpenIO, :SDL_OpenIO, [:pointer, :pointer], :pointer],
      [:CloseIO, :SDL_CloseIO, [:pointer], :bool],
      [:GetIOProperties, :SDL_GetIOProperties, [:pointer], :uint],
      [:GetIOStatus, :SDL_GetIOStatus, [:pointer], :int],
      [:GetIOSize, :SDL_GetIOSize, [:pointer], :long_long],
      [:SeekIO, :SDL_SeekIO, [:pointer, :long_long, :int], :long_long],
      [:TellIO, :SDL_TellIO, [:pointer], :long_long],
      [:ReadIO, :SDL_ReadIO, [:pointer, :pointer, :ulong_long], :ulong_long],
      [:WriteIO, :SDL_WriteIO, [:pointer, :pointer, :ulong_long], :ulong_long],
      [:IOprintf, :SDL_IOprintf, [:pointer, :pointer], :ulong_long],
      [:IOvprintf, :SDL_IOvprintf, [:pointer, :pointer, :pointer], :ulong_long],
      [:FlushIO, :SDL_FlushIO, [:pointer], :bool],
      [:LoadFile_IO, :SDL_LoadFile_IO, [:pointer, :pointer, :bool], :pointer],
      [:LoadFile, :SDL_LoadFile, [:pointer, :pointer], :pointer],
      [:SaveFile_IO, :SDL_SaveFile_IO, [:pointer, :pointer, :ulong_long, :bool], :bool],
      [:SaveFile, :SDL_SaveFile, [:pointer, :pointer, :ulong_long], :bool],
      [:ReadU8, :SDL_ReadU8, [:pointer, :pointer], :bool],
      [:ReadS8, :SDL_ReadS8, [:pointer, :pointer], :bool],
      [:ReadU16LE, :SDL_ReadU16LE, [:pointer, :pointer], :bool],
      [:ReadS16LE, :SDL_ReadS16LE, [:pointer, :pointer], :bool],
      [:ReadU16BE, :SDL_ReadU16BE, [:pointer, :pointer], :bool],
      [:ReadS16BE, :SDL_ReadS16BE, [:pointer, :pointer], :bool],
      [:ReadU32LE, :SDL_ReadU32LE, [:pointer, :pointer], :bool],
      [:ReadS32LE, :SDL_ReadS32LE, [:pointer, :pointer], :bool],
      [:ReadU32BE, :SDL_ReadU32BE, [:pointer, :pointer], :bool],
      [:ReadS32BE, :SDL_ReadS32BE, [:pointer, :pointer], :bool],
      [:ReadU64LE, :SDL_ReadU64LE, [:pointer, :pointer], :bool],
      [:ReadS64LE, :SDL_ReadS64LE, [:pointer, :pointer], :bool],
      [:ReadU64BE, :SDL_ReadU64BE, [:pointer, :pointer], :bool],
      [:ReadS64BE, :SDL_ReadS64BE, [:pointer, :pointer], :bool],
      [:WriteU8, :SDL_WriteU8, [:pointer, :uchar], :bool],
      [:WriteS8, :SDL_WriteS8, [:pointer, :char], :bool],
      [:WriteU16LE, :SDL_WriteU16LE, [:pointer, :ushort], :bool],
      [:WriteS16LE, :SDL_WriteS16LE, [:pointer, :short], :bool],
      [:WriteU16BE, :SDL_WriteU16BE, [:pointer, :ushort], :bool],
      [:WriteS16BE, :SDL_WriteS16BE, [:pointer, :short], :bool],
      [:WriteU32LE, :SDL_WriteU32LE, [:pointer, :uint], :bool],
      [:WriteS32LE, :SDL_WriteS32LE, [:pointer, :int], :bool],
      [:WriteU32BE, :SDL_WriteU32BE, [:pointer, :uint], :bool],
      [:WriteS32BE, :SDL_WriteS32BE, [:pointer, :int], :bool],
      [:WriteU64LE, :SDL_WriteU64LE, [:pointer, :ulong_long], :bool],
      [:WriteS64LE, :SDL_WriteS64LE, [:pointer, :long_long], :bool],
      [:WriteU64BE, :SDL_WriteU64BE, [:pointer, :ulong_long], :bool],
      [:WriteS64BE, :SDL_WriteS64BE, [:pointer, :long_long], :bool],
    ]
    entries.each do |entry|
      attach_function entry[0], entry[1], entry[2], entry[3]
    rescue FFI::NotFoundError => e
      warn "[Warning] Failed to import #{entry[0]} (#{e})." if output_error
    end
  end

end

