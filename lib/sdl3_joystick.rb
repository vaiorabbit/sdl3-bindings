# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'sdl3_guid'

module SDL
  extend FFI::Library
  # Define/Macro

  JOYSTICK_AXIS_MAX = 32767
  JOYSTICK_AXIS_MIN = -32768
  PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN = "SDL.joystick.cap.mono_led"
  PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN = "SDL.joystick.cap.rgb_led"
  PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN = "SDL.joystick.cap.player_led"
  PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN = "SDL.joystick.cap.rumble"
  PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN = "SDL.joystick.cap.trigger_rumble"
  HAT_CENTERED = 0x00
  HAT_UP = 0x01
  HAT_RIGHT = 0x02
  HAT_DOWN = 0x04
  HAT_LEFT = 0x08
  HAT_RIGHTUP = (HAT_RIGHT | HAT_UP)
  HAT_RIGHTDOWN = (HAT_RIGHT | HAT_DOWN)
  HAT_LEFTUP = (HAT_LEFT | HAT_UP)
  HAT_LEFTDOWN = (HAT_LEFT | HAT_DOWN)

  # Enum

  JOYSTICK_TYPE_UNKNOWN = 0
  JOYSTICK_TYPE_GAMEPAD = 1
  JOYSTICK_TYPE_WHEEL = 2
  JOYSTICK_TYPE_ARCADE_STICK = 3
  JOYSTICK_TYPE_FLIGHT_STICK = 4
  JOYSTICK_TYPE_DANCE_PAD = 5
  JOYSTICK_TYPE_GUITAR = 6
  JOYSTICK_TYPE_DRUM_KIT = 7
  JOYSTICK_TYPE_ARCADE_PAD = 8
  JOYSTICK_TYPE_THROTTLE = 9
  JOYSTICK_TYPE_COUNT = 10
  JOYSTICK_CONNECTION_INVALID = -1
  JOYSTICK_CONNECTION_UNKNOWN = 0
  JOYSTICK_CONNECTION_WIRED = 1
  JOYSTICK_CONNECTION_WIRELESS = 2

  # Typedef

  typedef :uint, :SDL_JoystickID
  typedef :int, :SDL_JoystickType
  typedef :int, :SDL_JoystickConnectionState

  # Struct

  class VirtualJoystickTouchpadDesc < FFI::Struct
    layout(
      :nfingers, :ushort,
      :padding, [:ushort, 3],
    )
  end

  class VirtualJoystickSensorDesc < FFI::Struct
    layout(
      :type, :int,
      :rate, :float,
    )
  end

  class VirtualJoystickDesc < FFI::Struct
    layout(
      :version, :uint,
      :type, :ushort,
      :padding, :ushort,
      :vendor_id, :ushort,
      :product_id, :ushort,
      :naxes, :ushort,
      :nbuttons, :ushort,
      :nballs, :ushort,
      :nhats, :ushort,
      :ntouchpads, :ushort,
      :nsensors, :ushort,
      :padding2, [:ushort, 2],
      :button_mask, :uint,
      :axis_mask, :uint,
      :name, :pointer,
      :touchpads, :pointer,
      :sensors, :pointer,
      :userdata, :pointer,
      :Update, :pointer,
      :SetPlayerIndex, :pointer,
      :Rumble, :pointer,
      :RumbleTriggers, :pointer,
      :SetLED, :pointer,
      :SendEffect, :pointer,
      :SetSensorsEnabled, :pointer,
      :Cleanup, :pointer,
    )
  end


  # Function

  def self.setup_joystick_symbols(output_error = false)
    entries = [
      [:LockJoysticks, :SDL_LockJoysticks, [], :void],
      [:UnlockJoysticks, :SDL_UnlockJoysticks, [], :void],
      [:HasJoystick, :SDL_HasJoystick, [], :bool],
      [:GetJoysticks, :SDL_GetJoysticks, [:pointer], :pointer],
      [:GetJoystickNameForID, :SDL_GetJoystickNameForID, [:uint], :pointer],
      [:GetJoystickPathForID, :SDL_GetJoystickPathForID, [:uint], :pointer],
      [:GetJoystickPlayerIndexForID, :SDL_GetJoystickPlayerIndexForID, [:uint], :int],
      [:GetJoystickGUIDForID, :SDL_GetJoystickGUIDForID, [:uint], GUID.by_value],
      [:GetJoystickVendorForID, :SDL_GetJoystickVendorForID, [:uint], :ushort],
      [:GetJoystickProductForID, :SDL_GetJoystickProductForID, [:uint], :ushort],
      [:GetJoystickProductVersionForID, :SDL_GetJoystickProductVersionForID, [:uint], :ushort],
      [:GetJoystickTypeForID, :SDL_GetJoystickTypeForID, [:uint], :int],
      [:OpenJoystick, :SDL_OpenJoystick, [:uint], :pointer],
      [:GetJoystickFromID, :SDL_GetJoystickFromID, [:uint], :pointer],
      [:GetJoystickFromPlayerIndex, :SDL_GetJoystickFromPlayerIndex, [:int], :pointer],
      [:AttachVirtualJoystick, :SDL_AttachVirtualJoystick, [:pointer], :uint],
      [:DetachVirtualJoystick, :SDL_DetachVirtualJoystick, [:uint], :bool],
      [:IsJoystickVirtual, :SDL_IsJoystickVirtual, [:uint], :bool],
      [:SetJoystickVirtualAxis, :SDL_SetJoystickVirtualAxis, [:pointer, :int, :short], :bool],
      [:SetJoystickVirtualBall, :SDL_SetJoystickVirtualBall, [:pointer, :int, :short, :short], :bool],
      [:SetJoystickVirtualButton, :SDL_SetJoystickVirtualButton, [:pointer, :int, :bool], :bool],
      [:SetJoystickVirtualHat, :SDL_SetJoystickVirtualHat, [:pointer, :int, :uchar], :bool],
      [:SetJoystickVirtualTouchpad, :SDL_SetJoystickVirtualTouchpad, [:pointer, :int, :int, :bool, :float, :float, :float], :bool],
      [:SendJoystickVirtualSensorData, :SDL_SendJoystickVirtualSensorData, [:pointer, :int, :ulong_long, :pointer, :int], :bool],
      [:GetJoystickProperties, :SDL_GetJoystickProperties, [:pointer], :uint],
      [:GetJoystickName, :SDL_GetJoystickName, [:pointer], :pointer],
      [:GetJoystickPath, :SDL_GetJoystickPath, [:pointer], :pointer],
      [:GetJoystickPlayerIndex, :SDL_GetJoystickPlayerIndex, [:pointer], :int],
      [:SetJoystickPlayerIndex, :SDL_SetJoystickPlayerIndex, [:pointer, :int], :bool],
      [:GetJoystickGUID, :SDL_GetJoystickGUID, [:pointer], GUID.by_value],
      [:GetJoystickVendor, :SDL_GetJoystickVendor, [:pointer], :ushort],
      [:GetJoystickProduct, :SDL_GetJoystickProduct, [:pointer], :ushort],
      [:GetJoystickProductVersion, :SDL_GetJoystickProductVersion, [:pointer], :ushort],
      [:GetJoystickFirmwareVersion, :SDL_GetJoystickFirmwareVersion, [:pointer], :ushort],
      [:GetJoystickSerial, :SDL_GetJoystickSerial, [:pointer], :pointer],
      [:GetJoystickType, :SDL_GetJoystickType, [:pointer], :int],
      [:GetJoystickGUIDInfo, :SDL_GetJoystickGUIDInfo, [GUID.by_value, :pointer, :pointer, :pointer, :pointer], :void],
      [:JoystickConnected, :SDL_JoystickConnected, [:pointer], :bool],
      [:GetJoystickID, :SDL_GetJoystickID, [:pointer], :uint],
      [:GetNumJoystickAxes, :SDL_GetNumJoystickAxes, [:pointer], :int],
      [:GetNumJoystickBalls, :SDL_GetNumJoystickBalls, [:pointer], :int],
      [:GetNumJoystickHats, :SDL_GetNumJoystickHats, [:pointer], :int],
      [:GetNumJoystickButtons, :SDL_GetNumJoystickButtons, [:pointer], :int],
      [:SetJoystickEventsEnabled, :SDL_SetJoystickEventsEnabled, [:bool], :void],
      [:JoystickEventsEnabled, :SDL_JoystickEventsEnabled, [], :bool],
      [:UpdateJoysticks, :SDL_UpdateJoysticks, [], :void],
      [:GetJoystickAxis, :SDL_GetJoystickAxis, [:pointer, :int], :short],
      [:GetJoystickAxisInitialState, :SDL_GetJoystickAxisInitialState, [:pointer, :int, :pointer], :bool],
      [:GetJoystickBall, :SDL_GetJoystickBall, [:pointer, :int, :pointer, :pointer], :bool],
      [:GetJoystickHat, :SDL_GetJoystickHat, [:pointer, :int], :uchar],
      [:GetJoystickButton, :SDL_GetJoystickButton, [:pointer, :int], :bool],
      [:RumbleJoystick, :SDL_RumbleJoystick, [:pointer, :ushort, :ushort, :uint], :bool],
      [:RumbleJoystickTriggers, :SDL_RumbleJoystickTriggers, [:pointer, :ushort, :ushort, :uint], :bool],
      [:SetJoystickLED, :SDL_SetJoystickLED, [:pointer, :uchar, :uchar, :uchar], :bool],
      [:SendJoystickEffect, :SDL_SendJoystickEffect, [:pointer, :pointer, :int], :bool],
      [:CloseJoystick, :SDL_CloseJoystick, [:pointer], :void],
      [:GetJoystickConnectionState, :SDL_GetJoystickConnectionState, [:pointer], :int],
      [:GetJoystickPowerInfo, :SDL_GetJoystickPowerInfo, [:pointer, :pointer], :int],
    ]
    entries.each do |entry|
      attach_function entry[0], entry[1], entry[2], entry[3]
    rescue FFI::NotFoundError => e
      warn "[Warning] Failed to import #{entry[0]} (#{e})." if output_error
    end
  end

end

