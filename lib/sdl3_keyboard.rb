# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module SDL
  extend FFI::Library
  # Define/Macro

  PROP_TEXTINPUT_TYPE_NUMBER = "SDL.textinput.type"
  PROP_TEXTINPUT_CAPITALIZATION_NUMBER = "SDL.textinput.capitalization"
  PROP_TEXTINPUT_AUTOCORRECT_BOOLEAN = "SDL.textinput.autocorrect"
  PROP_TEXTINPUT_MULTILINE_BOOLEAN = "SDL.textinput.multiline"
  PROP_TEXTINPUT_ANDROID_INPUTTYPE_NUMBER = "SDL.textinput.android.inputtype"

  # Enum

  TEXTINPUT_TYPE_TEXT = 0
  TEXTINPUT_TYPE_TEXT_NAME = 1
  TEXTINPUT_TYPE_TEXT_EMAIL = 2
  TEXTINPUT_TYPE_TEXT_USERNAME = 3
  TEXTINPUT_TYPE_TEXT_PASSWORD_HIDDEN = 4
  TEXTINPUT_TYPE_TEXT_PASSWORD_VISIBLE = 5
  TEXTINPUT_TYPE_NUMBER = 6
  TEXTINPUT_TYPE_NUMBER_PASSWORD_HIDDEN = 7
  TEXTINPUT_TYPE_NUMBER_PASSWORD_VISIBLE = 8
  CAPITALIZE_NONE = 0
  CAPITALIZE_SENTENCES = 1
  CAPITALIZE_WORDS = 2
  CAPITALIZE_LETTERS = 3

  # Typedef

  typedef :uint, :SDL_KeyboardID
  typedef :int, :SDL_TextInputType
  typedef :int, :SDL_Capitalization

  # Struct


  # Function

  def self.setup_keyboard_symbols(output_error = false)
    symbols = [
      :SDL_HasKeyboard,
      :SDL_GetKeyboards,
      :SDL_GetKeyboardNameForID,
      :SDL_GetKeyboardFocus,
      :SDL_GetKeyboardState,
      :SDL_ResetKeyboard,
      :SDL_GetModState,
      :SDL_SetModState,
      :SDL_GetKeyFromScancode,
      :SDL_GetScancodeFromKey,
      :SDL_SetScancodeName,
      :SDL_GetScancodeName,
      :SDL_GetScancodeFromName,
      :SDL_GetKeyName,
      :SDL_GetKeyFromName,
      :SDL_StartTextInput,
      :SDL_StartTextInputWithProperties,
      :SDL_TextInputActive,
      :SDL_StopTextInput,
      :SDL_ClearComposition,
      :SDL_SetTextInputArea,
      :SDL_GetTextInputArea,
      :SDL_HasScreenKeyboardSupport,
      :SDL_ScreenKeyboardShown,
    ]
    apis = {
      :SDL_HasKeyboard => :HasKeyboard,
      :SDL_GetKeyboards => :GetKeyboards,
      :SDL_GetKeyboardNameForID => :GetKeyboardNameForID,
      :SDL_GetKeyboardFocus => :GetKeyboardFocus,
      :SDL_GetKeyboardState => :GetKeyboardState,
      :SDL_ResetKeyboard => :ResetKeyboard,
      :SDL_GetModState => :GetModState,
      :SDL_SetModState => :SetModState,
      :SDL_GetKeyFromScancode => :GetKeyFromScancode,
      :SDL_GetScancodeFromKey => :GetScancodeFromKey,
      :SDL_SetScancodeName => :SetScancodeName,
      :SDL_GetScancodeName => :GetScancodeName,
      :SDL_GetScancodeFromName => :GetScancodeFromName,
      :SDL_GetKeyName => :GetKeyName,
      :SDL_GetKeyFromName => :GetKeyFromName,
      :SDL_StartTextInput => :StartTextInput,
      :SDL_StartTextInputWithProperties => :StartTextInputWithProperties,
      :SDL_TextInputActive => :TextInputActive,
      :SDL_StopTextInput => :StopTextInput,
      :SDL_ClearComposition => :ClearComposition,
      :SDL_SetTextInputArea => :SetTextInputArea,
      :SDL_GetTextInputArea => :GetTextInputArea,
      :SDL_HasScreenKeyboardSupport => :HasScreenKeyboardSupport,
      :SDL_ScreenKeyboardShown => :ScreenKeyboardShown,
    }
    args = {
      :SDL_HasKeyboard => [],
      :SDL_GetKeyboards => [:pointer],
      :SDL_GetKeyboardNameForID => [:uint],
      :SDL_GetKeyboardFocus => [],
      :SDL_GetKeyboardState => [:pointer],
      :SDL_ResetKeyboard => [],
      :SDL_GetModState => [],
      :SDL_SetModState => [:ushort],
      :SDL_GetKeyFromScancode => [:int, :ushort, :bool],
      :SDL_GetScancodeFromKey => [:uint, :pointer],
      :SDL_SetScancodeName => [:int, :pointer],
      :SDL_GetScancodeName => [:int],
      :SDL_GetScancodeFromName => [:pointer],
      :SDL_GetKeyName => [:uint],
      :SDL_GetKeyFromName => [:pointer],
      :SDL_StartTextInput => [:pointer],
      :SDL_StartTextInputWithProperties => [:pointer, :uint],
      :SDL_TextInputActive => [:pointer],
      :SDL_StopTextInput => [:pointer],
      :SDL_ClearComposition => [:pointer],
      :SDL_SetTextInputArea => [:pointer, :pointer, :int],
      :SDL_GetTextInputArea => [:pointer, :pointer, :pointer],
      :SDL_HasScreenKeyboardSupport => [],
      :SDL_ScreenKeyboardShown => [:pointer],
    }
    retvals = {
      :SDL_HasKeyboard => :bool,
      :SDL_GetKeyboards => :pointer,
      :SDL_GetKeyboardNameForID => :pointer,
      :SDL_GetKeyboardFocus => :pointer,
      :SDL_GetKeyboardState => :pointer,
      :SDL_ResetKeyboard => :void,
      :SDL_GetModState => :ushort,
      :SDL_SetModState => :void,
      :SDL_GetKeyFromScancode => :uint,
      :SDL_GetScancodeFromKey => :int,
      :SDL_SetScancodeName => :bool,
      :SDL_GetScancodeName => :pointer,
      :SDL_GetScancodeFromName => :int,
      :SDL_GetKeyName => :pointer,
      :SDL_GetKeyFromName => :uint,
      :SDL_StartTextInput => :bool,
      :SDL_StartTextInputWithProperties => :bool,
      :SDL_TextInputActive => :bool,
      :SDL_StopTextInput => :bool,
      :SDL_ClearComposition => :bool,
      :SDL_SetTextInputArea => :bool,
      :SDL_GetTextInputArea => :bool,
      :SDL_HasScreenKeyboardSupport => :bool,
      :SDL_ScreenKeyboardShown => :bool,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

