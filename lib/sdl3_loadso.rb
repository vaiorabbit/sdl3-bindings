# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module SDL
  extend FFI::Library
  # Define/Macro


  # Enum


  # Typedef


  # Struct


  # Function

  def self.setup_loadso_symbols(output_error = false)
    symbols = [
      :SDL_LoadObject,
      :SDL_LoadFunction,
      :SDL_UnloadObject,
    ]
    apis = {
      :SDL_LoadObject => :LoadObject,
      :SDL_LoadFunction => :LoadFunction,
      :SDL_UnloadObject => :UnloadObject,
    }
    args = {
      :SDL_LoadObject => [:pointer],
      :SDL_LoadFunction => [:pointer, :pointer],
      :SDL_UnloadObject => [:pointer],
    }
    retvals = {
      :SDL_LoadObject => :pointer,
      :SDL_LoadFunction => :pointer,
      :SDL_UnloadObject => :void,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

