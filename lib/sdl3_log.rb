# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module SDL
  extend FFI::Library
  # Define/Macro


  # Enum

  LOG_CATEGORY_APPLICATION = 0
  LOG_CATEGORY_ERROR = 1
  LOG_CATEGORY_ASSERT = 2
  LOG_CATEGORY_SYSTEM = 3
  LOG_CATEGORY_AUDIO = 4
  LOG_CATEGORY_VIDEO = 5
  LOG_CATEGORY_RENDER = 6
  LOG_CATEGORY_INPUT = 7
  LOG_CATEGORY_TEST = 8
  LOG_CATEGORY_GPU = 9
  LOG_CATEGORY_RESERVED2 = 10
  LOG_CATEGORY_RESERVED3 = 11
  LOG_CATEGORY_RESERVED4 = 12
  LOG_CATEGORY_RESERVED5 = 13
  LOG_CATEGORY_RESERVED6 = 14
  LOG_CATEGORY_RESERVED7 = 15
  LOG_CATEGORY_RESERVED8 = 16
  LOG_CATEGORY_RESERVED9 = 17
  LOG_CATEGORY_RESERVED10 = 18
  LOG_CATEGORY_CUSTOM = 19
  LOG_PRIORITY_INVALID = 0
  LOG_PRIORITY_TRACE = 1
  LOG_PRIORITY_VERBOSE = 2
  LOG_PRIORITY_DEBUG = 3
  LOG_PRIORITY_INFO = 4
  LOG_PRIORITY_WARN = 5
  LOG_PRIORITY_ERROR = 6
  LOG_PRIORITY_CRITICAL = 7
  LOG_PRIORITY_COUNT = 8

  # Typedef

  typedef :int, :SDL_LogCategory
  typedef :int, :SDL_LogPriority
  callback :SDL_LogOutputFunction, [:pointer, :int, :int, :pointer], :void

  # Struct


  # Function

  def self.setup_log_symbols(output_error = false)
    entries = [
      [:SetLogPriorities, :SDL_SetLogPriorities, [:int], :void],
      [:SetLogPriority, :SDL_SetLogPriority, [:int, :int], :void],
      [:GetLogPriority, :SDL_GetLogPriority, [:int], :int],
      [:ResetLogPriorities, :SDL_ResetLogPriorities, [], :void],
      [:SetLogPriorityPrefix, :SDL_SetLogPriorityPrefix, [:int, :pointer], :bool],
      [:Log, :SDL_Log, [:pointer], :void],
      [:LogTrace, :SDL_LogTrace, [:int, :pointer], :void],
      [:LogVerbose, :SDL_LogVerbose, [:int, :pointer], :void],
      [:LogDebug, :SDL_LogDebug, [:int, :pointer], :void],
      [:LogInfo, :SDL_LogInfo, [:int, :pointer], :void],
      [:LogWarn, :SDL_LogWarn, [:int, :pointer], :void],
      [:LogError, :SDL_LogError, [:int, :pointer], :void],
      [:LogCritical, :SDL_LogCritical, [:int, :pointer], :void],
      [:LogMessage, :SDL_LogMessage, [:int, :int, :pointer], :void],
      [:GetDefaultLogOutputFunction, :SDL_GetDefaultLogOutputFunction, [], :pointer],
      [:GetLogOutputFunction, :SDL_GetLogOutputFunction, [:pointer, :pointer], :void],
      [:SetLogOutputFunction, :SDL_SetLogOutputFunction, [:SDL_LogOutputFunction, :pointer], :void],
    ]
    entries.each do |entry|
      attach_function entry[0], entry[1], entry[2], entry[3]
    rescue FFI::NotFoundError => e
      warn "[Warning] Failed to import #{entry[0]} (#{e})." if output_error
    end
  end

end

