# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module SDL
  extend FFI::Library
  # Define/Macro


  # Enum

  LOG_CATEGORY_APPLICATION = 0
  LOG_CATEGORY_ERROR = 1
  LOG_CATEGORY_ASSERT = 2
  LOG_CATEGORY_SYSTEM = 3
  LOG_CATEGORY_AUDIO = 4
  LOG_CATEGORY_VIDEO = 5
  LOG_CATEGORY_RENDER = 6
  LOG_CATEGORY_INPUT = 7
  LOG_CATEGORY_TEST = 8
  LOG_CATEGORY_GPU = 9
  LOG_CATEGORY_RESERVED2 = 10
  LOG_CATEGORY_RESERVED3 = 11
  LOG_CATEGORY_RESERVED4 = 12
  LOG_CATEGORY_RESERVED5 = 13
  LOG_CATEGORY_RESERVED6 = 14
  LOG_CATEGORY_RESERVED7 = 15
  LOG_CATEGORY_RESERVED8 = 16
  LOG_CATEGORY_RESERVED9 = 17
  LOG_CATEGORY_RESERVED10 = 18
  LOG_CATEGORY_CUSTOM = 19
  LOG_PRIORITY_INVALID = 0
  LOG_PRIORITY_TRACE = 1
  LOG_PRIORITY_VERBOSE = 2
  LOG_PRIORITY_DEBUG = 3
  LOG_PRIORITY_INFO = 4
  LOG_PRIORITY_WARN = 5
  LOG_PRIORITY_ERROR = 6
  LOG_PRIORITY_CRITICAL = 7
  LOG_PRIORITY_COUNT = 8

  # Typedef

  typedef :int, :SDL_LogCategory
  typedef :int, :SDL_LogPriority
  callback :SDL_LogOutputFunction, [:pointer, :int, :int, :pointer], :void

  # Struct


  # Function

  def self.setup_log_symbols(output_error = false)
    symbols = [
      :SDL_SetLogPriorities,
      :SDL_SetLogPriority,
      :SDL_GetLogPriority,
      :SDL_ResetLogPriorities,
      :SDL_SetLogPriorityPrefix,
      :SDL_Log,
      :SDL_LogTrace,
      :SDL_LogVerbose,
      :SDL_LogDebug,
      :SDL_LogInfo,
      :SDL_LogWarn,
      :SDL_LogError,
      :SDL_LogCritical,
      :SDL_LogMessage,
      :SDL_GetDefaultLogOutputFunction,
      :SDL_GetLogOutputFunction,
      :SDL_SetLogOutputFunction,
    ]
    apis = {
      :SDL_SetLogPriorities => :SetLogPriorities,
      :SDL_SetLogPriority => :SetLogPriority,
      :SDL_GetLogPriority => :GetLogPriority,
      :SDL_ResetLogPriorities => :ResetLogPriorities,
      :SDL_SetLogPriorityPrefix => :SetLogPriorityPrefix,
      :SDL_Log => :Log,
      :SDL_LogTrace => :LogTrace,
      :SDL_LogVerbose => :LogVerbose,
      :SDL_LogDebug => :LogDebug,
      :SDL_LogInfo => :LogInfo,
      :SDL_LogWarn => :LogWarn,
      :SDL_LogError => :LogError,
      :SDL_LogCritical => :LogCritical,
      :SDL_LogMessage => :LogMessage,
      :SDL_GetDefaultLogOutputFunction => :GetDefaultLogOutputFunction,
      :SDL_GetLogOutputFunction => :GetLogOutputFunction,
      :SDL_SetLogOutputFunction => :SetLogOutputFunction,
    }
    args = {
      :SDL_SetLogPriorities => [:int],
      :SDL_SetLogPriority => [:int, :int],
      :SDL_GetLogPriority => [:int],
      :SDL_ResetLogPriorities => [],
      :SDL_SetLogPriorityPrefix => [:int, :pointer],
      :SDL_Log => [:pointer],
      :SDL_LogTrace => [:int, :pointer],
      :SDL_LogVerbose => [:int, :pointer],
      :SDL_LogDebug => [:int, :pointer],
      :SDL_LogInfo => [:int, :pointer],
      :SDL_LogWarn => [:int, :pointer],
      :SDL_LogError => [:int, :pointer],
      :SDL_LogCritical => [:int, :pointer],
      :SDL_LogMessage => [:int, :int, :pointer],
      :SDL_GetDefaultLogOutputFunction => [],
      :SDL_GetLogOutputFunction => [:pointer, :pointer],
      :SDL_SetLogOutputFunction => [:SDL_LogOutputFunction, :pointer],
    }
    retvals = {
      :SDL_SetLogPriorities => :void,
      :SDL_SetLogPriority => :void,
      :SDL_GetLogPriority => :int,
      :SDL_ResetLogPriorities => :void,
      :SDL_SetLogPriorityPrefix => :bool,
      :SDL_Log => :void,
      :SDL_LogTrace => :void,
      :SDL_LogVerbose => :void,
      :SDL_LogDebug => :void,
      :SDL_LogInfo => :void,
      :SDL_LogWarn => :void,
      :SDL_LogError => :void,
      :SDL_LogCritical => :void,
      :SDL_LogMessage => :void,
      :SDL_GetDefaultLogOutputFunction => :pointer,
      :SDL_GetLogOutputFunction => :void,
      :SDL_SetLogOutputFunction => :void,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

