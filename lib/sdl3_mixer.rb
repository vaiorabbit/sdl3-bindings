# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module SDL
  extend FFI::Library
  # Define/Macro

  MIXER_MAJOR_VERSION = 3
  MIXER_MINOR_VERSION = 0
  MIXER_MICRO_VERSION = 0
  MIX_INIT_FLAC = 0x00000001
  MIX_INIT_MOD = 0x00000002
  MIX_INIT_MP3 = 0x00000008
  MIX_INIT_OGG = 0x00000010
  MIX_INIT_MID = 0x00000020
  MIX_INIT_OPUS = 0x00000040
  MIX_INIT_WAVPACK = 0x00000080
  MIX_CHANNELS = 8
  MIX_DEFAULT_FREQUENCY = 44100
  MIX_DEFAULT_CHANNELS = 2
  MIX_MAX_VOLUME = 128
  MIX_CHANNEL_POST = -2
  MIX_EFFECTSMAXSPEED = "MIX_EFFECTSMAXSPEED"

  # Enum

  MIX_NO_FADING = 0
  MIX_FADING_OUT = 1
  MIX_FADING_IN = 2
  MUS_NONE = 0
  MUS_WAV = 1
  MUS_MOD = 2
  MUS_MID = 3
  MUS_OGG = 4
  MUS_MP3 = 5
  MUS_FLAC = 6
  MUS_OPUS = 7
  MUS_WAVPACK = 8
  MUS_GME = 9

  # Typedef

  typedef :uint, :MIX_InitFlags
  typedef :int, :Mix_Fading
  typedef :int, :Mix_MusicType
  callback :Mix_MixCallback, [:pointer, :pointer, :int], :void
  callback :Mix_MusicFinishedCallback, [], :void
  callback :Mix_ChannelFinishedCallback, [:int], :void
  callback :Mix_EffectFunc_t, [:int, :pointer, :int, :pointer], :void
  callback :Mix_EffectDone_t, [:int, :pointer], :void
  callback :Mix_EachSoundFontCallback, [:pointer, :pointer], :bool

  # Struct

  class Mix_Chunk < FFI::Struct
    layout(
      :allocated, :int,
      :abuf, :pointer,
      :alen, :uint,
      :volume, :uchar,
    )
  end


  # Function

  def self.setup_mixer_symbols(output_error = false)
    entries = [
      [:Mix_Version, :Mix_Version, [], :int],
      [:Mix_Init, :Mix_Init, [:uint], :uint],
      [:Mix_Quit, :Mix_Quit, [], :void],
      [:Mix_OpenAudio, :Mix_OpenAudio, [:uint, :pointer], :bool],
      [:Mix_PauseAudio, :Mix_PauseAudio, [:int], :void],
      [:Mix_QuerySpec, :Mix_QuerySpec, [:pointer, :pointer, :pointer], :bool],
      [:Mix_AllocateChannels, :Mix_AllocateChannels, [:int], :int],
      [:Mix_LoadWAV_IO, :Mix_LoadWAV_IO, [:pointer, :bool], :pointer],
      [:Mix_LoadWAV, :Mix_LoadWAV, [:pointer], :pointer],
      [:Mix_LoadMUS, :Mix_LoadMUS, [:pointer], :pointer],
      [:Mix_LoadMUS_IO, :Mix_LoadMUS_IO, [:pointer, :bool], :pointer],
      [:Mix_LoadMUSType_IO, :Mix_LoadMUSType_IO, [:pointer, :int, :bool], :pointer],
      [:Mix_QuickLoad_WAV, :Mix_QuickLoad_WAV, [:pointer], :pointer],
      [:Mix_QuickLoad_RAW, :Mix_QuickLoad_RAW, [:pointer, :uint], :pointer],
      [:Mix_FreeChunk, :Mix_FreeChunk, [:pointer], :void],
      [:Mix_FreeMusic, :Mix_FreeMusic, [:pointer], :void],
      [:Mix_GetNumChunkDecoders, :Mix_GetNumChunkDecoders, [], :int],
      [:Mix_GetChunkDecoder, :Mix_GetChunkDecoder, [:int], :pointer],
      [:Mix_HasChunkDecoder, :Mix_HasChunkDecoder, [:pointer], :bool],
      [:Mix_GetNumMusicDecoders, :Mix_GetNumMusicDecoders, [], :int],
      [:Mix_GetMusicDecoder, :Mix_GetMusicDecoder, [:int], :pointer],
      [:Mix_HasMusicDecoder, :Mix_HasMusicDecoder, [:pointer], :bool],
      [:Mix_GetMusicType, :Mix_GetMusicType, [:pointer], :int],
      [:Mix_GetMusicTitle, :Mix_GetMusicTitle, [:pointer], :pointer],
      [:Mix_GetMusicTitleTag, :Mix_GetMusicTitleTag, [:pointer], :pointer],
      [:Mix_GetMusicArtistTag, :Mix_GetMusicArtistTag, [:pointer], :pointer],
      [:Mix_GetMusicAlbumTag, :Mix_GetMusicAlbumTag, [:pointer], :pointer],
      [:Mix_GetMusicCopyrightTag, :Mix_GetMusicCopyrightTag, [:pointer], :pointer],
      [:Mix_SetPostMix, :Mix_SetPostMix, [:Mix_MixCallback, :pointer], :void],
      [:Mix_HookMusic, :Mix_HookMusic, [:Mix_MixCallback, :pointer], :void],
      [:Mix_HookMusicFinished, :Mix_HookMusicFinished, [:Mix_MusicFinishedCallback], :void],
      [:Mix_GetMusicHookData, :Mix_GetMusicHookData, [], :pointer],
      [:Mix_ChannelFinished, :Mix_ChannelFinished, [:Mix_ChannelFinishedCallback], :void],
      [:Mix_RegisterEffect, :Mix_RegisterEffect, [:int, :Mix_EffectFunc_t, :Mix_EffectDone_t, :pointer], :bool],
      [:Mix_UnregisterEffect, :Mix_UnregisterEffect, [:int, :Mix_EffectFunc_t], :bool],
      [:Mix_UnregisterAllEffects, :Mix_UnregisterAllEffects, [:int], :bool],
      [:Mix_SetPanning, :Mix_SetPanning, [:int, :uchar, :uchar], :bool],
      [:Mix_SetPosition, :Mix_SetPosition, [:int, :short, :uchar], :bool],
      [:Mix_SetDistance, :Mix_SetDistance, [:int, :uchar], :bool],
      [:Mix_SetReverseStereo, :Mix_SetReverseStereo, [:int, :int], :bool],
      [:Mix_ReserveChannels, :Mix_ReserveChannels, [:int], :int],
      [:Mix_GroupChannel, :Mix_GroupChannel, [:int, :int], :bool],
      [:Mix_GroupChannels, :Mix_GroupChannels, [:int, :int, :int], :bool],
      [:Mix_GroupAvailable, :Mix_GroupAvailable, [:int], :int],
      [:Mix_GroupCount, :Mix_GroupCount, [:int], :int],
      [:Mix_GroupOldest, :Mix_GroupOldest, [:int], :int],
      [:Mix_GroupNewer, :Mix_GroupNewer, [:int], :int],
      [:Mix_PlayChannel, :Mix_PlayChannel, [:int, :pointer, :int], :int],
      [:Mix_PlayChannelTimed, :Mix_PlayChannelTimed, [:int, :pointer, :int, :int], :int],
      [:Mix_PlayMusic, :Mix_PlayMusic, [:pointer, :int], :bool],
      [:Mix_FadeInMusic, :Mix_FadeInMusic, [:pointer, :int, :int], :bool],
      [:Mix_FadeInMusicPos, :Mix_FadeInMusicPos, [:pointer, :int, :int, :double], :bool],
      [:Mix_FadeInChannel, :Mix_FadeInChannel, [:int, :pointer, :int, :int], :int],
      [:Mix_FadeInChannelTimed, :Mix_FadeInChannelTimed, [:int, :pointer, :int, :int, :int], :int],
      [:Mix_Volume, :Mix_Volume, [:int, :int], :int],
      [:Mix_VolumeChunk, :Mix_VolumeChunk, [:pointer, :int], :int],
      [:Mix_VolumeMusic, :Mix_VolumeMusic, [:int], :int],
      [:Mix_GetMusicVolume, :Mix_GetMusicVolume, [:pointer], :int],
      [:Mix_MasterVolume, :Mix_MasterVolume, [:int], :int],
      [:Mix_HaltChannel, :Mix_HaltChannel, [:int], :void],
      [:Mix_HaltGroup, :Mix_HaltGroup, [:int], :void],
      [:Mix_HaltMusic, :Mix_HaltMusic, [], :void],
      [:Mix_ExpireChannel, :Mix_ExpireChannel, [:int, :int], :int],
      [:Mix_FadeOutChannel, :Mix_FadeOutChannel, [:int, :int], :int],
      [:Mix_FadeOutGroup, :Mix_FadeOutGroup, [:int, :int], :int],
      [:Mix_FadeOutMusic, :Mix_FadeOutMusic, [:int], :bool],
      [:Mix_FadingMusic, :Mix_FadingMusic, [], :int],
      [:Mix_FadingChannel, :Mix_FadingChannel, [:int], :int],
      [:Mix_Pause, :Mix_Pause, [:int], :void],
      [:Mix_PauseGroup, :Mix_PauseGroup, [:int], :void],
      [:Mix_Resume, :Mix_Resume, [:int], :void],
      [:Mix_ResumeGroup, :Mix_ResumeGroup, [:int], :void],
      [:Mix_Paused, :Mix_Paused, [:int], :int],
      [:Mix_PauseMusic, :Mix_PauseMusic, [], :void],
      [:Mix_ResumeMusic, :Mix_ResumeMusic, [], :void],
      [:Mix_RewindMusic, :Mix_RewindMusic, [], :void],
      [:Mix_PausedMusic, :Mix_PausedMusic, [], :bool],
      [:Mix_ModMusicJumpToOrder, :Mix_ModMusicJumpToOrder, [:int], :bool],
      [:Mix_StartTrack, :Mix_StartTrack, [:pointer, :int], :bool],
      [:Mix_GetNumTracks, :Mix_GetNumTracks, [:pointer], :int],
      [:Mix_SetMusicPosition, :Mix_SetMusicPosition, [:double], :bool],
      [:Mix_GetMusicPosition, :Mix_GetMusicPosition, [:pointer], :double],
      [:Mix_MusicDuration, :Mix_MusicDuration, [:pointer], :double],
      [:Mix_GetMusicLoopStartTime, :Mix_GetMusicLoopStartTime, [:pointer], :double],
      [:Mix_GetMusicLoopEndTime, :Mix_GetMusicLoopEndTime, [:pointer], :double],
      [:Mix_GetMusicLoopLengthTime, :Mix_GetMusicLoopLengthTime, [:pointer], :double],
      [:Mix_Playing, :Mix_Playing, [:int], :int],
      [:Mix_PlayingMusic, :Mix_PlayingMusic, [], :bool],
      [:Mix_SetSoundFonts, :Mix_SetSoundFonts, [:pointer], :bool],
      [:Mix_GetSoundFonts, :Mix_GetSoundFonts, [], :pointer],
      [:Mix_EachSoundFont, :Mix_EachSoundFont, [:Mix_EachSoundFontCallback, :pointer], :bool],
      [:Mix_SetTimidityCfg, :Mix_SetTimidityCfg, [:pointer], :bool],
      [:Mix_GetTimidityCfg, :Mix_GetTimidityCfg, [], :pointer],
      [:Mix_GetChunk, :Mix_GetChunk, [:int], :pointer],
      [:Mix_CloseAudio, :Mix_CloseAudio, [], :void],
    ]
    entries.each do |entry|
      attach_function entry[0], entry[1], entry[2], entry[3]
    rescue FFI::NotFoundError => e
      warn "[Warning] Failed to import #{entry[0]} (#{e})." if output_error
    end
  end

end

