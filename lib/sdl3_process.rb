# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module SDL
  extend FFI::Library
  # Define/Macro

  PROP_PROCESS_CREATE_ARGS_POINTER = "SDL.process.create.args"
  PROP_PROCESS_CREATE_ENVIRONMENT_POINTER = "SDL.process.create.environment"
  PROP_PROCESS_CREATE_STDIN_NUMBER = "SDL.process.create.stdin_option"
  PROP_PROCESS_CREATE_STDIN_POINTER = "SDL.process.create.stdin_source"
  PROP_PROCESS_CREATE_STDOUT_NUMBER = "SDL.process.create.stdout_option"
  PROP_PROCESS_CREATE_STDOUT_POINTER = "SDL.process.create.stdout_source"
  PROP_PROCESS_CREATE_STDERR_NUMBER = "SDL.process.create.stderr_option"
  PROP_PROCESS_CREATE_STDERR_POINTER = "SDL.process.create.stderr_source"
  PROP_PROCESS_CREATE_STDERR_TO_STDOUT_BOOLEAN = "SDL.process.create.stderr_to_stdout"
  PROP_PROCESS_CREATE_BACKGROUND_BOOLEAN = "SDL.process.create.background"
  PROP_PROCESS_PID_NUMBER = "SDL.process.pid"
  PROP_PROCESS_STDIN_POINTER = "SDL.process.stdin"
  PROP_PROCESS_STDOUT_POINTER = "SDL.process.stdout"
  PROP_PROCESS_STDERR_POINTER = "SDL.process.stderr"
  PROP_PROCESS_BACKGROUND_BOOLEAN = "SDL.process.background"

  # Enum

  PROCESS_STDIO_INHERITED = 0
  PROCESS_STDIO_NULL = 1
  PROCESS_STDIO_APP = 2
  PROCESS_STDIO_REDIRECT = 3

  # Typedef

  typedef :int, :SDL_ProcessIO

  # Struct


  # Function

  def self.setup_process_symbols(output_error = false)
    entries = [
      [:CreateProcess, :SDL_CreateProcess, [:pointer, :bool], :pointer],
      [:CreateProcessWithProperties, :SDL_CreateProcessWithProperties, [:uint], :pointer],
      [:GetProcessProperties, :SDL_GetProcessProperties, [:pointer], :uint],
      [:ReadProcess, :SDL_ReadProcess, [:pointer, :pointer, :pointer], :pointer],
      [:GetProcessInput, :SDL_GetProcessInput, [:pointer], :pointer],
      [:GetProcessOutput, :SDL_GetProcessOutput, [:pointer], :pointer],
      [:KillProcess, :SDL_KillProcess, [:pointer, :bool], :bool],
      [:WaitProcess, :SDL_WaitProcess, [:pointer, :bool, :pointer], :bool],
      [:DestroyProcess, :SDL_DestroyProcess, [:pointer], :void],
    ]
    entries.each do |entry|
      attach_function entry[0], entry[1], entry[2], entry[3]
    rescue FFI::NotFoundError => e
      warn "[Warning] Failed to import #{entry[0]} (#{e})." if output_error
    end
  end

end

