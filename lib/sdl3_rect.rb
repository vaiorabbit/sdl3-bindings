# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module SDL
  extend FFI::Library
  # Define/Macro


  # Enum


  # Typedef


  def self.RectToFRect(rect, frect)
    frect.x = rect.x
    frect.y = rect.y
    frect.w = rect.w
    frect.y = rect.h
  end

  def self.PointInRectFloat(p, r)
    return ( (p.x >= r.x) && (p.x < (r.x + r.w)) && (p.y >= r.y) && (p.y < (r.y + r.h)) ) ? 1 : 0
  end

  def self.RectEmpty(r)
    return (!r.null? || (r.w <= 0) || (r.h <= 0)) ? 1 : 0
  end

  def self.RectsEqual(a, b)
    return (!a.null? && !b.null? && (a.x == b.x) && (a.y == b.y) && (a.w == b.w) && (a.h == b.h)) ? 1 : 0
  end


  # Struct

  class Point < FFI::Struct
    layout(
      :x, :int,
      :y, :int,
    )
  end

  class FPoint < FFI::Struct
    layout(
      :x, :float,
      :y, :float,
    )
  end

  class Rect < FFI::Struct
    layout(
      :x, :int,
      :y, :int,
      :w, :int,
      :h, :int,
    )
  end

  class FRect < FFI::Struct
    layout(
      :x, :float,
      :y, :float,
      :w, :float,
      :h, :float,
    )
  end


  # Function

  def self.setup_rect_symbols(output_error = false)
    entries = [
      [:HasRectIntersection, :SDL_HasRectIntersection, [:pointer, :pointer], :bool],
      [:GetRectIntersection, :SDL_GetRectIntersection, [:pointer, :pointer, :pointer], :bool],
      [:GetRectUnion, :SDL_GetRectUnion, [:pointer, :pointer, :pointer], :bool],
      [:GetRectEnclosingPoints, :SDL_GetRectEnclosingPoints, [:pointer, :int, :pointer, :pointer], :bool],
      [:GetRectAndLineIntersection, :SDL_GetRectAndLineIntersection, [:pointer, :pointer, :pointer, :pointer, :pointer], :bool],
      [:HasRectIntersectionFloat, :SDL_HasRectIntersectionFloat, [:pointer, :pointer], :bool],
      [:GetRectIntersectionFloat, :SDL_GetRectIntersectionFloat, [:pointer, :pointer, :pointer], :bool],
      [:GetRectUnionFloat, :SDL_GetRectUnionFloat, [:pointer, :pointer, :pointer], :bool],
      [:GetRectEnclosingPointsFloat, :SDL_GetRectEnclosingPointsFloat, [:pointer, :int, :pointer, :pointer], :bool],
      [:GetRectAndLineIntersectionFloat, :SDL_GetRectAndLineIntersectionFloat, [:pointer, :pointer, :pointer, :pointer, :pointer], :bool],
    ]
    entries.each do |entry|
      attach_function entry[0], entry[1], entry[2], entry[3]
    rescue FFI::NotFoundError => e
      warn "[Warning] Failed to import #{entry[0]} (#{e})." if output_error
    end
  end

end

