# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module SDL
  extend FFI::Library
  # Define/Macro

  SOFTWARE_RENDERER = "software"
  PROP_RENDERER_CREATE_NAME_STRING = "SDL.renderer.create.name"
  PROP_RENDERER_CREATE_WINDOW_POINTER = "SDL.renderer.create.window"
  PROP_RENDERER_CREATE_SURFACE_POINTER = "SDL.renderer.create.surface"
  PROP_RENDERER_CREATE_OUTPUT_COLORSPACE_NUMBER = "SDL.renderer.create.output_colorspace"
  PROP_RENDERER_CREATE_PRESENT_VSYNC_NUMBER = "SDL.renderer.create.present_vsync"
  PROP_RENDERER_CREATE_VULKAN_INSTANCE_POINTER = "SDL.renderer.create.vulkan.instance"
  PROP_RENDERER_CREATE_VULKAN_SURFACE_NUMBER = "SDL.renderer.create.vulkan.surface"
  PROP_RENDERER_CREATE_VULKAN_PHYSICAL_DEVICE_POINTER = "SDL.renderer.create.vulkan.physical_device"
  PROP_RENDERER_CREATE_VULKAN_DEVICE_POINTER = "SDL.renderer.create.vulkan.device"
  PROP_RENDERER_CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER = "SDL.renderer.create.vulkan.graphics_queue_family_index"
  PROP_RENDERER_CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER = "SDL.renderer.create.vulkan.present_queue_family_index"
  PROP_RENDERER_NAME_STRING = "SDL.renderer.name"
  PROP_RENDERER_WINDOW_POINTER = "SDL.renderer.window"
  PROP_RENDERER_SURFACE_POINTER = "SDL.renderer.surface"
  PROP_RENDERER_VSYNC_NUMBER = "SDL.renderer.vsync"
  PROP_RENDERER_MAX_TEXTURE_SIZE_NUMBER = "SDL.renderer.max_texture_size"
  PROP_RENDERER_TEXTURE_FORMATS_POINTER = "SDL.renderer.texture_formats"
  PROP_RENDERER_OUTPUT_COLORSPACE_NUMBER = "SDL.renderer.output_colorspace"
  PROP_RENDERER_HDR_ENABLED_BOOLEAN = "SDL.renderer.HDR_enabled"
  PROP_RENDERER_SDR_WHITE_POINT_FLOAT = "SDL.renderer.SDR_white_point"
  PROP_RENDERER_HDR_HEADROOM_FLOAT = "SDL.renderer.HDR_headroom"
  PROP_RENDERER_D3D9_DEVICE_POINTER = "SDL.renderer.d3d9.device"
  PROP_RENDERER_D3D11_DEVICE_POINTER = "SDL.renderer.d3d11.device"
  PROP_RENDERER_D3D11_SWAPCHAIN_POINTER = "SDL.renderer.d3d11.swap_chain"
  PROP_RENDERER_D3D12_DEVICE_POINTER = "SDL.renderer.d3d12.device"
  PROP_RENDERER_D3D12_SWAPCHAIN_POINTER = "SDL.renderer.d3d12.swap_chain"
  PROP_RENDERER_D3D12_COMMAND_QUEUE_POINTER = "SDL.renderer.d3d12.command_queue"
  PROP_RENDERER_VULKAN_INSTANCE_POINTER = "SDL.renderer.vulkan.instance"
  PROP_RENDERER_VULKAN_SURFACE_NUMBER = "SDL.renderer.vulkan.surface"
  PROP_RENDERER_VULKAN_PHYSICAL_DEVICE_POINTER = "SDL.renderer.vulkan.physical_device"
  PROP_RENDERER_VULKAN_DEVICE_POINTER = "SDL.renderer.vulkan.device"
  PROP_RENDERER_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER = "SDL.renderer.vulkan.graphics_queue_family_index"
  PROP_RENDERER_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER = "SDL.renderer.vulkan.present_queue_family_index"
  PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER = "SDL.renderer.vulkan.swapchain_image_count"
  PROP_RENDERER_GPU_DEVICE_POINTER = "SDL.renderer.gpu.device"
  PROP_TEXTURE_CREATE_COLORSPACE_NUMBER = "SDL.texture.create.colorspace"
  PROP_TEXTURE_CREATE_FORMAT_NUMBER = "SDL.texture.create.format"
  PROP_TEXTURE_CREATE_ACCESS_NUMBER = "SDL.texture.create.access"
  PROP_TEXTURE_CREATE_WIDTH_NUMBER = "SDL.texture.create.width"
  PROP_TEXTURE_CREATE_HEIGHT_NUMBER = "SDL.texture.create.height"
  PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT = "SDL.texture.create.SDR_white_point"
  PROP_TEXTURE_CREATE_HDR_HEADROOM_FLOAT = "SDL.texture.create.HDR_headroom"
  PROP_TEXTURE_CREATE_D3D11_TEXTURE_POINTER = "SDL.texture.create.d3d11.texture"
  PROP_TEXTURE_CREATE_D3D11_TEXTURE_U_POINTER = "SDL.texture.create.d3d11.texture_u"
  PROP_TEXTURE_CREATE_D3D11_TEXTURE_V_POINTER = "SDL.texture.create.d3d11.texture_v"
  PROP_TEXTURE_CREATE_D3D12_TEXTURE_POINTER = "SDL.texture.create.d3d12.texture"
  PROP_TEXTURE_CREATE_D3D12_TEXTURE_U_POINTER = "SDL.texture.create.d3d12.texture_u"
  PROP_TEXTURE_CREATE_D3D12_TEXTURE_V_POINTER = "SDL.texture.create.d3d12.texture_v"
  PROP_TEXTURE_CREATE_METAL_PIXELBUFFER_POINTER = "SDL.texture.create.metal.pixelbuffer"
  PROP_TEXTURE_CREATE_OPENGL_TEXTURE_NUMBER = "SDL.texture.create.opengl.texture"
  PROP_TEXTURE_CREATE_OPENGL_TEXTURE_UV_NUMBER = "SDL.texture.create.opengl.texture_uv"
  PROP_TEXTURE_CREATE_OPENGL_TEXTURE_U_NUMBER = "SDL.texture.create.opengl.texture_u"
  PROP_TEXTURE_CREATE_OPENGL_TEXTURE_V_NUMBER = "SDL.texture.create.opengl.texture_v"
  PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER = "SDL.texture.create.opengles2.texture"
  PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_UV_NUMBER = "SDL.texture.create.opengles2.texture_uv"
  PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_U_NUMBER = "SDL.texture.create.opengles2.texture_u"
  PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_V_NUMBER = "SDL.texture.create.opengles2.texture_v"
  PROP_TEXTURE_CREATE_VULKAN_TEXTURE_NUMBER = "SDL.texture.create.vulkan.texture"
  PROP_TEXTURE_COLORSPACE_NUMBER = "SDL.texture.colorspace"
  PROP_TEXTURE_FORMAT_NUMBER = "SDL.texture.format"
  PROP_TEXTURE_ACCESS_NUMBER = "SDL.texture.access"
  PROP_TEXTURE_WIDTH_NUMBER = "SDL.texture.width"
  PROP_TEXTURE_HEIGHT_NUMBER = "SDL.texture.height"
  PROP_TEXTURE_SDR_WHITE_POINT_FLOAT = "SDL.texture.SDR_white_point"
  PROP_TEXTURE_HDR_HEADROOM_FLOAT = "SDL.texture.HDR_headroom"
  PROP_TEXTURE_D3D11_TEXTURE_POINTER = "SDL.texture.d3d11.texture"
  PROP_TEXTURE_D3D11_TEXTURE_U_POINTER = "SDL.texture.d3d11.texture_u"
  PROP_TEXTURE_D3D11_TEXTURE_V_POINTER = "SDL.texture.d3d11.texture_v"
  PROP_TEXTURE_D3D12_TEXTURE_POINTER = "SDL.texture.d3d12.texture"
  PROP_TEXTURE_D3D12_TEXTURE_U_POINTER = "SDL.texture.d3d12.texture_u"
  PROP_TEXTURE_D3D12_TEXTURE_V_POINTER = "SDL.texture.d3d12.texture_v"
  PROP_TEXTURE_OPENGL_TEXTURE_NUMBER = "SDL.texture.opengl.texture"
  PROP_TEXTURE_OPENGL_TEXTURE_UV_NUMBER = "SDL.texture.opengl.texture_uv"
  PROP_TEXTURE_OPENGL_TEXTURE_U_NUMBER = "SDL.texture.opengl.texture_u"
  PROP_TEXTURE_OPENGL_TEXTURE_V_NUMBER = "SDL.texture.opengl.texture_v"
  PROP_TEXTURE_OPENGL_TEXTURE_TARGET_NUMBER = "SDL.texture.opengl.target"
  PROP_TEXTURE_OPENGL_TEX_W_FLOAT = "SDL.texture.opengl.tex_w"
  PROP_TEXTURE_OPENGL_TEX_H_FLOAT = "SDL.texture.opengl.tex_h"
  PROP_TEXTURE_OPENGLES2_TEXTURE_NUMBER = "SDL.texture.opengles2.texture"
  PROP_TEXTURE_OPENGLES2_TEXTURE_UV_NUMBER = "SDL.texture.opengles2.texture_uv"
  PROP_TEXTURE_OPENGLES2_TEXTURE_U_NUMBER = "SDL.texture.opengles2.texture_u"
  PROP_TEXTURE_OPENGLES2_TEXTURE_V_NUMBER = "SDL.texture.opengles2.texture_v"
  PROP_TEXTURE_OPENGLES2_TEXTURE_TARGET_NUMBER = "SDL.texture.opengles2.target"
  PROP_TEXTURE_VULKAN_TEXTURE_NUMBER = "SDL.texture.vulkan.texture"
  RENDERER_VSYNC_DISABLED = 0
  RENDERER_VSYNC_ADAPTIVE = -1
  DEBUG_TEXT_FONT_CHARACTER_SIZE = 8

  # Enum

  TEXTUREACCESS_STATIC = 0
  TEXTUREACCESS_STREAMING = 1
  TEXTUREACCESS_TARGET = 2
  LOGICAL_PRESENTATION_DISABLED = 0
  LOGICAL_PRESENTATION_STRETCH = 1
  LOGICAL_PRESENTATION_LETTERBOX = 2
  LOGICAL_PRESENTATION_OVERSCAN = 3
  LOGICAL_PRESENTATION_INTEGER_SCALE = 4

  # Typedef

  typedef :int, :SDL_TextureAccess
  typedef :int, :SDL_RendererLogicalPresentation

  # Struct

  class Vertex < FFI::Struct
    layout(
      :position, FPoint,
      :color, FColor,
      :tex_coord, FPoint,
    )
  end

  class Texture < FFI::Struct
    layout(
      :format, :int,
      :w, :int,
      :h, :int,
      :refcount, :int,
    )
  end


  # Function

  def self.setup_render_symbols(output_error = false)
    entries = [
      [:GetNumRenderDrivers, :SDL_GetNumRenderDrivers, [], :int],
      [:GetRenderDriver, :SDL_GetRenderDriver, [:int], :pointer],
      [:CreateWindowAndRenderer, :SDL_CreateWindowAndRenderer, [:pointer, :int, :int, :ulong_long, :pointer, :pointer], :bool],
      [:CreateRenderer, :SDL_CreateRenderer, [:pointer, :pointer], :pointer],
      [:CreateRendererWithProperties, :SDL_CreateRendererWithProperties, [:uint], :pointer],
      [:CreateSoftwareRenderer, :SDL_CreateSoftwareRenderer, [:pointer], :pointer],
      [:GetRenderer, :SDL_GetRenderer, [:pointer], :pointer],
      [:GetRenderWindow, :SDL_GetRenderWindow, [:pointer], :pointer],
      [:GetRendererName, :SDL_GetRendererName, [:pointer], :pointer],
      [:GetRendererProperties, :SDL_GetRendererProperties, [:pointer], :uint],
      [:GetRenderOutputSize, :SDL_GetRenderOutputSize, [:pointer, :pointer, :pointer], :bool],
      [:GetCurrentRenderOutputSize, :SDL_GetCurrentRenderOutputSize, [:pointer, :pointer, :pointer], :bool],
      [:CreateTexture, :SDL_CreateTexture, [:pointer, :int, :int, :int, :int], :pointer],
      [:CreateTextureFromSurface, :SDL_CreateTextureFromSurface, [:pointer, :pointer], :pointer],
      [:CreateTextureWithProperties, :SDL_CreateTextureWithProperties, [:pointer, :uint], :pointer],
      [:GetTextureProperties, :SDL_GetTextureProperties, [:pointer], :uint],
      [:GetRendererFromTexture, :SDL_GetRendererFromTexture, [:pointer], :pointer],
      [:GetTextureSize, :SDL_GetTextureSize, [:pointer, :pointer, :pointer], :bool],
      [:SetTextureColorMod, :SDL_SetTextureColorMod, [:pointer, :uchar, :uchar, :uchar], :bool],
      [:SetTextureColorModFloat, :SDL_SetTextureColorModFloat, [:pointer, :float, :float, :float], :bool],
      [:GetTextureColorMod, :SDL_GetTextureColorMod, [:pointer, :pointer, :pointer, :pointer], :bool],
      [:GetTextureColorModFloat, :SDL_GetTextureColorModFloat, [:pointer, :pointer, :pointer, :pointer], :bool],
      [:SetTextureAlphaMod, :SDL_SetTextureAlphaMod, [:pointer, :uchar], :bool],
      [:SetTextureAlphaModFloat, :SDL_SetTextureAlphaModFloat, [:pointer, :float], :bool],
      [:GetTextureAlphaMod, :SDL_GetTextureAlphaMod, [:pointer, :pointer], :bool],
      [:GetTextureAlphaModFloat, :SDL_GetTextureAlphaModFloat, [:pointer, :pointer], :bool],
      [:SetTextureBlendMode, :SDL_SetTextureBlendMode, [:pointer, :uint], :bool],
      [:GetTextureBlendMode, :SDL_GetTextureBlendMode, [:pointer, :pointer], :bool],
      [:SetTextureScaleMode, :SDL_SetTextureScaleMode, [:pointer, :int], :bool],
      [:GetTextureScaleMode, :SDL_GetTextureScaleMode, [:pointer, :pointer], :bool],
      [:UpdateTexture, :SDL_UpdateTexture, [:pointer, :pointer, :pointer, :int], :bool],
      [:UpdateYUVTexture, :SDL_UpdateYUVTexture, [:pointer, :pointer, :pointer, :int, :pointer, :int, :pointer, :int], :bool],
      [:UpdateNVTexture, :SDL_UpdateNVTexture, [:pointer, :pointer, :pointer, :int, :pointer, :int], :bool],
      [:LockTexture, :SDL_LockTexture, [:pointer, :pointer, :pointer, :pointer], :bool],
      [:LockTextureToSurface, :SDL_LockTextureToSurface, [:pointer, :pointer, :pointer], :bool],
      [:UnlockTexture, :SDL_UnlockTexture, [:pointer], :void],
      [:SetRenderTarget, :SDL_SetRenderTarget, [:pointer, :pointer], :bool],
      [:GetRenderTarget, :SDL_GetRenderTarget, [:pointer], :pointer],
      [:SetRenderLogicalPresentation, :SDL_SetRenderLogicalPresentation, [:pointer, :int, :int, :int], :bool],
      [:GetRenderLogicalPresentation, :SDL_GetRenderLogicalPresentation, [:pointer, :pointer, :pointer, :pointer], :bool],
      [:GetRenderLogicalPresentationRect, :SDL_GetRenderLogicalPresentationRect, [:pointer, :pointer], :bool],
      [:RenderCoordinatesFromWindow, :SDL_RenderCoordinatesFromWindow, [:pointer, :float, :float, :pointer, :pointer], :bool],
      [:RenderCoordinatesToWindow, :SDL_RenderCoordinatesToWindow, [:pointer, :float, :float, :pointer, :pointer], :bool],
      [:ConvertEventToRenderCoordinates, :SDL_ConvertEventToRenderCoordinates, [:pointer, :pointer], :bool],
      [:SetRenderViewport, :SDL_SetRenderViewport, [:pointer, :pointer], :bool],
      [:GetRenderViewport, :SDL_GetRenderViewport, [:pointer, :pointer], :bool],
      [:RenderViewportSet, :SDL_RenderViewportSet, [:pointer], :bool],
      [:GetRenderSafeArea, :SDL_GetRenderSafeArea, [:pointer, :pointer], :bool],
      [:SetRenderClipRect, :SDL_SetRenderClipRect, [:pointer, :pointer], :bool],
      [:GetRenderClipRect, :SDL_GetRenderClipRect, [:pointer, :pointer], :bool],
      [:RenderClipEnabled, :SDL_RenderClipEnabled, [:pointer], :bool],
      [:SetRenderScale, :SDL_SetRenderScale, [:pointer, :float, :float], :bool],
      [:GetRenderScale, :SDL_GetRenderScale, [:pointer, :pointer, :pointer], :bool],
      [:SetRenderDrawColor, :SDL_SetRenderDrawColor, [:pointer, :uchar, :uchar, :uchar, :uchar], :bool],
      [:SetRenderDrawColorFloat, :SDL_SetRenderDrawColorFloat, [:pointer, :float, :float, :float, :float], :bool],
      [:GetRenderDrawColor, :SDL_GetRenderDrawColor, [:pointer, :pointer, :pointer, :pointer, :pointer], :bool],
      [:GetRenderDrawColorFloat, :SDL_GetRenderDrawColorFloat, [:pointer, :pointer, :pointer, :pointer, :pointer], :bool],
      [:SetRenderColorScale, :SDL_SetRenderColorScale, [:pointer, :float], :bool],
      [:GetRenderColorScale, :SDL_GetRenderColorScale, [:pointer, :pointer], :bool],
      [:SetRenderDrawBlendMode, :SDL_SetRenderDrawBlendMode, [:pointer, :uint], :bool],
      [:GetRenderDrawBlendMode, :SDL_GetRenderDrawBlendMode, [:pointer, :pointer], :bool],
      [:RenderClear, :SDL_RenderClear, [:pointer], :bool],
      [:RenderPoint, :SDL_RenderPoint, [:pointer, :float, :float], :bool],
      [:RenderPoints, :SDL_RenderPoints, [:pointer, :pointer, :int], :bool],
      [:RenderLine, :SDL_RenderLine, [:pointer, :float, :float, :float, :float], :bool],
      [:RenderLines, :SDL_RenderLines, [:pointer, :pointer, :int], :bool],
      [:RenderRect, :SDL_RenderRect, [:pointer, :pointer], :bool],
      [:RenderRects, :SDL_RenderRects, [:pointer, :pointer, :int], :bool],
      [:RenderFillRect, :SDL_RenderFillRect, [:pointer, :pointer], :bool],
      [:RenderFillRects, :SDL_RenderFillRects, [:pointer, :pointer, :int], :bool],
      [:RenderTexture, :SDL_RenderTexture, [:pointer, :pointer, :pointer, :pointer], :bool],
      [:RenderTextureRotated, :SDL_RenderTextureRotated, [:pointer, :pointer, :pointer, :pointer, :double, :pointer, :int], :bool],
      [:RenderTextureAffine, :SDL_RenderTextureAffine, [:pointer, :pointer, :pointer, :pointer, :pointer, :pointer], :bool],
      [:RenderTextureTiled, :SDL_RenderTextureTiled, [:pointer, :pointer, :pointer, :float, :pointer], :bool],
      [:RenderTexture9Grid, :SDL_RenderTexture9Grid, [:pointer, :pointer, :pointer, :float, :float, :float, :float, :float, :pointer], :bool],
      [:RenderGeometry, :SDL_RenderGeometry, [:pointer, :pointer, :pointer, :int, :pointer, :int], :bool],
      [:RenderGeometryRaw, :SDL_RenderGeometryRaw, [:pointer, :pointer, :pointer, :int, :pointer, :int, :pointer, :int, :int, :pointer, :int, :int], :bool],
      [:RenderReadPixels, :SDL_RenderReadPixels, [:pointer, :pointer], :pointer],
      [:RenderPresent, :SDL_RenderPresent, [:pointer], :bool],
      [:DestroyTexture, :SDL_DestroyTexture, [:pointer], :void],
      [:DestroyRenderer, :SDL_DestroyRenderer, [:pointer], :void],
      [:FlushRenderer, :SDL_FlushRenderer, [:pointer], :bool],
      [:GetRenderMetalLayer, :SDL_GetRenderMetalLayer, [:pointer], :pointer],
      [:GetRenderMetalCommandEncoder, :SDL_GetRenderMetalCommandEncoder, [:pointer], :pointer],
      [:AddVulkanRenderSemaphores, :SDL_AddVulkanRenderSemaphores, [:pointer, :uint, :long_long, :long_long], :bool],
      [:SetRenderVSync, :SDL_SetRenderVSync, [:pointer, :int], :bool],
      [:GetRenderVSync, :SDL_GetRenderVSync, [:pointer, :pointer], :bool],
      [:RenderDebugText, :SDL_RenderDebugText, [:pointer, :float, :float, :pointer], :bool],
      [:RenderDebugTextFormat, :SDL_RenderDebugTextFormat, [:pointer, :float, :float, :pointer], :bool],
    ]
    entries.each do |entry|
      attach_function entry[0], entry[1], entry[2], entry[3]
    rescue FFI::NotFoundError => e
      warn "[Warning] Failed to import #{entry[0]} (#{e})." if output_error
    end
  end

end

