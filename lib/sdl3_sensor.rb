# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module SDL
  extend FFI::Library
  # Define/Macro

  STANDARD_GRAVITY = 9.80665

  # Enum

  SENSOR_INVALID = -1
  SENSOR_UNKNOWN = 0
  SENSOR_ACCEL = 1
  SENSOR_GYRO = 2
  SENSOR_ACCEL_L = 3
  SENSOR_GYRO_L = 4
  SENSOR_ACCEL_R = 5
  SENSOR_GYRO_R = 6

  # Typedef

  typedef :uint, :SDL_SensorID
  typedef :int, :SDL_SensorType

  # Struct


  # Function

  def self.setup_sensor_symbols(output_error = false)
    entries = [
      [:GetSensors, :SDL_GetSensors, [:pointer], :pointer],
      [:GetSensorNameForID, :SDL_GetSensorNameForID, [:uint], :pointer],
      [:GetSensorTypeForID, :SDL_GetSensorTypeForID, [:uint], :int],
      [:GetSensorNonPortableTypeForID, :SDL_GetSensorNonPortableTypeForID, [:uint], :int],
      [:OpenSensor, :SDL_OpenSensor, [:uint], :pointer],
      [:GetSensorFromID, :SDL_GetSensorFromID, [:uint], :pointer],
      [:GetSensorProperties, :SDL_GetSensorProperties, [:pointer], :uint],
      [:GetSensorName, :SDL_GetSensorName, [:pointer], :pointer],
      [:GetSensorType, :SDL_GetSensorType, [:pointer], :int],
      [:GetSensorNonPortableType, :SDL_GetSensorNonPortableType, [:pointer], :int],
      [:GetSensorID, :SDL_GetSensorID, [:pointer], :uint],
      [:GetSensorData, :SDL_GetSensorData, [:pointer, :pointer, :int], :bool],
      [:CloseSensor, :SDL_CloseSensor, [:pointer], :void],
      [:UpdateSensors, :SDL_UpdateSensors, [], :void],
    ]
    entries.each do |entry|
      attach_function entry[0], entry[1], entry[2], entry[3]
    rescue FFI::NotFoundError => e
      warn "[Warning] Failed to import #{entry[0]} (#{e})." if output_error
    end
  end

end

