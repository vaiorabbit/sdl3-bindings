# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module SDL
  extend FFI::Library
  # Define/Macro

  SOUND_VER_MAJOR = 3
  SOUND_VER_MINOR = 0
  SOUND_VER_PATCH = 0

  # Enum

  SOUND_SAMPLEFLAG_NONE = 0
  SOUND_SAMPLEFLAG_CANSEEK = 1
  SOUND_SAMPLEFLAG_EOF = 536870912
  SOUND_SAMPLEFLAG_ERROR = 1073741824
  SOUND_SAMPLEFLAG_EAGAIN = -2147483648

  # Typedef

  typedef :int, :Sound_SampleFlags

  # Struct

  class Sound_AudioInfo < FFI::Struct
    layout(
      :format, :ushort,
      :channels, :uchar,
      :rate, :uint,
    )
  end

  class Sound_DecoderInfo < FFI::Struct
    layout(
      :extensions, :pointer,
      :description, :pointer,
      :author, :pointer,
      :url, :pointer,
    )
  end

  class Sound_Sample < FFI::Struct
    layout(
      :opaque, :pointer,
      :decoder, :pointer,
      :desired, Sound_AudioInfo,
      :actual, Sound_AudioInfo,
      :buffer, :pointer,
      :buffer_size, :uint,
      :flags, :int,
    )
  end

  class Sound_Version < FFI::Struct
    layout(
      :major, :int,
      :minor, :int,
      :patch, :int,
    )
  end


  # Function

  def self.setup_sound_symbols(output_error = false)
    entries = [
      [:Sound_GetLinkedVersion, :Sound_GetLinkedVersion, [:pointer], :void],
      [:Sound_Init, :Sound_Init, [], :int],
      [:Sound_Quit, :Sound_Quit, [], :int],
      [:Sound_AvailableDecoders, :Sound_AvailableDecoders, [], :pointer],
      [:Sound_GetError, :Sound_GetError, [], :pointer],
      [:Sound_ClearError, :Sound_ClearError, [], :void],
      [:Sound_NewSample, :Sound_NewSample, [:pointer, :pointer, :pointer, :uint], :pointer],
      [:Sound_NewSampleFromMem, :Sound_NewSampleFromMem, [:pointer, :uint, :pointer, :pointer, :uint], :pointer],
      [:Sound_NewSampleFromFile, :Sound_NewSampleFromFile, [:pointer, :pointer, :uint], :pointer],
      [:Sound_FreeSample, :Sound_FreeSample, [:pointer], :void],
      [:Sound_GetDuration, :Sound_GetDuration, [:pointer], :int],
      [:Sound_SetBufferSize, :Sound_SetBufferSize, [:pointer, :uint], :int],
      [:Sound_Decode, :Sound_Decode, [:pointer], :uint],
      [:Sound_DecodeAll, :Sound_DecodeAll, [:pointer], :uint],
      [:Sound_Rewind, :Sound_Rewind, [:pointer], :int],
      [:Sound_Seek, :Sound_Seek, [:pointer, :uint], :int],
    ]
    entries.each do |entry|
      attach_function entry[0], entry[1], entry[2], entry[3]
    rescue FFI::NotFoundError => e
      warn "[Warning] Failed to import #{entry[0]} (#{e})." if output_error
    end
  end

end

