# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module SDL
  extend FFI::Library
  # Define/Macro


  # Enum


  # Typedef


  # Struct

  class StorageInterface < FFI::Struct
    layout(
      :version, :uint,
      :close, :pointer,
      :ready, :pointer,
      :enumerate, :pointer,
      :info, :pointer,
      :read_file, :pointer,
      :write_file, :pointer,
      :mkdir, :pointer,
      :remove, :pointer,
      :rename, :pointer,
      :copy, :pointer,
      :space_remaining, :pointer,
    )
  end


  # Function

  def self.setup_storage_symbols(output_error = false)
    entries = [
      [:OpenTitleStorage, :SDL_OpenTitleStorage, [:pointer, :uint], :pointer],
      [:OpenUserStorage, :SDL_OpenUserStorage, [:pointer, :pointer, :uint], :pointer],
      [:OpenFileStorage, :SDL_OpenFileStorage, [:pointer], :pointer],
      [:OpenStorage, :SDL_OpenStorage, [:pointer, :pointer], :pointer],
      [:CloseStorage, :SDL_CloseStorage, [:pointer], :bool],
      [:StorageReady, :SDL_StorageReady, [:pointer], :bool],
      [:GetStorageFileSize, :SDL_GetStorageFileSize, [:pointer, :pointer, :pointer], :bool],
      [:ReadStorageFile, :SDL_ReadStorageFile, [:pointer, :pointer, :pointer, :ulong_long], :bool],
      [:WriteStorageFile, :SDL_WriteStorageFile, [:pointer, :pointer, :pointer, :ulong_long], :bool],
      [:CreateStorageDirectory, :SDL_CreateStorageDirectory, [:pointer, :pointer], :bool],
      [:EnumerateStorageDirectory, :SDL_EnumerateStorageDirectory, [:pointer, :pointer, :SDL_EnumerateDirectoryCallback, :pointer], :bool],
      [:RemoveStoragePath, :SDL_RemoveStoragePath, [:pointer, :pointer], :bool],
      [:RenameStoragePath, :SDL_RenameStoragePath, [:pointer, :pointer, :pointer], :bool],
      [:CopyStorageFile, :SDL_CopyStorageFile, [:pointer, :pointer, :pointer], :bool],
      [:GetStoragePathInfo, :SDL_GetStoragePathInfo, [:pointer, :pointer, :pointer], :bool],
      [:GetStorageSpaceRemaining, :SDL_GetStorageSpaceRemaining, [:pointer], :ulong_long],
      [:GlobStorageDirectory, :SDL_GlobStorageDirectory, [:pointer, :pointer, :pointer, :uint, :pointer], :pointer],
    ]
    entries.each do |entry|
      attach_function entry[0], entry[1], entry[2], entry[3]
    rescue FFI::NotFoundError => e
      warn "[Warning] Failed to import #{entry[0]} (#{e})." if output_error
    end
  end

end

