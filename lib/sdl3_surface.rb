# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'sdl3_rect'

module SDL
  extend FFI::Library
  # Define/Macro

  SURFACE_PREALLOCATED = 0x00000001
  SURFACE_LOCK_NEEDED = 0x00000002
  SURFACE_LOCKED = 0x00000004
  SURFACE_SIMD_ALIGNED = 0x00000008
  PROP_SURFACE_SDR_WHITE_POINT_FLOAT = "SDL.surface.SDR_white_point"
  PROP_SURFACE_HDR_HEADROOM_FLOAT = "SDL.surface.HDR_headroom"
  PROP_SURFACE_TONEMAP_OPERATOR_STRING = "SDL.surface.tonemap"

  # Enum

  SCALEMODE_NEAREST = 0
  SCALEMODE_LINEAR = 1
  FLIP_NONE = 0
  FLIP_HORIZONTAL = 1
  FLIP_VERTICAL = 2

  # Typedef

  typedef :uint, :SDL_SurfaceFlags
  typedef :int, :SDL_ScaleMode
  typedef :int, :SDL_FlipMode

  # Struct

  class Surface < FFI::Struct
    layout(
      :flags, :uint,
      :format, :int,
      :w, :int,
      :h, :int,
      :pitch, :int,
      :pixels, :pointer,
      :refcount, :int,
      :reserved, :pointer,
    )
  end


  # Function

  def self.setup_surface_symbols(output_error = false)
    entries = [
      [:CreateSurface, :SDL_CreateSurface, [:int, :int, :int], :pointer],
      [:CreateSurfaceFrom, :SDL_CreateSurfaceFrom, [:int, :int, :int, :pointer, :int], :pointer],
      [:DestroySurface, :SDL_DestroySurface, [:pointer], :void],
      [:GetSurfaceProperties, :SDL_GetSurfaceProperties, [:pointer], :uint],
      [:SetSurfaceColorspace, :SDL_SetSurfaceColorspace, [:pointer, :int], :bool],
      [:GetSurfaceColorspace, :SDL_GetSurfaceColorspace, [:pointer], :int],
      [:CreateSurfacePalette, :SDL_CreateSurfacePalette, [:pointer], :pointer],
      [:SetSurfacePalette, :SDL_SetSurfacePalette, [:pointer, :pointer], :bool],
      [:GetSurfacePalette, :SDL_GetSurfacePalette, [:pointer], :pointer],
      [:AddSurfaceAlternateImage, :SDL_AddSurfaceAlternateImage, [:pointer, :pointer], :bool],
      [:SurfaceHasAlternateImages, :SDL_SurfaceHasAlternateImages, [:pointer], :bool],
      [:GetSurfaceImages, :SDL_GetSurfaceImages, [:pointer, :pointer], :pointer],
      [:RemoveSurfaceAlternateImages, :SDL_RemoveSurfaceAlternateImages, [:pointer], :void],
      [:LockSurface, :SDL_LockSurface, [:pointer], :bool],
      [:UnlockSurface, :SDL_UnlockSurface, [:pointer], :void],
      [:LoadBMP_IO, :SDL_LoadBMP_IO, [:pointer, :bool], :pointer],
      [:LoadBMP, :SDL_LoadBMP, [:pointer], :pointer],
      [:SaveBMP_IO, :SDL_SaveBMP_IO, [:pointer, :pointer, :bool], :bool],
      [:SaveBMP, :SDL_SaveBMP, [:pointer, :pointer], :bool],
      [:SetSurfaceRLE, :SDL_SetSurfaceRLE, [:pointer, :bool], :bool],
      [:SurfaceHasRLE, :SDL_SurfaceHasRLE, [:pointer], :bool],
      [:SetSurfaceColorKey, :SDL_SetSurfaceColorKey, [:pointer, :bool, :uint], :bool],
      [:SurfaceHasColorKey, :SDL_SurfaceHasColorKey, [:pointer], :bool],
      [:GetSurfaceColorKey, :SDL_GetSurfaceColorKey, [:pointer, :pointer], :bool],
      [:SetSurfaceColorMod, :SDL_SetSurfaceColorMod, [:pointer, :uchar, :uchar, :uchar], :bool],
      [:GetSurfaceColorMod, :SDL_GetSurfaceColorMod, [:pointer, :pointer, :pointer, :pointer], :bool],
      [:SetSurfaceAlphaMod, :SDL_SetSurfaceAlphaMod, [:pointer, :uchar], :bool],
      [:GetSurfaceAlphaMod, :SDL_GetSurfaceAlphaMod, [:pointer, :pointer], :bool],
      [:SetSurfaceBlendMode, :SDL_SetSurfaceBlendMode, [:pointer, :uint], :bool],
      [:GetSurfaceBlendMode, :SDL_GetSurfaceBlendMode, [:pointer, :pointer], :bool],
      [:SetSurfaceClipRect, :SDL_SetSurfaceClipRect, [:pointer, :pointer], :bool],
      [:GetSurfaceClipRect, :SDL_GetSurfaceClipRect, [:pointer, :pointer], :bool],
      [:FlipSurface, :SDL_FlipSurface, [:pointer, :int], :bool],
      [:DuplicateSurface, :SDL_DuplicateSurface, [:pointer], :pointer],
      [:ScaleSurface, :SDL_ScaleSurface, [:pointer, :int, :int, :int], :pointer],
      [:ConvertSurface, :SDL_ConvertSurface, [:pointer, :int], :pointer],
      [:ConvertSurfaceAndColorspace, :SDL_ConvertSurfaceAndColorspace, [:pointer, :int, :pointer, :int, :uint], :pointer],
      [:ConvertPixels, :SDL_ConvertPixels, [:int, :int, :int, :pointer, :int, :int, :pointer, :int], :bool],
      [:ConvertPixelsAndColorspace, :SDL_ConvertPixelsAndColorspace, [:int, :int, :int, :int, :uint, :pointer, :int, :int, :int, :uint, :pointer, :int], :bool],
      [:PremultiplyAlpha, :SDL_PremultiplyAlpha, [:int, :int, :int, :pointer, :int, :int, :pointer, :int, :bool], :bool],
      [:PremultiplySurfaceAlpha, :SDL_PremultiplySurfaceAlpha, [:pointer, :bool], :bool],
      [:ClearSurface, :SDL_ClearSurface, [:pointer, :float, :float, :float, :float], :bool],
      [:FillSurfaceRect, :SDL_FillSurfaceRect, [:pointer, :pointer, :uint], :bool],
      [:FillSurfaceRects, :SDL_FillSurfaceRects, [:pointer, :pointer, :int, :uint], :bool],
      [:BlitSurface, :SDL_BlitSurface, [:pointer, :pointer, :pointer, :pointer], :bool],
      [:BlitSurfaceUnchecked, :SDL_BlitSurfaceUnchecked, [:pointer, :pointer, :pointer, :pointer], :bool],
      [:BlitSurfaceScaled, :SDL_BlitSurfaceScaled, [:pointer, :pointer, :pointer, :pointer, :int], :bool],
      [:BlitSurfaceUncheckedScaled, :SDL_BlitSurfaceUncheckedScaled, [:pointer, :pointer, :pointer, :pointer, :int], :bool],
      [:StretchSurface, :SDL_StretchSurface, [:pointer, :pointer, :pointer, :pointer, :int], :bool],
      [:BlitSurfaceTiled, :SDL_BlitSurfaceTiled, [:pointer, :pointer, :pointer, :pointer], :bool],
      [:BlitSurfaceTiledWithScale, :SDL_BlitSurfaceTiledWithScale, [:pointer, :pointer, :float, :int, :pointer, :pointer], :bool],
      [:BlitSurface9Grid, :SDL_BlitSurface9Grid, [:pointer, :pointer, :int, :int, :int, :int, :float, :int, :pointer, :pointer], :bool],
      [:MapSurfaceRGB, :SDL_MapSurfaceRGB, [:pointer, :uchar, :uchar, :uchar], :uint],
      [:MapSurfaceRGBA, :SDL_MapSurfaceRGBA, [:pointer, :uchar, :uchar, :uchar, :uchar], :uint],
      [:ReadSurfacePixel, :SDL_ReadSurfacePixel, [:pointer, :int, :int, :pointer, :pointer, :pointer, :pointer], :bool],
      [:ReadSurfacePixelFloat, :SDL_ReadSurfacePixelFloat, [:pointer, :int, :int, :pointer, :pointer, :pointer, :pointer], :bool],
      [:WriteSurfacePixel, :SDL_WriteSurfacePixel, [:pointer, :int, :int, :uchar, :uchar, :uchar, :uchar], :bool],
      [:WriteSurfacePixelFloat, :SDL_WriteSurfacePixelFloat, [:pointer, :int, :int, :float, :float, :float, :float], :bool],
    ]
    entries.each do |entry|
      attach_function entry[0], entry[1], entry[2], entry[3]
    rescue FFI::NotFoundError => e
      warn "[Warning] Failed to import #{entry[0]} (#{e})." if output_error
    end
  end

end

