# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module SDL
  extend FFI::Library
  # Define/Macro

  PROP_THREAD_CREATE_ENTRY_FUNCTION_POINTER = "SDL.thread.create.entry_function"
  PROP_THREAD_CREATE_NAME_STRING = "SDL.thread.create.name"
  PROP_THREAD_CREATE_USERDATA_POINTER = "SDL.thread.create.userdata"
  PROP_THREAD_CREATE_STACKSIZE_NUMBER = "SDL.thread.create.stacksize"

  # Enum

  THREAD_PRIORITY_LOW = 0
  THREAD_PRIORITY_NORMAL = 1
  THREAD_PRIORITY_HIGH = 2
  THREAD_PRIORITY_TIME_CRITICAL = 3
  THREAD_UNKNOWN = 0
  THREAD_ALIVE = 1
  THREAD_DETACHED = 2
  THREAD_COMPLETE = 3

  # Typedef

  typedef :ulong_long, :SDL_ThreadID
  typedef :int, :SDL_ThreadPriority
  typedef :int, :SDL_ThreadState
  callback :SDL_ThreadFunction, [:pointer], :int
  callback :SDL_TLSDestructorCallback, [:pointer], :void

  # Struct


  # Function

  def self.setup_thread_symbols(output_error = false)
    entries = [
      [:CreateThreadRuntime, :SDL_CreateThreadRuntime, [:SDL_ThreadFunction, :pointer, :pointer, :SDL_FunctionPointer, :SDL_FunctionPointer], :pointer],
      [:CreateThreadWithPropertiesRuntime, :SDL_CreateThreadWithPropertiesRuntime, [:uint, :SDL_FunctionPointer, :SDL_FunctionPointer], :pointer],
      [:GetThreadName, :SDL_GetThreadName, [:pointer], :pointer],
      [:GetCurrentThreadID, :SDL_GetCurrentThreadID, [], :ulong_long],
      [:GetThreadID, :SDL_GetThreadID, [:pointer], :ulong_long],
      [:SetCurrentThreadPriority, :SDL_SetCurrentThreadPriority, [:int], :bool],
      [:WaitThread, :SDL_WaitThread, [:pointer, :pointer], :void],
      [:GetThreadState, :SDL_GetThreadState, [:pointer], :int],
      [:DetachThread, :SDL_DetachThread, [:pointer], :void],
      [:GetTLS, :SDL_GetTLS, [:pointer], :pointer],
      [:SetTLS, :SDL_SetTLS, [:pointer, :pointer, :SDL_TLSDestructorCallback], :bool],
      [:CleanupTLS, :SDL_CleanupTLS, [], :void],
    ]
    entries.each do |entry|
      attach_function entry[0], entry[1], entry[2], entry[3]
    rescue FFI::NotFoundError => e
      warn "[Warning] Failed to import #{entry[0]} (#{e})." if output_error
    end
  end

end

