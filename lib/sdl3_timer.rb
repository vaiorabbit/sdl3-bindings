# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module SDL
  extend FFI::Library
  # Define/Macro

  MS_PER_SECOND = 1000
  US_PER_SECOND = 1000000
  NS_PER_SECOND = 1000000000
  NS_PER_MS = 1000000
  NS_PER_US = 1000

  # Enum


  # Typedef

  typedef :uint, :SDL_TimerID
  callback :SDL_TimerCallback, [:pointer, :uint, :uint], :uint
  callback :SDL_NSTimerCallback, [:pointer, :uint, :ulong_long], :ulong_long

  # Struct


  # Function

  def self.setup_timer_symbols(output_error = false)
    entries = [
      [:GetTicks, :SDL_GetTicks, [], :ulong_long],
      [:GetTicksNS, :SDL_GetTicksNS, [], :ulong_long],
      [:GetPerformanceCounter, :SDL_GetPerformanceCounter, [], :ulong_long],
      [:GetPerformanceFrequency, :SDL_GetPerformanceFrequency, [], :ulong_long],
      [:Delay, :SDL_Delay, [:uint], :void],
      [:DelayNS, :SDL_DelayNS, [:ulong_long], :void],
      [:DelayPrecise, :SDL_DelayPrecise, [:ulong_long], :void],
      [:AddTimer, :SDL_AddTimer, [:uint, :SDL_TimerCallback, :pointer], :uint],
      [:AddTimerNS, :SDL_AddTimerNS, [:ulong_long, :SDL_NSTimerCallback, :pointer], :uint],
      [:RemoveTimer, :SDL_RemoveTimer, [:uint], :bool],
    ]
    entries.each do |entry|
      attach_function entry[0], entry[1], entry[2], entry[3]
    rescue FFI::NotFoundError => e
      warn "[Warning] Failed to import #{entry[0]} (#{e})." if output_error
    end
  end

end

