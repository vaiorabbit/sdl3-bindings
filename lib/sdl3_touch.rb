# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module SDL
  extend FFI::Library
  # Define/Macro


  # Enum

  TOUCH_DEVICE_INVALID = -1
  TOUCH_DEVICE_DIRECT = 0
  TOUCH_DEVICE_INDIRECT_ABSOLUTE = 1
  TOUCH_DEVICE_INDIRECT_RELATIVE = 2

  # Typedef

  typedef :ulong_long, :SDL_TouchID
  typedef :ulong_long, :SDL_FingerID
  typedef :int, :SDL_TouchDeviceType

  # Struct

  class Finger < FFI::Struct
    layout(
      :id, :ulong_long,
      :x, :float,
      :y, :float,
      :pressure, :float,
    )
  end


  # Function

  def self.setup_touch_symbols(output_error = false)
    symbols = [
      :SDL_GetTouchDevices,
      :SDL_GetTouchDeviceName,
      :SDL_GetTouchDeviceType,
      :SDL_GetTouchFingers,
    ]
    apis = {
      :SDL_GetTouchDevices => :GetTouchDevices,
      :SDL_GetTouchDeviceName => :GetTouchDeviceName,
      :SDL_GetTouchDeviceType => :GetTouchDeviceType,
      :SDL_GetTouchFingers => :GetTouchFingers,
    }
    args = {
      :SDL_GetTouchDevices => [:pointer],
      :SDL_GetTouchDeviceName => [:ulong_long],
      :SDL_GetTouchDeviceType => [:ulong_long],
      :SDL_GetTouchFingers => [:ulong_long, :pointer],
    }
    retvals = {
      :SDL_GetTouchDevices => :pointer,
      :SDL_GetTouchDeviceName => :pointer,
      :SDL_GetTouchDeviceType => :int,
      :SDL_GetTouchFingers => :pointer,
    }
    symbols.each do |sym|
      begin
        attach_function apis[sym], sym, args[sym], retvals[sym]
      rescue FFI::NotFoundError => error
        $stderr.puts("[Warning] Failed to import #{sym} (#{error}).") if output_error
      end
    end
  end

end

