# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'
require_relative 'sdl3_pixels'

module SDL
  extend FFI::Library
  # Define/Macro

  TTF_MAJOR_VERSION = 3
  TTF_MINOR_VERSION = 1
  TTF_MICRO_VERSION = 0
  TTF_PROP_FONT_CREATE_FILENAME_STRING = "SDL_ttf.font.create.filename"
  TTF_PROP_FONT_CREATE_IOSTREAM_POINTER = "SDL_ttf.font.create.iostream"
  TTF_PROP_FONT_CREATE_IOSTREAM_OFFSET_NUMBER = "SDL_ttf.font.create.iostream.offset"
  TTF_PROP_FONT_CREATE_IOSTREAM_AUTOCLOSE_BOOLEAN = "SDL_ttf.font.create.iostream.autoclose"
  TTF_PROP_FONT_CREATE_SIZE_FLOAT = "SDL_ttf.font.create.size"
  TTF_PROP_FONT_CREATE_FACE_NUMBER = "SDL_ttf.font.create.face"
  TTF_PROP_FONT_CREATE_HORIZONTAL_DPI_NUMBER = "SDL_ttf.font.create.hdpi"
  TTF_PROP_FONT_CREATE_VERTICAL_DPI_NUMBER = "SDL_ttf.font.create.vdpi"
  TTF_PROP_FONT_OUTLINE_LINE_CAP_NUMBER = "SDL_ttf.font.outline.line_cap"
  TTF_PROP_FONT_OUTLINE_LINE_JOIN_NUMBER = "SDL_ttf.font.outline.line_join"
  TTF_PROP_FONT_OUTLINE_MITER_LIMIT_NUMBER = "SDL_ttf.font.outline.miter_limit"
  TTF_STYLE_NORMAL = 0x00
  TTF_STYLE_BOLD = 0x01
  TTF_STYLE_ITALIC = 0x02
  TTF_STYLE_UNDERLINE = 0x04
  TTF_STYLE_STRIKETHROUGH = 0x08
  TTF_SUBSTRING_TEXT_START = 0x00000001
  TTF_SUBSTRING_LINE_START = 0x00000002
  TTF_SUBSTRING_LINE_END = 0x00000004
  TTF_SUBSTRING_TEXT_END = 0x00000008

  # Enum

  TTF_HINTING_NORMAL = 0
  TTF_HINTING_LIGHT = 1
  TTF_HINTING_MONO = 2
  TTF_HINTING_NONE = 3
  TTF_HINTING_LIGHT_SUBPIXEL = 4
  TTF_HORIZONTAL_ALIGN_INVALID = -1
  TTF_HORIZONTAL_ALIGN_LEFT = 0
  TTF_HORIZONTAL_ALIGN_CENTER = 1
  TTF_HORIZONTAL_ALIGN_RIGHT = 2
  TTF_DIRECTION_LTR = 0
  TTF_DIRECTION_RTL = 1
  TTF_DIRECTION_TTB = 2
  TTF_DIRECTION_BTT = 3
  TTF_GPU_TEXTENGINE_WINDING_INVALID = -1
  TTF_GPU_TEXTENGINE_WINDING_CLOCKWISE = 0
  TTF_GPU_TEXTENGINE_WINDING_COUNTER_CLOCKWISE = 1

  # Typedef

  typedef :uint, :TTF_FontStyleFlags
  typedef :int, :TTF_HintingFlags
  typedef :int, :TTF_HorizontalAlignment
  typedef :int, :TTF_Direction
  typedef :int, :TTF_GPUTextEngineWinding
  typedef :uint, :TTF_SubStringFlags

  # Struct

  class TTF_Text < FFI::Struct
    layout(
      :text, :pointer,
      :num_lines, :int,
      :refcount, :int,
      :internal, :pointer,
    )
  end

  class TTF_GPUAtlasDrawSequence < FFI::Struct
    layout(
      :atlas_texture, :pointer,
      :xy, :pointer,
      :uv, :pointer,
      :num_vertices, :int,
      :indices, :pointer,
      :num_indices, :int,
      :next, :pointer,
    )
  end

  class TTF_SubString < FFI::Struct
    layout(
      :flags, :uint,
      :offset, :int,
      :length, :int,
      :line_index, :int,
      :cluster_index, :int,
      :rect, Rect,
    )
  end


  # Function

  def self.setup_ttf_symbols(output_error = false)
    entries = [
      [:TTF_Version, :TTF_Version, [], :int],
      [:TTF_GetFreeTypeVersion, :TTF_GetFreeTypeVersion, [:pointer, :pointer, :pointer], :void],
      [:TTF_GetHarfBuzzVersion, :TTF_GetHarfBuzzVersion, [:pointer, :pointer, :pointer], :void],
      [:TTF_Init, :TTF_Init, [], :bool],
      [:TTF_OpenFont, :TTF_OpenFont, [:pointer, :float], :pointer],
      [:TTF_OpenFontIO, :TTF_OpenFontIO, [:pointer, :bool, :float], :pointer],
      [:TTF_OpenFontWithProperties, :TTF_OpenFontWithProperties, [:uint], :pointer],
      [:TTF_GetFontProperties, :TTF_GetFontProperties, [:pointer], :uint],
      [:TTF_GetFontGeneration, :TTF_GetFontGeneration, [:pointer], :uint],
      [:TTF_SetFontSize, :TTF_SetFontSize, [:pointer, :float], :bool],
      [:TTF_SetFontSizeDPI, :TTF_SetFontSizeDPI, [:pointer, :float, :int, :int], :bool],
      [:TTF_GetFontSize, :TTF_GetFontSize, [:pointer], :float],
      [:TTF_GetFontDPI, :TTF_GetFontDPI, [:pointer, :pointer, :pointer], :bool],
      [:TTF_SetFontStyle, :TTF_SetFontStyle, [:pointer, :uint], :void],
      [:TTF_GetFontStyle, :TTF_GetFontStyle, [:pointer], :uint],
      [:TTF_SetFontOutline, :TTF_SetFontOutline, [:pointer, :int], :bool],
      [:TTF_GetFontOutline, :TTF_GetFontOutline, [:pointer], :int],
      [:TTF_SetFontHinting, :TTF_SetFontHinting, [:pointer, :int], :void],
      [:TTF_GetFontHinting, :TTF_GetFontHinting, [:pointer], :int],
      [:TTF_SetFontSDF, :TTF_SetFontSDF, [:pointer, :bool], :bool],
      [:TTF_GetFontSDF, :TTF_GetFontSDF, [:pointer], :bool],
      [:TTF_SetFontWrapAlignment, :TTF_SetFontWrapAlignment, [:pointer, :int], :void],
      [:TTF_GetFontWrapAlignment, :TTF_GetFontWrapAlignment, [:pointer], :int],
      [:TTF_GetFontHeight, :TTF_GetFontHeight, [:pointer], :int],
      [:TTF_GetFontAscent, :TTF_GetFontAscent, [:pointer], :int],
      [:TTF_GetFontDescent, :TTF_GetFontDescent, [:pointer], :int],
      [:TTF_SetFontLineSkip, :TTF_SetFontLineSkip, [:pointer, :int], :void],
      [:TTF_GetFontLineSkip, :TTF_GetFontLineSkip, [:pointer], :int],
      [:TTF_SetFontKerning, :TTF_SetFontKerning, [:pointer, :bool], :void],
      [:TTF_GetFontKerning, :TTF_GetFontKerning, [:pointer], :bool],
      [:TTF_FontIsFixedWidth, :TTF_FontIsFixedWidth, [:pointer], :bool],
      [:TTF_FontIsScalable, :TTF_FontIsScalable, [:pointer], :bool],
      [:TTF_GetFontFamilyName, :TTF_GetFontFamilyName, [:pointer], :pointer],
      [:TTF_GetFontStyleName, :TTF_GetFontStyleName, [:pointer], :pointer],
      [:TTF_RenderText_Solid, :TTF_RenderText_Solid, [:pointer, :pointer, :ulong_long, Color.by_value], :pointer],
      [:TTF_RenderText_Solid_Wrapped, :TTF_RenderText_Solid_Wrapped, [:pointer, :pointer, :ulong_long, Color.by_value, :int], :pointer],
      [:TTF_RenderGlyph_Solid, :TTF_RenderGlyph_Solid, [:pointer, :uint, Color.by_value], :pointer],
      [:TTF_SetFontDirection, :TTF_SetFontDirection, [:pointer, :int], :bool],
      [:TTF_GetFontDirection, :TTF_GetFontDirection, [:pointer], :int],
      [:TTF_SetFontScript, :TTF_SetFontScript, [:pointer, :pointer], :bool],
      [:TTF_GetGlyphScript, :TTF_GetGlyphScript, [:uint, :pointer, :ulong_long], :bool],
      [:TTF_SetFontLanguage, :TTF_SetFontLanguage, [:pointer, :pointer], :bool],
      [:TTF_FontHasGlyph, :TTF_FontHasGlyph, [:pointer, :uint], :bool],
      [:TTF_GetGlyphImage, :TTF_GetGlyphImage, [:pointer, :uint], :pointer],
      [:TTF_GetGlyphImageForIndex, :TTF_GetGlyphImageForIndex, [:pointer, :uint], :pointer],
      [:TTF_GetGlyphMetrics, :TTF_GetGlyphMetrics, [:pointer, :uint, :pointer, :pointer, :pointer, :pointer, :pointer], :bool],
      [:TTF_GetGlyphKerning, :TTF_GetGlyphKerning, [:pointer, :uint, :uint, :pointer], :bool],
      [:TTF_GetStringSize, :TTF_GetStringSize, [:pointer, :pointer, :ulong_long, :pointer, :pointer], :bool],
      [:TTF_GetStringSizeWrapped, :TTF_GetStringSizeWrapped, [:pointer, :pointer, :ulong_long, :int, :pointer, :pointer], :bool],
      [:TTF_MeasureString, :TTF_MeasureString, [:pointer, :pointer, :ulong_long, :int, :pointer, :pointer], :bool],
      [:TTF_RenderText_Shaded, :TTF_RenderText_Shaded, [:pointer, :pointer, :ulong_long, Color.by_value, Color.by_value], :pointer],
      [:TTF_RenderText_Shaded_Wrapped, :TTF_RenderText_Shaded_Wrapped, [:pointer, :pointer, :ulong_long, Color.by_value, Color.by_value, :int], :pointer],
      [:TTF_RenderGlyph_Shaded, :TTF_RenderGlyph_Shaded, [:pointer, :uint, Color.by_value, Color.by_value], :pointer],
      [:TTF_RenderText_Blended, :TTF_RenderText_Blended, [:pointer, :pointer, :ulong_long, Color.by_value], :pointer],
      [:TTF_RenderText_Blended_Wrapped, :TTF_RenderText_Blended_Wrapped, [:pointer, :pointer, :ulong_long, Color.by_value, :int], :pointer],
      [:TTF_RenderGlyph_Blended, :TTF_RenderGlyph_Blended, [:pointer, :uint, Color.by_value], :pointer],
      [:TTF_RenderText_LCD, :TTF_RenderText_LCD, [:pointer, :pointer, :ulong_long, Color.by_value, Color.by_value], :pointer],
      [:TTF_RenderText_LCD_Wrapped, :TTF_RenderText_LCD_Wrapped, [:pointer, :pointer, :ulong_long, Color.by_value, Color.by_value, :int], :pointer],
      [:TTF_RenderGlyph_LCD, :TTF_RenderGlyph_LCD, [:pointer, :uint, Color.by_value, Color.by_value], :pointer],
      [:TTF_CreateSurfaceTextEngine, :TTF_CreateSurfaceTextEngine, [], :pointer],
      [:TTF_DrawSurfaceText, :TTF_DrawSurfaceText, [:pointer, :int, :int, :pointer], :bool],
      [:TTF_DestroySurfaceTextEngine, :TTF_DestroySurfaceTextEngine, [:pointer], :void],
      [:TTF_CreateRendererTextEngine, :TTF_CreateRendererTextEngine, [:pointer], :pointer],
      [:TTF_DrawRendererText, :TTF_DrawRendererText, [:pointer, :float, :float], :bool],
      [:TTF_DestroyRendererTextEngine, :TTF_DestroyRendererTextEngine, [:pointer], :void],
      [:TTF_CreateGPUTextEngine, :TTF_CreateGPUTextEngine, [:pointer], :pointer],
      [:TTF_GetGPUTextDrawData, :TTF_GetGPUTextDrawData, [:pointer], :pointer],
      [:TTF_DestroyGPUTextEngine, :TTF_DestroyGPUTextEngine, [:pointer], :void],
      [:TTF_SetGPUTextEngineWinding, :TTF_SetGPUTextEngineWinding, [:pointer, :int], :void],
      [:TTF_GetGPUTextEngineWinding, :TTF_GetGPUTextEngineWinding, [:pointer], :int],
      [:TTF_CreateText, :TTF_CreateText, [:pointer, :pointer, :pointer, :ulong_long], :pointer],
      [:TTF_GetTextProperties, :TTF_GetTextProperties, [:pointer], :uint],
      [:TTF_SetTextEngine, :TTF_SetTextEngine, [:pointer, :pointer], :bool],
      [:TTF_GetTextEngine, :TTF_GetTextEngine, [:pointer], :pointer],
      [:TTF_SetTextFont, :TTF_SetTextFont, [:pointer, :pointer], :bool],
      [:TTF_GetTextFont, :TTF_GetTextFont, [:pointer], :pointer],
      [:TTF_SetTextColor, :TTF_SetTextColor, [:pointer, :uchar, :uchar, :uchar, :uchar], :bool],
      [:TTF_SetTextColorFloat, :TTF_SetTextColorFloat, [:pointer, :float, :float, :float, :float], :bool],
      [:TTF_GetTextColor, :TTF_GetTextColor, [:pointer, :pointer, :pointer, :pointer, :pointer], :bool],
      [:TTF_GetTextColorFloat, :TTF_GetTextColorFloat, [:pointer, :pointer, :pointer, :pointer, :pointer], :bool],
      [:TTF_SetTextPosition, :TTF_SetTextPosition, [:pointer, :int, :int], :bool],
      [:TTF_GetTextPosition, :TTF_GetTextPosition, [:pointer, :pointer, :pointer], :bool],
      [:TTF_SetTextWrapWidth, :TTF_SetTextWrapWidth, [:pointer, :int], :bool],
      [:TTF_GetTextWrapWidth, :TTF_GetTextWrapWidth, [:pointer, :pointer], :bool],
      [:TTF_SetTextWrapWhitespaceVisible, :TTF_SetTextWrapWhitespaceVisible, [:pointer, :bool], :bool],
      [:TTF_TextWrapWhitespaceVisible, :TTF_TextWrapWhitespaceVisible, [:pointer], :bool],
      [:TTF_SetTextString, :TTF_SetTextString, [:pointer, :pointer, :ulong_long], :bool],
      [:TTF_InsertTextString, :TTF_InsertTextString, [:pointer, :int, :pointer, :ulong_long], :bool],
      [:TTF_AppendTextString, :TTF_AppendTextString, [:pointer, :pointer, :ulong_long], :bool],
      [:TTF_DeleteTextString, :TTF_DeleteTextString, [:pointer, :int, :int], :bool],
      [:TTF_GetTextSize, :TTF_GetTextSize, [:pointer, :pointer, :pointer], :bool],
      [:TTF_GetTextSubString, :TTF_GetTextSubString, [:pointer, :int, :pointer], :bool],
      [:TTF_GetTextSubStringForLine, :TTF_GetTextSubStringForLine, [:pointer, :int, :pointer], :bool],
      [:TTF_GetTextSubStringsForRange, :TTF_GetTextSubStringsForRange, [:pointer, :int, :int, :pointer], :pointer],
      [:TTF_GetTextSubStringForPoint, :TTF_GetTextSubStringForPoint, [:pointer, :int, :int, :pointer], :bool],
      [:TTF_GetPreviousTextSubString, :TTF_GetPreviousTextSubString, [:pointer, :pointer, :pointer], :bool],
      [:TTF_GetNextTextSubString, :TTF_GetNextTextSubString, [:pointer, :pointer, :pointer], :bool],
      [:TTF_UpdateText, :TTF_UpdateText, [:pointer], :bool],
      [:TTF_DestroyText, :TTF_DestroyText, [:pointer], :void],
      [:TTF_CloseFont, :TTF_CloseFont, [:pointer], :void],
      [:TTF_Quit, :TTF_Quit, [], :void],
      [:TTF_WasInit, :TTF_WasInit, [], :int],
    ]
    entries.each do |entry|
      attach_function entry[0], entry[1], entry[2], entry[3]
    rescue FFI::NotFoundError => e
      warn "[Warning] Failed to import #{entry[0]} (#{e})." if output_error
    end
  end

end

