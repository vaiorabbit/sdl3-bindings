# Ruby-SDL3 : SDL3 wrapper for Ruby
#
# * https://github.com/vaiorabbit/sdl3-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module SDL
  extend FFI::Library
  # Define/Macro


  # Enum


  # Typedef

  typedef :pointer, :VkInstance
  typedef :pointer, :VkPhysicalDevice
  typedef :pointer, :VkSurfaceKHR

  # Struct


  # Function

  def self.setup_vulkan_symbols(output_error = false)
    entries = [
      [:Vulkan_LoadLibrary, :SDL_Vulkan_LoadLibrary, [:pointer], :bool],
      [:Vulkan_GetVkGetInstanceProcAddr, :SDL_Vulkan_GetVkGetInstanceProcAddr, [], :pointer],
      [:Vulkan_UnloadLibrary, :SDL_Vulkan_UnloadLibrary, [], :void],
      [:Vulkan_GetInstanceExtensions, :SDL_Vulkan_GetInstanceExtensions, [:pointer], :pointer],
      [:Vulkan_CreateSurface, :SDL_Vulkan_CreateSurface, [:pointer, :pointer, :pointer, :pointer], :bool],
      [:Vulkan_DestroySurface, :SDL_Vulkan_DestroySurface, [:pointer, :pointer, :pointer], :void],
      [:Vulkan_GetPresentationSupport, :SDL_Vulkan_GetPresentationSupport, [:pointer, :pointer, :uint], :bool],
    ]
    entries.each do |entry|
      attach_function entry[0], entry[1], entry[2], entry[3]
    rescue FFI::NotFoundError => e
      warn "[Warning] Failed to import #{entry[0]} (#{e})." if output_error
    end
  end

end

